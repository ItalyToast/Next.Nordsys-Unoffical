use serde::{Serialize, Deserialize};use crate::tables_trait;
// This file is generated by the project found in gen/ 

/*
Ext.define("MEM.model.AccountChart", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "AccountNo", type: "string", meType: "meShortText", max: 5 },
      {
        name: "Account",
        type: "string",
        meType: "meShortText",
        max: 5,
        convert: function (b, a) {
          return a.get("AccountNo") + " " + a.get("Description");
        },
      },
      { name: "Description", type: "string", meType: "meMediumText", max: 50 },
      { name: "Cost", type: "bool", meType: "meBool" },
      { name: "Work", type: "bool", meType: "meBool" },
      { name: "Material", type: "bool", meType: "meBool" },
      { name: "VatCode", type: "string", meType: "meShortText", max: 10 },
      {
        name: "ComplementAccount",
        type: "string",
        meType: "meShortText",
        max: 5,
      },
      { name: "VatDuty", type: "bool", meType: "meBool" },
      { name: "InvoiceOnImport", type: "bool", meType: "meBool" },
      { name: "RotShare", type: "int", meType: "meInt" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct AccountChartStore {
    pub Description : String, //string
    pub Id : String, //int
    pub Created : String, //date
    pub RotShare : String, //int
    pub Changed : String, //date
    pub VatDuty : String, //bool
    pub CreatedId : String, //string
    pub Disabled : String, //boolean
    pub VatCode : String, //string
    pub Material : String, //bool
    pub ComplementAccount : String, //string
    pub Cost : String, //bool
    pub Work : String, //bool
    pub ChangedId : String, //string
    pub Account : String, //string
    pub AccountNo : String, //string
    pub InvoiceOnImport : String, //bool
}

impl TableTrait for AccountChartStore { fn name() -> &'static str { "AccountChartStore" } }/*
Ext.define("MEM.model.AdditionalWorkOrderRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Title", type: "string", max: 50 },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "PlannedQty", type: "float" },
      { name: "UsedQty", type: "float" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "Amount", type: "float", defaultValue: 1 },
      { name: "DeliveryDate", type: "date", useNull: !0, persist: !1 },
      { name: "ReturnDate", type: "date", useNull: !0, persist: !1 },
      { name: "PerformedDate", type: "date", useNull: !0, persist: !1 },
      { name: "PerformedUserId", type: "int", useNull: !0, persist: !1 },
      { name: "Comment", type: "string" },
      { name: "RowFormat", type: "string", max: 3, persist: !1 },
      { name: "RowStatus", type: "string", max: 1, persist: !1 },
      { name: "DiaryId", type: "int", persist: !1 },
      { name: "TimeId", type: "int", persist: !1 },
      { name: "Invoiced", type: "bool", persist: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct AdditionalWorkOrderRowStore {
    pub Disabled : String, //boolean
    pub CodeNo : String, //string
    pub UsedQty : String, //float
    pub PerformedDate : String, //date
    pub PlannedQty : String, //float
    pub DiaryId : String, //int
    pub Created : String, //date
    pub TimeId : String, //int
    pub RowType : String, //string
    pub RowFormat : String, //string
    pub Id : String, //int
    pub Comment : String, //string
    pub ItemUnitId : String, //int
    pub CreatedId : String, //string
    pub Amount : String, //float
    pub ReturnDate : String, //date
    pub RowStatus : String, //string
    pub Invoiced : String, //bool
    pub PriceUnit : String, //float
    pub Changed : String, //date
    pub ChangedId : String, //string
    pub PerformedUserId : String, //int
    pub WorkOrderId : String, //int
    pub AccountNo : String, //string
    pub CostUnit : String, //float
    pub DeliveryDate : String, //date
    pub Title : String, //string
}

impl TableTrait for AdditionalWorkOrderRowStore { fn name() -> &'static str { "AdditionalWorkOrderRowStore" } }/*
Ext.define("MEM.model.AdditionalWorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct AdditionalWorkOrderStatusStore {
    pub ChangedId : String, //string
    pub Created : String, //date
    pub Changed : String, //date
    pub StatusCode : String, //int
    pub StatusName : String, //string
    pub Id : String, //int
    pub StatusColor : String, //string
    pub CreatedId : String, //string
    pub Disabled : String, //boolean
}

impl TableTrait for AdditionalWorkOrderStatusStore { fn name() -> &'static str { "AdditionalWorkOrderStatusStore" } }/*
Ext.define("MEM.model.AdditionalWorkOrder", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      {
        name: "WorkOrderNo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      { name: "Addition", type: "bool", meType: "meBool" },
      { name: "Name", type: "string", meType: "meMediumText", max: 50 },
      { name: "WorkDescription", type: "string", meType: "meLongText" },
      { name: "WorkFeedback", type: "string", meType: "meMediumText" },
      {
        name: "WorkplaceAddress",
        type: "string",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "GpsX",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "GpsY",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "District",
        type: "string",
        meType: "meMediumText",
        persist: !1,
        max: 50,
      },
      {
        name: "ResponsibleServiceId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      {
        name: "ResponsibleForemanId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      { name: "CreditRisk", type: "boolean" },
      { name: "CustomerId", type: "int", meType: "meMediumText", useNull: !0 },
      { name: "CustomerName", type: "string" },
      {
        name: "CustomerAgentId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      { name: "ContactName", type: "string", max: 50, persist: !1 },
      {
        name: "CustomerRefNo",
        type: "string",
        meType: "meMediumText",
        persist: !1,
        max: 50,
      },
      {
        name: "WorkOrderStatusId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "ProductionStart",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "ProductionEnd",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "ProductionStartClock",
        type: "date",
        meType: "meTime",
        persist: !1,
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "ProductionEndClock",
        type: "date",
        meType: "meTime",
        persist: !1,
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "OrderDate",
        type: "date",
        meType: "medate",
        dateFormat: "Y-m-d",
      },
      {
        name: "ReportSign",
        type: "string",
        meType: "meShortText",
        persist: !1,
        max: 50,
      },
      {
        name: "ReportTimestamp",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
      },
      {
        name: "Invoiced",
        type: "bool",
        meType: "meBool",
        persist: !1,
        defaultValue: !1,
      },
      {
        name: "InvoiceDate",
        type: "date",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "InvoiceId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        persist: !1,
      },
      {
        name: "CachedWorkCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        persist: !1,
        readOnly: !0,
      },
      {
        name: "CachedWorkRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        persist: !1,
        readOnly: !0,
      },
      { name: "AdditionStatusId", type: "int", meType: "meMediumText" },
      {
        name: "AdditionStatusCode",
        type: "int",
        sortable: !0,
        persist: !1,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyAdditionalWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("AdditionStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "AdditionStatus",
        type: "string",
        sortable: !0,
        persist: !1,
        sortType: "asString",
        convert: function (d, b) {
          var c = Ext.getStore("MyAdditionalWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("AdditionStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusName");
          }
          return "";
        },
      },
      {
        name: "ConstructionTypeId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      {
        name: "BudgetLevelId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "MarkupModelId",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "OrderAmount",
        type: "float",
        meType: "meMoney",
        persist: !1,
        useNull: !0,
      },
      { name: "FixedPrice", type: "bool", meType: "meBool", defaultValue: !0 },
      {
        name: "CostProjectId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "MarkUpTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "TenderTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "BookedCostTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "BookedHoursTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      { name: "PriceTypeId", type: "int", meType: "meMediumText", useNull: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct AdditionalWorkOrderStore {
    pub ReportSign : String, //string
    pub Disabled : String, //boolean
    pub ProjectId : String, //int
    pub Name : String, //string
    pub WorkplaceAddress : String, //string
    pub GpsX : String, //int
    pub District : String, //string
    pub CustomerName : String, //string
    pub ReportTimestamp : String, //string
    pub AdditionStatusCode : String, //int
    pub BudgetLevelId : String, //int
    pub TenderTotal : String, //float
    pub GpsY : String, //int
    pub ProductionEnd : String, //date
    pub CachedWorkRevenue : String, //float
    pub OrderDate : String, //date
    pub FixedPrice : String, //bool
    pub BookedHoursTotal : String, //float
    pub WorkDescription : String, //string
    pub Created : String, //date
    pub MarkUpTotal : String, //float
    pub Changed : String, //date
    pub Addition : String, //bool
    pub WorkFeedback : String, //string
    pub AdditionStatus : String, //string
    pub InvoiceDate : String, //date
    pub Id : String, //int
    pub WorkOrderStatusId : String, //int
    pub ResponsibleServiceId : String, //int
    pub CachedWorkCost : String, //float
    pub CreditRisk : String, //boolean
    pub AdditionStatusId : String, //int
    pub ConstructionTypeId : String, //int
    pub Invoiced : String, //bool
    pub MarkupModelId : String, //int
    pub OrderAmount : String, //float
    pub ProductionEndClock : String, //date
    pub ContactName : String, //string
    pub CustomerAgentId : String, //int
    pub CreatedId : String, //string
    pub BookedCostTotal : String, //float
    pub CustomerId : String, //int
    pub ProductionStartClock : String, //date
    pub PriceTypeId : String, //int
    pub ResponsibleForemanId : String, //int
    pub WorkOrderNo : String, //int
    pub ChangedId : String, //string
    pub CustomerRefNo : String, //string
    pub CostProjectId : String, //int
    pub ProductionStart : String, //date
    pub InvoiceId : String, //int
}

impl TableTrait for AdditionalWorkOrderStore { fn name() -> &'static str { "AdditionalWorkOrderStore" } }/*
Ext.define("MEM.model.ArticleCustomer", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore");
          var b;
          b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return a.get("Description") + " (" + b.get("Description") + ")";
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "CustomerId", type: "int" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ArticleCustomerStore {
    pub AccountNo : String, //string
    pub CreatedId : String, //string
    pub Payoff : String, //bool
    pub ChangedId : String, //string
    pub ItemUnitId : String, //int
    pub Chargeable : String, //bool
    pub Created : String, //date
    pub Changed : String, //date
    pub Description : String, //string
    pub Disabled : String, //boolean
    pub ArticleNo : String, //string
    pub FullDescription : String, //string
    pub Id : String, //int
    pub CustomerId : String, //int
}

impl TableTrait for ArticleCustomerStore { fn name() -> &'static str { "ArticleCustomerStore" } }/*
Ext.define("MEM.model.ArticleCategory", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ArticleCategoryStore {
    pub CreatedId : String, //string
    pub Changed : String, //date
    pub Id : String, //int
    pub Name : String, //string
    pub Disabled : String, //boolean
    pub Created : String, //date
    pub ChangedId : String, //string
}

impl TableTrait for ArticleCategoryStore { fn name() -> &'static str { "ArticleCategoryStore" } }/*
Ext.define("MEM.model.WorkOrderRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "RowType", type: "string", max: 1, defaultValue: "" },
      { name: "ArticleId", type: "int" },
      { name: "BasePriceUsed", type: "bool" },
      { name: "CostUnitPricelist", type: "string", max: 50, defaultValue: "" },
      { name: "PriceUnitPricelist", type: "string", max: 50, defaultValue: "" },
      {
        name: "PayoffUnitPricelist",
        type: "string",
        max: 50,
        defaultValue: "",
      },
      { name: "CodeNo", type: "string", max: 10, defaultValue: "" },
      { name: "Title", type: "string", max: 128000, defaultValue: "" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "PlannedQty", type: "float" },
      { name: "Days", type: "float" },
      { name: "StartQty", type: "float" },
      { name: "EndQty", type: "float" },
      { name: "UsedQty", type: "float" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "Amount", type: "float", defaultValue: 1 },
      { name: "DeliveryDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "ReturnDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "PerformedDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "PerformedUserId", type: "int", useNull: !0 },
      { name: "Comment", type: "string", defaultValue: "" },
      { name: "RowFormat", type: "string", max: 3 },
      { name: "RowStatus", type: "string", max: 1 },
      { name: "DiaryId", type: "int" },
      { name: "TimeId", type: "int", useNull: !0 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
      { name: "Invoiced", type: "bool", defaultValue: !1, persist: !1 },
      { name: "IsPaidOff", type: "bool", defaultValue: !1, persist: !1 },
      { name: "ParentIsReadOnly", type: "bool", defaultValue: !1, persist: !1 },
      {
        name: "Locked",
        type: "bool",
        convert: function (b, a) {
          return (
            a.get("Invoiced") || a.get("IsPaidOff") || a.get("ParentIsReadOnly")
          );
        },
      },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ResourceId", type: "int", useNull: !0 },
      { name: "FactoryPricelistId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      {
        name: "PlannedQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "PlannedQty");
        },
      },
      {
        name: "Days_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Days");
        },
      },
      {
        name: "UsedQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "UsedQty");
        },
      },
      { name: "KPIValue", type: "float", allowNull: !0, persist: !1 },
      {
        name: "KPIValue_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "KPIValue", 1, this);
        },
      },
      { name: "RelatedWorkOrderRowId", type: "int" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderRowStore {
    pub ArticleId : String, //int
    pub IsPaidOff : String, //bool
    pub ResourceId : String, //int
    pub Days_fmt : String, //string
    pub KPIValue_fmt : String, //string
    pub RelatedWorkOrderRowId : String, //int
    pub Invoiced : String, //bool
    pub EndQty : String, //float
    pub BasePriceUsed : String, //bool
    pub PayoffUnitPricelist : String, //string
    pub Amount : String, //float
    pub CreatedId : String, //string
    pub PerformedDate : String, //date
    pub PriceUnitPricelist : String, //string
    pub RowStatus : String, //string
    pub ArticleCategoryId : String, //int
    pub PlannedQty_fmt : String, //string
    pub UsedQty_fmt : String, //string
    pub DeliveryDate : String, //date
    pub Changed : String, //date
    pub PriceUnit : String, //float
    pub ChangedId : String, //string
    pub AccountNo : String, //string
    pub CostUnitPricelist : String, //string
    pub WorkOrderId : String, //int
    pub DiaryId : String, //int
    pub Locked : String, //bool
    pub Disabled : String, //boolean
    pub CodeNo : String, //string
    pub Comment : String, //string
    pub Payoff : String, //bool
    pub TimeId : String, //int
    pub PlannedQty : String, //float
    pub PerformedUserId : String, //int
    pub Chargeable : String, //bool
    pub ParentIsReadOnly : String, //bool
    pub FactoryPricelistId : String, //int
    pub KPIValue : String, //float
    pub ItemUnitId : String, //int
    pub UsedQty : String, //float
    pub ReturnDate : String, //date
    pub RowFormat : String, //string
    pub StartQty : String, //float
    pub CreditProjectId : String, //int
    pub Days : String, //float
    pub RowType : String, //string
    pub CostUnit : String, //float
    pub Title : String, //string
    pub Created : String, //date
    pub Id : String, //int
}

impl TableTrait for WorkOrderRowStore { fn name() -> &'static str { "WorkOrderRowStore" } }/*
Ext.define("MEM.model.Article", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").getById(a.get("ItemUnitId"));
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      { name: "WorkOrderProjectId", type: "int", useNull: !0 },
      { name: "HasKPIRelation", type: "bool", defaultValue: !1 },
      { name: "IsKPIRecord", type: "bool", defaultValue: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ArticleStore {
    pub ArticleNo : String, //string
    pub AccountNo : String, //string
    pub CreditProjectId : String, //int
    pub Payoff : String, //bool
    pub WorkOrderProjectId : String, //int
    pub PriceUnit : String, //float
    pub IsKPIRecord : String, //bool
    pub Changed : String, //date
    pub CostUnit : String, //float
    pub Id : String, //int
    pub CreatedId : String, //string
    pub ArticleCategoryId : String, //int
    pub WorkOrderId : String, //int
    pub Created : String, //date
    pub ChangedId : String, //string
    pub Description : String, //string
    pub FullDescription : String, //string
    pub Chargeable : String, //bool
    pub HasKPIRelation : String, //bool
    pub ItemUnitId : String, //int
    pub Disabled : String, //boolean
}

impl TableTrait for ArticleStore { fn name() -> &'static str { "ArticleStore" } }/*
Ext.define("MEM.model.ChecklistDiary", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "DiaryId", type: "int", meType: "meMediumText" },
      {
        name: "ItemNo",
        type: "string",
        meType: "meShortText",
        max: 50,
        useNull: !0,
      },
      {
        name: "ItemDescription",
        type: "string",
        meType: "meLongText",
        max: 255,
      },
      { name: "Checked", type: "bool", meType: "meBool" },
      {
        name: "CheckDate",
        type: "date",
        meType: "meDate",
        readOnly: !0,
        dateFormat: "Y-m-d",
      },
      {
        name: "CheckedById",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CheckNote",
        type: "string",
        meType: "meLongText",
        max: 255,
        convert: function (a, b) {
          if (null == a) {
            return "";
          } else {
            return a;
          }
        },
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ChecklistDiaryStore {
    pub CheckedById : String, //int
    pub Checked : String, //bool
    pub Created : String, //date
    pub CheckDate : String, //date
    pub DiaryId : String, //int
    pub CheckNote : String, //string
    pub Disabled : String, //boolean
    pub Changed : String, //date
    pub Id : String, //int
    pub CreatedId : String, //string
    pub ChangedId : String, //string
    pub ItemNo : String, //string
    pub ItemDescription : String, //string
}

impl TableTrait for ChecklistDiaryStore { fn name() -> &'static str { "ChecklistDiaryStore" } }/*
Ext.define("MEM.model.ChecklistRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int", meType: "meMediumText" },
      {
        name: "ItemNo",
        type: "string",
        meType: "meShortText",
        max: 50,
        useNull: !0,
      },
      {
        name: "ItemDescription",
        type: "string",
        meType: "meLongText",
        max: 255,
      },
      { name: "Checked", type: "bool", meType: "meBool" },
      {
        name: "CheckDate",
        type: "date",
        meType: "meDate",
        readOnly: !0,
        dateFormat: "Y-m-d",
      },
      {
        name: "CheckedById",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CheckNote",
        type: "string",
        meType: "meLongText",
        max: 255,
        convert: function (a, b) {
          if (null == a) {
            return "";
          } else {
            return a;
          }
        },
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ChecklistRowStore {
    pub CreatedId : String, //string
    pub ItemNo : String, //string
    pub Checked : String, //bool
    pub Created : String, //date
    pub CheckedById : String, //int
    pub Changed : String, //date
    pub Id : String, //int
    pub ItemDescription : String, //string
    pub CheckDate : String, //date
    pub CheckNote : String, //string
    pub WorkOrderId : String, //int
    pub ChangedId : String, //string
    pub Disabled : String, //boolean
}

impl TableTrait for ChecklistRowStore { fn name() -> &'static str { "ChecklistRowStore" } }/*
Ext.define("MEM.model.ConstructionType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ConstructionTypeStore {
    pub TypeName : String, //string
    pub Disabled : String, //boolean
    pub ChangedId : String, //string
    pub Id : String, //int
    pub Created : String, //date
    pub CreatedId : String, //string
    pub Changed : String, //date
}

impl TableTrait for ConstructionTypeStore { fn name() -> &'static str { "ConstructionTypeStore" } }/*
Ext.define("MEM.model.Cost", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "VerificationNo", type: "string", max: 50 },
      { name: "TransactionNote", type: "string", max: 255 },
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            if (a.get("Addition")) {
              return AWOpad(a.get("WorkOrderNo"), 3);
            } else {
              return a.get("WorkOrderNo");
            }
          }
          return "";
        },
      },
      {
        name: "WorkOrderName",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            return a.get("Name");
          }
          return "";
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "Invoiceable", type: "bool" },
      { name: "LedgerDate", type: "date" },
      {
        name: "InvoiceAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      {
        name: "CustomerPrice",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      { name: "MarkupAmount", type: "float" },
      { name: "CustomerNo", type: "string", max: 50, useNull: !0 },
      { name: "RevenueTransaction", type: "bool" },
      { name: "Invoiced", type: "bool" },
      { name: "InvoiceId", type: "int", useNull: !0 },
      { name: "TransactionType", type: "string", max: 1 },
      { name: "ExtInvoiceNo", type: "string", max: 20, useNull: !0 },
      { name: "IsScanned", type: "bool" },
      {
        name: "ScannedUrl",
        type: "string",
        max: 255,
        useNull: !0,
        convert: function (b, a) {
          return a.getScannedUrl();
        },
      },
      { name: "SupplierInvoiceId", type: "int", allowNull: !0 },
      { name: "ApprovedByProduction", type: "bool" },
      { name: "Locked", type: "bool" },
      { name: "ExtVerificationId", type: "string", max: 50, useNull: !0 },
      { name: "Notes", type: "string", max: 255, useNull: !0 },
      { name: "Mark1", type: "string", max: 255, useNull: !0 },
      { name: "Mark2", type: "string", max: 255, useNull: !0 },
      {
        name: "VatAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CostStore {
    pub ChangedId : String, //string
    pub SupplierInvoiceId : String, //int
    pub Invoiced : String, //bool
    pub Mark1 : String, //string
    pub RevenueTransaction : String, //bool
    pub TransactionNote : String, //string
    pub CreatedId : String, //string
    pub ProjectId : String, //int
    pub CustomerPrice : String, //float
    pub Created : String, //date
    pub AccountNo : String, //string
    pub ScannedUrl : String, //string
    pub WorkOrderName : String, //int
    pub ApprovedByProduction : String, //bool
    pub ExtInvoiceNo : String, //string
    pub LedgerDate : String, //date
    pub CustomerNo : String, //string
    pub WorkOrderNo : String, //int
    pub Disabled : String, //boolean
    pub Changed : String, //date
    pub VerificationNo : String, //string
    pub Invoiceable : String, //bool
    pub Mark2 : String, //string
    pub VatAmount : String, //float
    pub IsScanned : String, //bool
    pub ExtVerificationId : String, //string
    pub Notes : String, //string
    pub WorkOrderId : String, //int
    pub InvoiceId : String, //int
    pub Id : String, //int
    pub TransactionType : String, //string
    pub MarkupAmount : String, //float
    pub Locked : String, //bool
    pub InvoiceAmount : String, //float
}

impl TableTrait for CostStore { fn name() -> &'static str { "CostStore" } }/*
Ext.define("MEM.model.Currency", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CurrencyCode", type: "string", max: 3 },
      { name: "Currency", type: "string", max: 50 },
      { name: "Xrate", type: "float" },
      { name: "Base", type: "boolean" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CurrencyStore {
    pub ChangedId : String, //string
    pub Disabled : String, //boolean
    pub CurrencyCode : String, //string
    pub Created : String, //date
    pub Currency : String, //string
    pub Xrate : String, //float
    pub Id : String, //int
    pub Base : String, //boolean
    pub CreatedId : String, //string
    pub Changed : String, //date
}

impl TableTrait for CurrencyStore { fn name() -> &'static str { "CurrencyStore" } }/*
Ext.define("MEM.model.CustomerContact", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Email", type: "string", max: 50 },
      { name: "OrganizationNo", type: "string", max: 12 },
      { name: "CustomerRef", type: "string", max: 50 },
      { name: "DefaultExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "isSelected", type: "bool", persist: !1, defaultValue: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CustomerContactStore {
    pub Mobile : String, //string
    pub Email : String, //string
    pub CustomerRef : String, //string
    pub isSelected : String, //bool
    pub ContactName : String, //string
    pub CustomerId : String, //int
    pub Id : String, //int
    pub OrganizationNo : String, //string
    pub CreatedId : String, //string
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub ChangedId : String, //string
    pub Phone : String, //string
    pub DefaultExternalWorkOrderStatusId : String, //int
    pub Created : String, //date
}

impl TableTrait for CustomerContactStore { fn name() -> &'static str { "CustomerContactStore" } }/*
Ext.define("MEM.model.CustomerList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "CreditRisk", type: "boolean" },
      {
        name: "CustomerId",
        type: "int",
        persist: !1,
        convert: function (b, a) {
          return a.get("Id");
        },
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CustomerListStore {
    pub CreditRisk : String, //boolean
    pub CreatedId : String, //string
    pub Id : String, //int
    pub Changed : String, //date
    pub ChangedId : String, //string
    pub CustomerNo : String, //string
    pub Created : String, //date
    pub CustomerId : String, //int
    pub CustomerName : String, //string
    pub Disabled : String, //boolean
}

impl TableTrait for CustomerListStore { fn name() -> &'static str { "CustomerListStore" } }/*
Ext.define("MEM.model.CustomerPricelistItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int", meType: "meMediumText", useNull: !0 },
      {
        name: "ProfessionItemId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      { name: "PriceUnit", type: "float", meType: "meMoney" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CustomerPricelistItemStore {
    pub Created : String, //date
    pub PriceUnit : String, //float
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub CustomerId : String, //int
    pub Id : String, //int
    pub ChangedId : String, //string
    pub ProfessionItemId : String, //int
    pub Disabled : String, //boolean
}

impl TableTrait for CustomerPricelistItemStore { fn name() -> &'static str { "CustomerPricelistItemStore" } }/*
Ext.define("MEM.model.Customer", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "OrganizationNo", type: "string", max: 15 },
      { name: "BillAddress1", type: "string", max: 50 },
      { name: "BillAddress2", type: "string", max: 50 },
      { name: "BillAddress3", type: "string", max: 50 },
      { name: "BillAddress4", type: "string", max: 50 },
      { name: "BillAddress5", type: "string", max: 50 },
      { name: "BillAddress6", type: "string", max: 50 },
      { name: "Email", type: "string", max: 255 },
      { name: "WebAddress", type: "string", max: 255 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Fax", type: "string", max: 30 },
      { name: "EdiAddress", type: "string", max: 255 },
      { name: "CustomerNote", type: "string" },
      { name: "CustomerName2", type: "string", max: 50 },
      { name: "OrganizationNo2", type: "string", max: 15 },
      { name: "ConstructionCompany", type: "boolean" },
      { name: "SupplierNo", type: "string", max: 50 },
      { name: "CustomerTypeId", type: "int" },
      { name: "CurrencyId", type: "int" },
      { name: "PaymentTermsCode", type: "string", max: 10 },
      { name: "Iban", type: "string", max: 34 },
      { name: "SwiftBic", type: "string", max: 11 },
      { name: "BankName", type: "string", max: 50 },
      { name: "BankAccountNo", type: "string", max: 50 },
      { name: "ClearingNo", type: "string", max: 4 },
      { name: "EanCode", type: "string", max: 50 },
      { name: "VatNo", type: "string", max: 20 },
      { name: "CountryCode", type: "string", max: 2 },
      { name: "PropertyName", type: "string", max: 50 },
      { name: "HousingCooperativeOrgNo", type: "string", max: 15 },
      { name: "ApartmentNo", type: "string", max: 10 },
      { name: "InfoNoteId", type: "int", useNull: !0, persist: !1 },
      { name: "CreditRisk", type: "boolean" },
      { name: "DefaultExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "HasFavorites", type: "boolean" },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CustomerStore {
    pub Fax : String, //string
    pub ClearingNo : String, //string
    pub BillAddress6 : String, //string
    pub CustomerTypeId : String, //int
    pub PropertyName : String, //string
    pub CustomerName : String, //string
    pub Email : String, //string
    pub DefaultExternalWorkOrderStatusId : String, //int
    pub CustomerNo : String, //string
    pub Mobile : String, //string
    pub BankName : String, //string
    pub ApartmentNo : String, //string
    pub BillAddress1 : String, //string
    pub Created : String, //date
    pub CurrencyId : String, //int
    pub BillAddress2 : String, //string
    pub CustomerNote : String, //string
    pub Phone : String, //string
    pub BillAddress3 : String, //string
    pub ConstructionCompany : String, //boolean
    pub PaymentTermsCode : String, //string
    pub VatNo : String, //string
    pub CountryCode : String, //string
    pub FrameworkContractId : String, //int
    pub SwiftBic : String, //string
    pub HousingCooperativeOrgNo : String, //string
    pub Changed : String, //date
    pub OrganizationNo : String, //string
    pub OrganizationNo2 : String, //string
    pub BankAccountNo : String, //string
    pub Disabled : String, //boolean
    pub CreatedId : String, //string
    pub InfoNoteId : String, //int
    pub CreditRisk : String, //boolean
    pub ChangedId : String, //string
    pub HasFavorites : String, //boolean
    pub EanCode : String, //string
    pub BillAddress5 : String, //string
    pub EdiAddress : String, //string
    pub Iban : String, //string
    pub SupplierNo : String, //string
    pub Id : String, //int
    pub WebAddress : String, //string
    pub CustomerName2 : String, //string
    pub BillAddress4 : String, //string
}

impl TableTrait for CustomerStore { fn name() -> &'static str { "CustomerStore" } }/*
Ext.define("MEM.model.CustomerType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CustomerTypeStore {
    pub Disabled : String, //boolean
    pub CreatedId : String, //string
    pub Changed : String, //date
    pub Id : String, //int
    pub Created : String, //date
    pub ChangedId : String, //string
    pub TypeName : String, //string
}

impl TableTrait for CustomerTypeStore { fn name() -> &'static str { "CustomerTypeStore" } }/*
Ext.define("MEM.model.Diary", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "RegDate", type: "string", meType: "meDate" },
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      { name: "CurrentWork", type: "string", meType: "meMediumText" },
      { name: "FinishedWork", type: "string", meType: "meMediumText" },
      { name: "WorkProblems", type: "string", meType: "meMediumText" },
      { name: "ChangeAdditionNotes", type: "string", meType: "meMediumText" },
      {
        name: "Time1",
        type: "date",
        meType: "meTimeStamp",
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "Time1Display",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
        convert: function (b, a) {
          return a.timeDisplay(b, a, "Time1");
        },
      },
      { name: "Temperature1", type: "float", meType: "meQty" },
      { name: "Precipitation1", type: "string", meType: "meMediumText" },
      {
        name: "Time2",
        type: "date",
        meType: "meTimeStamp",
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "Time2Display",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
        convert: function (b, a) {
          return a.timeDisplay(b, a, "Time2");
        },
      },
      { name: "Temperature2", type: "float", meType: "meQty" },
      { name: "Precipitation2", type: "string", meType: "meMediumText" },
      { name: "WorkforceCount", type: "int", meType: "meInt" },
      { name: "WorkforceNotes", type: "string", meType: "meMediumText" },
      { name: "HasStaffLog", type: "boolean" },
      { name: "UserId", type: "int", useNull: !0 },
      { name: "KPIName", type: "string" },
      { name: "MaterialTemp1", type: "float", meType: "meQty", useNull: !0 },
      { name: "MaterialTemp2", type: "float", meType: "meQty", useNull: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct DiaryStore {
    pub Created : String, //date
    pub Temperature2 : String, //float
    pub MaterialTemp2 : String, //float
    pub MaterialTemp1 : String, //float
    pub ChangedId : String, //string
    pub FinishedWork : String, //string
    pub Disabled : String, //boolean
    pub Time1 : String, //date
    pub CurrentWork : String, //string
    pub Time2Display : String, //string
    pub WorkProblems : String, //string
    pub Precipitation2 : String, //string
    pub WorkforceCount : String, //int
    pub UserId : String, //int
    pub KPIName : String, //string
    pub Temperature1 : String, //float
    pub CreatedId : String, //string
    pub Time1Display : String, //string
    pub Precipitation1 : String, //string
    pub Time2 : String, //date
    pub HasStaffLog : String, //boolean
    pub Id : String, //int
    pub ChangeAdditionNotes : String, //string
    pub RegDate : String, //string
    pub Changed : String, //date
    pub ProjectId : String, //int
    pub WorkforceNotes : String, //string
}

impl TableTrait for DiaryStore { fn name() -> &'static str { "DiaryStore" } }/*
Ext.define("MEM.model.ExternalWorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "IsDefaultStatus", type: "bool", defaultValue: !1 },
      { name: "IsSignatureStatus", type: "bool", defaultValue: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ExternalWorkOrderStatusStore {
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub IsDefaultStatus : String, //bool
    pub Id : String, //int
    pub StatusName : String, //string
    pub Changed : String, //date
    pub ChangedId : String, //string
    pub CreatedId : String, //string
    pub StatusCode : String, //int
    pub StatusColor : String, //string
    pub IsSignatureStatus : String, //bool
}

impl TableTrait for ExternalWorkOrderStatusStore { fn name() -> &'static str { "ExternalWorkOrderStatusStore" } }/*
Ext.define("MEM.model.FactoryPricelist", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct FactoryPricelistStore {
    pub Id : String, //int
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub Name : String, //string
    pub CreatedId : String, //string
    pub ChangedId : String, //string
    pub Created : String, //date
}

impl TableTrait for FactoryPricelistStore { fn name() -> &'static str { "FactoryPricelistStore" } }/*
Ext.define("MEM.model.FactoryArticleItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FactoryPricelistId", type: "int" },
      { name: "ArticleId", type: "int", useNull: !0 },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").findRecord(
            "Id",
            a.get("ItemUnitId")
          );
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct FactoryArticleItemStore {
    pub FullDescription : String, //string
    pub ArticleId : String, //int
    pub PriceUnit : String, //float
    pub Description : String, //string
    pub CreatedId : String, //string
    pub ArticleNo : String, //string
    pub CostUnit : String, //float
    pub Disabled : String, //boolean
    pub Changed : String, //date
    pub ChangedId : String, //string
    pub Created : String, //date
    pub Id : String, //int
    pub ItemUnitId : String, //int
    pub AccountNo : String, //string
    pub FactoryPricelistId : String, //int
}

impl TableTrait for FactoryArticleItemStore { fn name() -> &'static str { "FactoryArticleItemStore" } }/*
Ext.define("MEM.model.FrameworkContract", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string", max: 50 },
      { name: "CustomerId", type: "int" },
      { name: "LimitArticles", type: "bool" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct FrameworkContractStore {
    pub CreatedId : String, //string
    pub ChangedId : String, //string
    pub Created : String, //date
    pub Id : String, //int
    pub Name : String, //string
    pub Disabled : String, //boolean
    pub Changed : String, //date
    pub LimitArticles : String, //bool
    pub CustomerId : String, //int
}

impl TableTrait for FrameworkContractStore { fn name() -> &'static str { "FrameworkContractStore" } }/*
Ext.define("MEM.model.FrameworkArticleItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FrameworkContractId", type: "int" },
      { name: "ArticleId", type: "int", useNull: !0 },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").getById(a.get("ItemUnitId"));
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct FrameworkArticleItemStore {
    pub ArticleId : String, //int
    pub ItemUnitId : String, //int
    pub Id : String, //int
    pub PriceUnit : String, //float
    pub Chargeable : String, //bool
    pub Changed : String, //date
    pub AccountNo : String, //string
    pub ChangedId : String, //string
    pub CostUnit : String, //float
    pub Payoff : String, //bool
    pub ArticleNo : String, //string
    pub FrameworkContractId : String, //int
    pub CreatedId : String, //string
    pub Created : String, //date
    pub ArticleCategoryId : String, //int
    pub FullDescription : String, //string
    pub Disabled : String, //boolean
    pub Description : String, //string
    pub CreditProjectId : String, //int
}

impl TableTrait for FrameworkArticleItemStore { fn name() -> &'static str { "FrameworkArticleItemStore" } }/*
Ext.define("MEM.model.FormValidation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StoreName", type: "string", max: 50 },
      { name: "FieldName", type: "string", max: 50 },
      { name: "AllowBlank", type: "boolean" },
      { name: "ValidationType", type: "string", max: 50 },
      { name: "RegEx", type: "string", max: 1000 },
      { name: "Hidden", type: "boolean" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct FormValidationStore {
    pub ValidationType : String, //string
    pub RegEx : String, //string
    pub Hidden : String, //boolean
    pub FieldName : String, //string
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub StoreName : String, //string
    pub ChangedId : String, //string
    pub Id : String, //int
    pub Created : String, //date
    pub CreatedId : String, //string
    pub AllowBlank : String, //boolean
}

impl TableTrait for FormValidationStore { fn name() -> &'static str { "FormValidationStore" } }/*
Ext.define("MEM.model.Group", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "GroupName", type: "string", max: 50 }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct GroupStore {
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub Disabled : String, //boolean
    pub GroupName : String, //string
    pub Id : String, //int
    pub ChangedId : String, //string
    pub Created : String, //date
}

impl TableTrait for GroupStore { fn name() -> &'static str { "GroupStore" } }/*
Ext.define("MEM.model.HourlyRate", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProfessionItemId", type: "int" },
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionDescription", type: "string", max: 50 },
      { name: "PriceUnit", type: "float" },
      { name: "UnitName", type: "string", max: 50 },
      { name: "CustomerPrice", type: "float" },
      { name: "ProjectPrice", type: "float" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct HourlyRateStore {
    pub Created : String, //date
    pub ChangedId : String, //string
    pub CreatedId : String, //string
    pub PriceUnit : String, //float
    pub Disabled : String, //boolean
    pub ProfessionCode : String, //string
    pub UnitName : String, //string
    pub ProjectPrice : String, //float
    pub Changed : String, //date
    pub ProfessionItemId : String, //int
    pub CustomerPrice : String, //float
    pub Id : String, //int
    pub ProfessionDescription : String, //string
}

impl TableTrait for HourlyRateStore { fn name() -> &'static str { "HourlyRateStore" } }/*
Ext.define("MEM.model.InfoMessage", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Date",
        type: "string",
        convert: function (b, a) {
          return Ext.Date.format(a.get("Created"), "Y-m-d");
        },
      },
      { name: "Message", type: "string" },
      { name: "ShowInMobile", type: "bool" },
      { name: "GroupId", type: "int" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct InfoMessageStore {
    pub Created : String, //date
    pub CreatedId : String, //string
    pub Changed : String, //date
    pub ChangedId : String, //string
    pub Date : String, //string
    pub GroupId : String, //int
    pub ShowInMobile : String, //bool
    pub Disabled : String, //boolean
    pub Message : String, //string
    pub Id : String, //int
}

impl TableTrait for InfoMessageStore { fn name() -> &'static str { "InfoMessageStore" } }/*
Ext.define("MEM.model.InfoNote", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "TableName", type: "string", max: 50 },
      { name: "TableId", type: "int" },
      { name: "UserId", type: "int" },
      { name: "Note", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct InfoNoteStore {
    pub TableId : String, //int
    pub Disabled : String, //boolean
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub UserId : String, //int
    pub Id : String, //int
    pub Created : String, //date
    pub TableName : String, //string
    pub ChangedId : String, //string
    pub Note : String, //string
}

impl TableTrait for InfoNoteStore { fn name() -> &'static str { "InfoNoteStore" } }/*
Ext.define("MEM.model.InvoiceRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "InvoiceId", type: "int" },
      { name: "RowNo", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      { name: "Unit", type: "string", max: 5 },
      { name: "Amount", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "Markup", type: "int" },
      {
        name: "TotalPrice",
        type: "float",
        persist: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("Amount") * a.get("PriceUnit");
        },
      },
      { name: "RowFormat", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct InvoiceRowStore {
    pub Markup : String, //int
    pub Id : String, //int
    pub TotalPrice : String, //float
    pub Unit : String, //string
    pub CodeNo : String, //string
    pub RowType : String, //string
    pub InvoiceId : String, //int
    pub Description : String, //string
    pub Amount : String, //int
    pub RowNo : String, //int
    pub ChangedId : String, //string
    pub Changed : String, //date
    pub Created : String, //date
    pub RowFormat : String, //string
    pub Disabled : String, //boolean
    pub PriceUnit : String, //float
    pub CreatedId : String, //string
}

impl TableTrait for InvoiceRowStore { fn name() -> &'static str { "InvoiceRowStore" } }/*
Ext.define("MEM.model.Invoice", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "InvoiceId", type: "int" },
      { name: "RowNo", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      { name: "Unit", type: "string", max: 5 },
      { name: "Amount", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "Markup", type: "int" },
      {
        name: "TotalPrice",
        type: "float",
        persist: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("Amount") * a.get("PriceUnit");
        },
      },
      { name: "RowFormat", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct InvoiceStore {
    pub CreatedId : String, //string
    pub Disabled : String, //boolean
    pub RowNo : String, //int
    pub PriceUnit : String, //float
    pub Unit : String, //string
    pub Markup : String, //int
    pub RowFormat : String, //string
    pub InvoiceId : String, //int
    pub Description : String, //string
    pub Amount : String, //int
    pub Changed : String, //date
    pub ChangedId : String, //string
    pub CodeNo : String, //string
    pub Created : String, //date
    pub TotalPrice : String, //float
    pub Id : String, //int
    pub RowType : String, //string
}

impl TableTrait for InvoiceStore { fn name() -> &'static str { "InvoiceStore" } }/*
Ext.define("MEM.model.ItemUnit", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UnitName", type: "string", max: 10 },
      { name: "Description", type: "string", max: 10 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ItemUnitStore {
    pub Id : String, //int
    pub Disabled : String, //boolean
    pub ChangedId : String, //string
    pub Created : String, //date
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub Description : String, //string
    pub UnitName : String, //string
}

impl TableTrait for ItemUnitStore { fn name() -> &'static str { "ItemUnitStore" } }/*
Ext.define("MEM.model.MainMenu", {
  extend: Ext.data.Model,
  config: {
    fields: [
      { name: "MenuText" },
      { name: "ShortMenuText" },
      { name: "View" },
      { name: "Store" },
      { name: "Active" },
      { name: "Picto" },
      { name: "Title" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct MainMenuStore {
    pub ChangedId : String, //string
    pub Id : String, //int
    pub Created : String, //date
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub CreatedId : String, //string
}

impl TableTrait for MainMenuStore { fn name() -> &'static str { "MainMenuStore" } }/*
Ext.define("MEM.model.MarkupModelItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "MarkupModelId", type: "int" },
      { name: "ResourceAccount", type: "string", max: 5 },
      { name: "Description", type: "string", max: 50 },
      { name: "MarkupCF", type: "int" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct MarkupModelItemStore {
    pub MarkupCF : String, //int
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub Id : String, //int
    pub MarkupModelId : String, //int
    pub ResourceAccount : String, //string
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub Description : String, //string
    pub ChangedId : String, //string
}

impl TableTrait for MarkupModelItemStore { fn name() -> &'static str { "MarkupModelItemStore" } }/*
Ext.define("MEM.model.MarkupModel", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string", max: 50 },
      { name: "Code", type: "string", max: 10 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct MarkupModelStore {
    pub ChangedId : String, //string
    pub CreatedId : String, //string
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub Code : String, //string
    pub Id : String, //int
    pub Name : String, //string
    pub Created : String, //date
}

impl TableTrait for MarkupModelStore { fn name() -> &'static str { "MarkupModelStore" } }/*
Ext.define("MEM.model.Time", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "FullName", type: "string", max: 100 },
      { name: "ProjectId", type: "int" },
      { name: "AbsenceProjectId", type: "int", useNull: !0 },
      {
        name: "Absence",
        type: "bool",
        convert: function (c, b) {
          var a = MEM.app.getController("Common");
          return b.get("ProjectId") != a.absenceProjectId() ? 0 : 1;
        },
      },
      {
        name: "ProjectName",
        type: "string",
        max: 255,
        sortable: !0,
        convert: function (b, c) {
          if (b) {
            return b;
          } else {
            var d = Ext.getStore("MyCloneProjectListAllStore"),
              a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
            if (a) {
              return a.get("ProjectName");
            } else {
              return "";
            }
          }
        },
      },
      {
        name: "ProjectNo",
        type: "string",
        max: 20,
        sortable: !0,
        sortType: "asInt",
        convert: function (b, c) {
          if (b) {
            return b;
          } else {
            var d = Ext.getStore("MyCloneProjectListAllStore"),
              a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
            if (a) {
              return a.get("ProjectNo");
            } else {
              return "";
            }
          }
        },
      },
      {
        name: "Project",
        type: "string",
        max: 255,
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneProjectListAllStore"),
            a;
          a = c.findRecord("Id", b.get("ProjectId"), 0, !1, !0, !0);
          if (a) {
            return a.get("ProjectNo") + ", " + a.get("ProjectName");
          }
        },
      },
      {
        name: "ProjectStatus",
        type: "string",
        max: 255,
        convert: function (e, c) {
          var d = Ext.getStore("MyCloneProjectListAllStore"),
            b = Ext.getStore("MyProjectStatusStore"),
            a;
          a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
          if (a) {
            b = b.findRecord("Id", a.get("ProjectStatusId"), 0, !1, !0, !0);
            return b.get("StatusCode");
          } else {
            return null;
          }
        },
      },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (b, c) {
          var a = Ext.getStore("MyWorkOrderListStore").findRecord(
            "Id",
            c.get("WorkOrderId"),
            0,
            !1,
            !0,
            !0
          );
          if (a && a.get("Addition")) {
            return AWOpad(b, 3);
          }
          return b;
        },
      },
      { name: "WOAWONo", type: "string", max: 10, sortable: !0 },
      { name: "WorkOrderName", type: "string", max: 255, sortable: !0 },
      { name: "RegDate", type: "string", max: 10, sortType: "asDate" },
      { name: "Debit", type: "boolean", defaultValue: !0 },
      { name: "ProfessionItemId", type: "int" },
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionAccountNo", type: "string", max: 5 },
      { name: "Unit", type: "string", max: 5 },
      {
        name: "Hours",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "BreakTime",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "StartTime",
        useNull: !0,
        type: "date",
        dateFormat: "Y-m-d H:i:s",
        convert: function (b, h) {
          var f,
            d = new Date(h.get("RegDate")),
            c,
            e = getSetting("Time.Timestamp.Interval"),
            g = e ? parseInt(e) : 15;
          if (typeof b == "string") {
            var a = b.split(/[-:T]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct TimeStore {
    pub WOAWONo : String, //string
    pub Project : String, //string
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub RegDate : String, //string
    pub Hours : String, //float
    pub Changed : String, //date
    pub Debit : String, //boolean
    pub ProjectStatus : String, //string
    pub Id : String, //int
    pub ProfessionItemId : String, //int
    pub BreakTime : String, //float
    pub Absence : String, //bool
    pub ProjectNo : String, //string
    pub ProjectName : String, //string
    pub ProfessionAccountNo : String, //string
    pub AbsenceProjectId : String, //int
    pub ProjectId : String, //int
    pub WorkOrderId : String, //int
    pub ChangedId : String, //string
    pub WorkOrderName : String, //string
    pub ProfessionCode : String, //string
    pub UserId : String, //int
    pub Unit : String, //string
    pub FullName : String, //string
    pub CreatedId : String, //string
    pub WorkOrderNo : String, //int
}

impl TableTrait for TimeStore { fn name() -> &'static str { "TimeStore" } }/*
Ext.define("MEM.model.OptionValue", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "SettingKey", type: "string", max: 50 },
      { name: "SettingValue", type: "string" },
      { name: "SettingDescription", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct OptionValueStore {
    pub CreatedId : String, //string
    pub ChangedId : String, //string
    pub SettingDescription : String, //string
    pub Id : String, //int
    pub SettingKey : String, //string
    pub SettingValue : String, //string
    pub Created : String, //date
    pub Changed : String, //date
    pub Disabled : String, //boolean
}

impl TableTrait for OptionValueStore { fn name() -> &'static str { "OptionValueStore" } }/*
Ext.define("MEM.model.OfficeCompany", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CompanyName", type: "string" },
      { name: "AbsenceProjectId", type: "int" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct OfficeCompanyStore {
    pub CompanyName : String, //string
    pub Disabled : String, //boolean
    pub Id : String, //int
    pub AbsenceProjectId : String, //int
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub Created : String, //date
    pub ChangedId : String, //string
}

impl TableTrait for OfficeCompanyStore { fn name() -> &'static str { "OfficeCompanyStore" } }/*
Ext.define("MEM.model.Phrase", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Phrase",
        type: "string",
        meType: "meMediumText",
        display: T("Phrasetext"),
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct PhraseStore {
    pub Disabled : String, //boolean
    pub Phrase : String, //string
    pub Created : String, //date
    pub ChangedId : String, //string
    pub CreatedId : String, //string
    pub Id : String, //int
    pub Changed : String, //date
}

impl TableTrait for PhraseStore { fn name() -> &'static str { "PhraseStore" } }/*
Ext.define("MEM.model.PriceType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct PriceTypeStore {
    pub Created : String, //date
    pub CreatedId : String, //string
    pub ChangedId : String, //string
    pub Disabled : String, //boolean
    pub TypeName : String, //string
    pub Id : String, //int
    pub Changed : String, //date
}

impl TableTrait for PriceTypeStore { fn name() -> &'static str { "PriceTypeStore" } }/*
Ext.define("MEM.model.ProfessionItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionDescription", type: "string", max: 50 },
      { name: "ItemUnitId", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "SalaryNo", type: "string", max: 10 },
      { name: "CostUnit", type: "float" },
      { name: "ProfessionGroup", type: "string", max: 50 },
      { name: "Chargeable", type: "bool" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProfessionItemStore {
    pub SalaryNo : String, //string
    pub ItemUnitId : String, //int
    pub Created : String, //date
    pub CostUnit : String, //float
    pub Id : String, //int
    pub Changed : String, //date
    pub ProfessionDescription : String, //string
    pub ProfessionGroup : String, //string
    pub AccountNo : String, //string
    pub ChangedId : String, //string
    pub CreatedId : String, //string
    pub Disabled : String, //boolean
    pub ProfessionCode : String, //string
    pub PriceUnit : String, //float
    pub Chargeable : String, //bool
}

impl TableTrait for ProfessionItemStore { fn name() -> &'static str { "ProfessionItemStore" } }/*
Ext.define("MEM.model.WorkOrderDocument", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderId", type: "int", meType: "meMediumText" },
      { name: "DiaryId", type: "int", meType: "meMediumText" },
      { name: "DocumentDescription", type: "string", meType: "meLongText" },
      { name: "Url", type: "string", meType: "meMediumText", max: 255 },
      { name: "Title", type: "string", meType: "meMediumText", max: 255 },
      { name: "Filename", type: "string", meType: "meMediumText", max: 255 },
      {
        name: "DocumentMimeType",
        type: "string",
        meType: "meMediumText",
        max: 255,
      },
      { name: "DocumentSize", type: "int", meType: "meMediumText" },
      { name: "DocumentData", type: "string" },
      {
        name: "ThumbnailMimeType",
        type: "string",
        meType: "meMediumText",
        max: 255,
      },
      { name: "ThumbnailData", type: "string", meType: "meLongText" },
      { name: "ImageWidth", type: "int", meType: "meInt" },
      { name: "ImageHeight", type: "int", meType: "meInt" },
      { name: "HideInPDA", type: "bool", persist: !1 },
      { name: "EnlargeInReports", type: "bool" },
      { name: "IncludeInReport", type: "bool" },
      { name: "ShowInPortal", type: "bool" },
      { name: "RegDate", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderDocumentStore {
    pub DocumentMimeType : String, //string
    pub Filename : String, //string
    pub ChangedId : String, //string
    pub Changed : String, //date
    pub WorkOrderId : String, //int
    pub Disabled : String, //boolean
    pub DocumentDescription : String, //string
    pub DocumentSize : String, //int
    pub Created : String, //date
    pub Id : String, //int
    pub ImageWidth : String, //int
    pub IncludeInReport : String, //bool
    pub ProjectId : String, //int
    pub Title : String, //string
    pub ThumbnailMimeType : String, //string
    pub DiaryId : String, //int
    pub ThumbnailData : String, //string
    pub DocumentData : String, //string
    pub Url : String, //string
    pub ImageHeight : String, //int
    pub HideInPDA : String, //bool
    pub CreatedId : String, //string
    pub EnlargeInReports : String, //bool
    pub ShowInPortal : String, //bool
    pub RegDate : String, //string
}

impl TableTrait for WorkOrderDocumentStore { fn name() -> &'static str { "WorkOrderDocumentStore" } }/*
Ext.define("MEM.model.ProjectEconomyBudget", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "BudgetCost", type: "float" },
      { name: "BudgetRevenue", type: "float" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectEconomyBudgetStore {
    pub Id : String, //int
    pub Changed : String, //date
    pub ProjectId : String, //int
    pub CreatedId : String, //string
    pub ChangedId : String, //string
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub BudgetCost : String, //float
    pub BudgetRevenue : String, //float
}

impl TableTrait for ProjectEconomyBudgetStore { fn name() -> &'static str { "ProjectEconomyBudgetStore" } }/*
Ext.define("MEM.model.ProjectEconomy", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "LineType", type: "int" },
      { name: "Cost", type: "float" },
      { name: "Revenue", type: "float" },
      { name: "ContributionMargin", type: "float" },
      { name: "ContributionMarginPercent", type: "float" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectEconomyStore {
    pub Id : String, //int
    pub Created : String, //date
    pub ProjectId : String, //int
    pub CreatedId : String, //string
    pub Revenue : String, //float
    pub ContributionMarginPercent : String, //float
    pub ContributionMargin : String, //float
    pub Cost : String, //float
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub LineType : String, //int
    pub ChangedId : String, //string
}

impl TableTrait for ProjectEconomyStore { fn name() -> &'static str { "ProjectEconomyStore" } }/*
Ext.define("MEM.model.ProjectList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusId", type: "int" },
      {
        name: "ProjectStatus",
        type: "string",
        sortable: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyProjectStatusStore"),
            a;
          a = c.findRecord("Id", b.get("ProjectStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusName");
          }
          return "";
        },
      },
      { name: "CustomerId", type: "int" },
      { name: "WorkplaceId", type: "string" },
      { name: "StatusCode", type: "string", sortType: "asInt" },
      { name: "ProjectName", type: "string" },
      { name: "ProjectNo", type: "string", sortType: "asInt" },
      {
        name: "Project",
        type: "string",
        convert: function (b, a) {
          return a.data.ProjectNo + ", " + a.data.ProjectName;
        },
      },
      { name: "SecReadOnly", type: "bool", persist: !1 },
      { name: "Piecework", type: "bool", persist: !1 },
      { name: "KPIRuleId", type: "int", useNull: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectListStore {
    pub ChangedId : String, //string
    pub Created : String, //date
    pub CreatedId : String, //string
    pub WorkplaceId : String, //string
    pub ProjectName : String, //string
    pub Changed : String, //date
    pub SecReadOnly : String, //bool
    pub ProjectNo : String, //string
    pub ProjectStatusId : String, //int
    pub StatusCode : String, //string
    pub Project : String, //string
    pub Piecework : String, //bool
    pub Disabled : String, //boolean
    pub ProjectStatus : String, //string
    pub KPIRuleId : String, //int
    pub Id : String, //int
    pub CustomerId : String, //int
}

impl TableTrait for ProjectListStore { fn name() -> &'static str { "ProjectListStore" } }/*
Ext.define("MEM.model.UserList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FullName", type: "string" },
      { name: "Signature", type: "string" },
      { name: "EmployeeNo", type: "string" },
      { name: "PersonalNo", type: "string" },
      { name: "ProfessionCode", type: "string" },
      { name: "ProfessionItemId", type: "int" },
      { name: "OrganizationalProjectId", type: "int" },
      { name: "PartnerSupplier", type: "bool" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserListStore {
    pub Id : String, //int
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub EmployeeNo : String, //string
    pub CreatedId : String, //string
    pub ProfessionCode : String, //string
    pub ProfessionItemId : String, //int
    pub FullName : String, //string
    pub OrganizationalProjectId : String, //int
    pub ChangedId : String, //string
    pub Changed : String, //date
    pub Signature : String, //string
    pub PersonalNo : String, //string
    pub PartnerSupplier : String, //bool
}

impl TableTrait for UserListStore { fn name() -> &'static str { "UserListStore" } }/*
Ext.define("MEM.model.ProjectOverview", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "ProjectId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectNo",
        type: "string",
        meType: "meShortText",
        max: 10,
        readOnly: !0,
      },
      {
        name: "ProjectName",
        type: "string",
        meType: "meMediumText",
        max: 50,
        readOnly: !0,
      },
      {
        name: "TagField1Id",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "TagField2Id",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectManagerId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectStart",
        type: "date",
        meType: "meDate",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectEnd",
        type: "date",
        meType: "meDate",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CustomerId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectStatusId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "BudgetRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "BookedCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BookedRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "BudgetRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "ContributionMarginAmount",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginPercent",
        type: "int",
        meType: "mePercent",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetHours",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BookedHours",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkOrderCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkOrderRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginWO",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "SLPCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "SLPRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginAmountSLP",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginPercentSLP",
        type: "int",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkCostWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("WorkCost") * Me.Moms;
        },
      },
      {
        name: "MaterialCost",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "MaterialCost",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("MaterialCost") * Me.Moms;
        },
      },
      {
        name: "EarnedRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "EarnedRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "EarnedRevenueNotInvoiced",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "EarnedRevenueNotInvoicedWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenueNotInvoiced") * Me.Moms;
        },
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectOverviewStore {
    pub Disabled : String, //boolean
    pub ProjectName : String, //string
    pub ProjectId : String, //int
    pub Id : String, //int
    pub SLPCost : String, //float
    pub EarnedRevenueNotInvoicedWithTax : String, //float
    pub WorkCostWithTax : String, //float
    pub BookedRevenue : String, //float
    pub CustomerId : String, //int
    pub BookedCost : String, //float
    pub WorkCost : String, //float
    pub Changed : String, //date
    pub ContributionMarginPercentSLP : String, //int
    pub ContributionMarginPercent : String, //int
    pub EarnedRevenue : String, //float
    pub BudgetRevenueWithTax : String, //float
    pub ProjectStart : String, //date
    pub ProjectManagerId : String, //int
    pub ProjectEnd : String, //date
    pub ContributionMarginAmount : String, //float
    pub WorkOrderRevenue : String, //float
    pub ContributionMarginWO : String, //float
    pub BudgetRevenue : String, //float
    pub ProjectStatusId : String, //int
    pub Created : String, //date
    pub ContributionMarginAmountSLP : String, //float
    pub CreatedId : String, //string
    pub MaterialCost : String, //float
    pub BookedHours : String, //int
    pub WorkOrderCost : String, //float
    pub EarnedRevenueWithTax : String, //float
    pub EarnedRevenueNotInvoiced : String, //float
    pub BudgetHours : String, //int
    pub ChangedId : String, //string
    pub BudgetCost : String, //float
    pub TagField2Id : String, //int
    pub TagField1Id : String, //int
    pub SLPRevenue : String, //float
    pub ProjectNo : String, //string
}

impl TableTrait for ProjectOverviewStore { fn name() -> &'static str { "ProjectOverviewStore" } }/*
Ext.define("MEM.model.ProjectPricelistItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText", useNull: !0 },
      {
        name: "ProfessionItemId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      { name: "PriceUnit", type: "float", meType: "meMoney" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectPricelistItemStore {
    pub ChangedId : String, //string
    pub ProjectId : String, //int
    pub ProfessionItemId : String, //int
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub Id : String, //int
    pub PriceUnit : String, //float
    pub Changed : String, //date
    pub CreatedId : String, //string
}

impl TableTrait for ProjectPricelistItemStore { fn name() -> &'static str { "ProjectPricelistItemStore" } }/*
Ext.define("MEM.model.ProjectPricelist", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ServiceCarPriceDay", type: "float" },
      { name: "ServiceCarPriceKm", type: "float" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectPricelistStore {
    pub ServiceCarPriceDay : String, //float
    pub ChangedId : String, //string
    pub Disabled : String, //boolean
    pub Id : String, //int
    pub CreatedId : String, //string
    pub ServiceCarPriceKm : String, //float
    pub ProjectId : String, //int
    pub Created : String, //date
    pub Changed : String, //date
}

impl TableTrait for ProjectPricelistStore { fn name() -> &'static str { "ProjectPricelistStore" } }/*
Ext.define("MEM.model.ProjectStatusHistory", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusHistoryId", type: "int" },
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "FullName", type: "string", max: 50 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectStatusHistoryStore {
    pub StatusCode : String, //int
    pub FullName : String, //string
    pub Id : String, //int
    pub ChangedId : String, //string
    pub CreatedId : String, //string
    pub ProjectId : String, //int
    pub Changed : String, //date
    pub ProjectStatusHistoryId : String, //int
    pub StatusName : String, //string
    pub Created : String, //date
    pub StatusColor : String, //string
    pub Disabled : String, //boolean
}

impl TableTrait for ProjectStatusHistoryStore { fn name() -> &'static str { "ProjectStatusHistoryStore" } }/*
Ext.define("MEM.model.Project", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ParentProjectId", type: "int", allowBlank: !1, useNull: !0 },
      { name: "ProjectNo", type: "int", persist: !1, sortType: "asInt" },
      { name: "ProjectStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50, allowBlank: !1 },
      { name: "PriceTypeId", type: "int" },
      { name: "ProjectTypeId", type: "int" },
      { name: "ProjectManagerId", type: "int" },
      { name: "WorkLeaderId", type: "int" },
      { name: "TagField1Id", type: "int", useNull: !0 },
      { name: "TagField2Id", type: "int", useNull: !0 },
      { name: "ProjectNote", type: "string", useNull: !0 },
      { name: "CustomerId", type: "int", useNull: !0 },
      { name: "CustomerName", type: "string" },
      { name: "CreditRisk", type: "boolean" },
      { name: "ContactName", type: "string" },
      { name: "CustomerAgentId", type: "int", useNull: !0 },
      { name: "CustomerRef", type: "string", max: 50 },
      { name: "ProjectStart", type: "date", dateFormat: "Y-m-d" },
      { name: "ProjectEnd", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "MarkupModelId", type: "int", allowBlank: !1 },
      { name: "WorkplaceAddress1", type: "string", max: 50 },
      { name: "WorkplaceAddress2", type: "string", max: 50 },
      { name: "WorkplaceZipcode", type: "string", max: 50 },
      { name: "WorkplaceCity", type: "string", max: 50 },
      { name: "WorkplaceDistance", type: "int" },
      { name: "FinalInspectionDate", type: "date", dateFormat: "Y-m-d" },
      { name: "GuaranteeTime", type: "int" },
      { name: "GuaranteeInspectionDate", type: "date", dateFormat: "Y-m-d" },
      { name: "WOFavorite", type: "boolean", persist: !1 },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectStore {
    pub FinalInspectionDate : String, //date
    pub CustomerId : String, //int
    pub GuaranteeTime : String, //int
    pub GuaranteeInspectionDate : String, //date
    pub ProjectNo : String, //int
    pub FrameworkContractId : String, //int
    pub Id : String, //int
    pub Disabled : String, //boolean
    pub ProjectManagerId : String, //int
    pub CustomerRef : String, //string
    pub Changed : String, //date
    pub TagField1Id : String, //int
    pub WorkplaceDistance : String, //int
    pub CustomerAgentId : String, //int
    pub ProjectTypeId : String, //int
    pub ProjectNote : String, //string
    pub WorkplaceAddress1 : String, //string
    pub PriceTypeId : String, //int
    pub WOFavorite : String, //boolean
    pub CreatedId : String, //string
    pub ContactName : String, //string
    pub WorkplaceCity : String, //string
    pub ProjectName : String, //string
    pub CreditRisk : String, //boolean
    pub MarkupModelId : String, //int
    pub ProjectEnd : String, //date
    pub WorkplaceAddress2 : String, //string
    pub CustomerName : String, //string
    pub ProjectStart : String, //date
    pub Created : String, //date
    pub WorkLeaderId : String, //int
    pub WorkplaceZipcode : String, //string
    pub TagField2Id : String, //int
    pub ParentProjectId : String, //int
    pub ChangedId : String, //string
    pub ProjectStatusId : String, //int
}

impl TableTrait for ProjectStore { fn name() -> &'static str { "ProjectStore" } }/*
Ext.define("MEM.model.ProjectTree", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusId", type: "int" },
      { name: "ProjectName", type: "string" },
      { name: "ProjectNo", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectTreeStore {
    pub Id : String, //int
    pub ChangedId : String, //string
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub ProjectNo : String, //string
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub ProjectStatusId : String, //int
    pub ProjectName : String, //string
}

impl TableTrait for ProjectTreeStore { fn name() -> &'static str { "ProjectTreeStore" } }/*
Ext.define("MEM.model.ProjectType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectTypeStore {
    pub Id : String, //int
    pub Changed : String, //date
    pub TypeName : String, //string
    pub ChangedId : String, //string
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub CreatedId : String, //string
}

impl TableTrait for ProjectTypeStore { fn name() -> &'static str { "ProjectTypeStore" } }/*
Ext.define("MEM.model.Resource", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ResourceNo", type: "string", max: 20 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (b, a) {
          return a.get("ResourceNo") + " " + a.get("Description");
        },
      },
      { name: "CreditProjectId", type: "int" },
      { name: "CreditProjectNo", type: "string" },
      { name: "CreditProjectName", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ResourceStore {
    pub CreditProjectNo : String, //string
    pub Id : String, //int
    pub CreatedId : String, //string
    pub Description : String, //string
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub Created : String, //date
    pub ResourceNo : String, //string
    pub ChangedId : String, //string
    pub CreditProjectId : String, //int
    pub CreditProjectName : String, //string
    pub FullDescription : String, //string
}

impl TableTrait for ResourceStore { fn name() -> &'static str { "ResourceStore" } }/*
Ext.define("MEM.model.Revenue", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "VerificationNo", type: "string", max: 50, readOnly: !0 },
      { name: "TransactionNote", type: "string", max: 255 },
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            if (a.get("Addition")) {
              return AWOpad(a.get("WorkOrderNo"), 3);
            } else {
              return a.get("WorkOrderNo");
            }
          }
          return "";
        },
      },
      {
        name: "WorkOrderName",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            return a.get("Name");
          }
          return "";
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "Invoiceable", type: "bool" },
      { name: "LedgerDate", type: "date" },
      {
        name: "InvoiceAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      {
        name: "CustomerPrice",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      { name: "MarkupAmount", type: "float" },
      { name: "CustomerNo", type: "string", max: 50, useNull: !0 },
      { name: "RevenueTransaction", type: "bool" },
      { name: "Invoiced", type: "bool" },
      { name: "InvoiceId", type: "int", useNull: !0 },
      { name: "TransactionType", type: "string", max: 1 },
      { name: "ExtInvoiceNo", type: "string", max: 20, useNull: !0 },
      { name: "IsScanned", type: "bool" },
      {
        name: "ScannedUrl",
        type: "string",
        max: 255,
        useNull: !0,
        convert: function (b, a) {
          return a.getScannedUrl();
        },
      },
      { name: "SupplierInvoiceId", type: "int", allowNull: !0 },
      { name: "ApprovedByProduction", type: "bool" },
      { name: "Locked", type: "bool" },
      { name: "ExtVerificationId", type: "string", max: 50, useNull: !0 },
      { name: "Notes", type: "string", max: 255, useNull: !0 },
      { name: "Mark1", type: "string", max: 255, useNull: !0 },
      { name: "Mark2", type: "string", max: 255, useNull: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct RevenueStore {
    pub Locked : String, //bool
    pub CustomerNo : String, //string
    pub ExtInvoiceNo : String, //string
    pub WorkOrderNo : String, //int
    pub TransactionType : String, //string
    pub ApprovedByProduction : String, //bool
    pub Mark1 : String, //string
    pub ProjectId : String, //int
    pub LedgerDate : String, //date
    pub ChangedId : String, //string
    pub Notes : String, //string
    pub Changed : String, //date
    pub Invoiced : String, //bool
    pub IsScanned : String, //bool
    pub MarkupAmount : String, //float
    pub Id : String, //int
    pub CreatedId : String, //string
    pub ExtVerificationId : String, //string
    pub WorkOrderId : String, //int
    pub Disabled : String, //boolean
    pub Invoiceable : String, //bool
    pub Mark2 : String, //string
    pub InvoiceAmount : String, //float
    pub ScannedUrl : String, //string
    pub TransactionNote : String, //string
    pub VerificationNo : String, //string
    pub WorkOrderName : String, //int
    pub Created : String, //date
    pub InvoiceId : String, //int
    pub RevenueTransaction : String, //bool
    pub AccountNo : String, //string
    pub SupplierInvoiceId : String, //int
    pub CustomerPrice : String, //float
}

impl TableTrait for RevenueStore { fn name() -> &'static str { "RevenueStore" } }/*
Ext.define("MEM.model.Setting", {
  extend: Ext.data.Model,
  config: { fields: [{ name: "Name" }, { name: "Value" }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct SettingStore {
    pub ChangedId : String, //string
    pub Created : String, //date
    pub CreatedId : String, //string
    pub Id : String, //int
    pub Changed : String, //date
    pub Disabled : String, //boolean
}

impl TableTrait for SettingStore { fn name() -> &'static str { "SettingStore" } }/*
Ext.define("MEM.model.ServiceCategory", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ServiceCategoryStore {
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub ChangedId : String, //string
    pub Disabled : String, //boolean
    pub Name : String, //string
    pub Id : String, //int
    pub Created : String, //date
}

impl TableTrait for ServiceCategoryStore { fn name() -> &'static str { "ServiceCategoryStore" } }/*
Ext.define("MEM.model.StaffList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "DiaryId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "CustomerName", type: "string" },
      { name: "FullName", type: "string" },
      { name: "IdNo", type: "string" },
      { name: "Origin", type: "string", useNull: !0 },
      { name: "OriginId", type: "int" },
      { name: "isEmployee", type: "bool" },
      { name: "LogId", type: "int" },
      { name: "CheckedIn", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedInTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedIn");
        },
      },
      { name: "CheckedOut", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedOutTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedOut");
        },
      },
      {
        name: "Present",
        type: "string",
        convert: function (b, a) {
          if (a.data.CheckedIn == null || a.data.CheckedOut != null) {
            return "red";
          } else {
            return "green";
          }
        },
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct StaffListStore {
    pub FullName : String, //string
    pub CustomerName : String, //string
    pub isEmployee : String, //bool
    pub Disabled : String, //boolean
    pub CheckedOut : String, //date
    pub CheckedOutTime : String, //string
    pub Id : String, //int
    pub ChangedId : String, //string
    pub Origin : String, //string
    pub CustomerId : String, //int
    pub LogId : String, //int
    pub CheckedIn : String, //date
    pub Created : String, //date
    pub CreatedId : String, //string
    pub ProjectId : String, //int
    pub IdNo : String, //string
    pub CheckedInTime : String, //string
    pub DiaryId : String, //int
    pub Present : String, //string
    pub OriginId : String, //int
    pub Changed : String, //date
}

impl TableTrait for StaffListStore { fn name() -> &'static str { "StaffListStore" } }/*
Ext.define("MEM.model.StatusHistory", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusHistoryId", type: "int" },
      { name: "StatusName", type: "string", max: 50 },
      { name: "FullName", type: "string", max: 50 },
      { name: "Changed", type: "data" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct StatusHistoryStore {
    pub StatusName : String, //string
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub ProjectStatusHistoryId : String, //int
    pub FullName : String, //string
    pub ChangedId : String, //string
    pub Id : String, //int
    pub Changed : String, //data
    pub CreatedId : String, //string
}

impl TableTrait for StatusHistoryStore { fn name() -> &'static str { "StatusHistoryStore" } }/*
Ext.define("MEM.model.Tag", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "TagName", type: "string", max: 50 },
      { name: "TagValue", type: "string", max: 50 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct TagStore {
    pub TagName : String, //string
    pub Id : String, //int
    pub Created : String, //date
    pub Changed : String, //date
    pub TagValue : String, //string
    pub ChangedId : String, //string
    pub Disabled : String, //boolean
    pub CreatedId : String, //string
}

impl TableTrait for TagStore { fn name() -> &'static str { "TagStore" } }/*
Ext.define("MEM.model.UserPoolWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "ProjectNo", type: "string", max: 50 },
      {
        name: "Project",
        type: "string",
        max: 100,
        convert: function (b, a) {
          return a.get("ProjectNo") + ", " + a.get("ProjectName");
        },
      },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "ProductionStart",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "ProductionEnd",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      { name: "HaveDocument", type: "bool", defaultValue: !1 },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "ProductionStartDateDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartDateDisplay(b, a);
        },
      },
      {
        name: "ProductionStartWeekDay",
        type: "string",
        convert: function (b, a) {
          return Ext.String.capitalize(a.convertProductionStartWeekDay(b, a));
        },
      },
      {
        name: "ProductionStartTimeDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartTimeDisplay(b, a);
        },
      },
      { name: "CustomerName", type: "string", max: 50 },
      { name: "CustomerFavoritePriceList", type: "boolean", persist: !1 },
      { name: "CustomerFavoriteArticlePrice", type: "boolean", persist: !1 },
      { name: "ProjectFavorite", type: "boolean", persist: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserPoolWorkOrderListStore {
    pub CreatedId : String, //string
    pub Created : String, //date
    pub CustomerFavoritePriceList : String, //boolean
    pub Id : String, //int
    pub ProductionStartDateDisplay : String, //string
    pub ProductionStartWeekDay : String, //string
    pub Disabled : String, //boolean
    pub ProductionStart : String, //date
    pub ResponsibleForemanId : String, //int
    pub WorkOrderStatusId : String, //int
    pub WorkOrderStatusCode : String, //int
    pub Addition : String, //bool
    pub WorkOrderId : String, //int
    pub ProjectFavorite : String, //boolean
    pub ChangedId : String, //string
    pub ProductionEnd : String, //date
    pub ProjectName : String, //string
    pub ProjectId : String, //int
    pub ProjectStatusCode : String, //int
    pub Project : String, //string
    pub Changed : String, //date
    pub CustomerName : String, //string
    pub ProjectNo : String, //string
    pub ResponsibleServiceId : String, //int
    pub WorkOrderNo : String, //int
    pub Name : String, //string
    pub HaveDocument : String, //bool
    pub CustomerFavoriteArticlePrice : String, //boolean
    pub ProductionStartTimeDisplay : String, //string
}

impl TableTrait for UserPoolWorkOrderListStore { fn name() -> &'static str { "UserPoolWorkOrderListStore" } }/*
Ext.define("MEM.model.UserWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "ProjectNo", type: "string", max: 50 },
      {
        name: "Project",
        type: "string",
        max: 100,
        convert: function (b, a) {
          return a.get("ProjectNo") + ", " + a.get("ProjectName");
        },
      },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "ProductionStart",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "ProductionStartDateDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartDateDisplay(b, a);
        },
      },
      {
        name: "ProductionStartWeekDay",
        type: "string",
        convert: function (b, a) {
          return Ext.String.capitalize(a.convertProductionStartWeekDay(b, a));
        },
      },
      {
        name: "ProductionStartTimeDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartTimeDisplay(b, a);
        },
      },
      {
        name: "ProductionEnd",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
      { name: "HaveDocument", type: "bool", defaultValue: !1 },
      { name: "CustomerName", type: "string", max: 50 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserWorkOrderListStore {
    pub Created : String, //date
    pub ProductionStartDateDisplay : String, //string
    pub WorkOrderNo : String, //int
    pub Changed : String, //date
    pub HaveDocument : String, //bool
    pub ProjectName : String, //string
    pub ProductionEnd : String, //date
    pub WorkOrderStatusId : String, //int
    pub Name : String, //string
    pub CreatedId : String, //string
    pub ProjectId : String, //int
    pub WorkOrderStatusCode : String, //int
    pub ProjectStatusCode : String, //int
    pub Id : String, //int
    pub Project : String, //string
    pub ProductionStart : String, //date
    pub WorkOrderId : String, //int
    pub FullName : String, //string
    pub ResponsibleForemanId : String, //int
    pub Disabled : String, //boolean
    pub Addition : String, //bool
    pub ChangedId : String, //string
    pub ProjectNo : String, //string
    pub CustomerName : String, //string
    pub ResponsibleServiceId : String, //int
    pub ProductionStartTimeDisplay : String, //string
    pub ProductionStartWeekDay : String, //string
}

impl TableTrait for UserWorkOrderListStore { fn name() -> &'static str { "UserWorkOrderListStore" } }/*
Ext.define("MEM.model.UserProjectWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "WorkPoolId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      {
        name: "BasicScope",
        type: "bool",
        readOnly: !0,
        convert: function (b, a) {
          if (a.get("WorkOrderNo") == 1) {
            return !0;
          }
          return !1;
        },
      },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
      { name: "CustomerId", type: "int", persist: !1 },
      { name: "CustomerFavoritePriceList", type: "boolean", persist: !1 },
      { name: "CustomerFavoriteArticlePrice", type: "boolean", persist: !1 },
      { name: "ProjectFavorite", type: "boolean", persist: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserProjectWorkOrderListStore {
    pub Id : String, //int
    pub ChangedId : String, //string
    pub ResponsibleServiceId : String, //int
    pub FullName : String, //string
    pub Addition : String, //bool
    pub CustomerId : String, //int
    pub CustomerFavoriteArticlePrice : String, //boolean
    pub ProjectId : String, //int
    pub WorkOrderNo : String, //int
    pub Changed : String, //date
    pub WorkPoolId : String, //int
    pub WorkOrderStatusId : String, //int
    pub ProjectName : String, //string
    pub Created : String, //date
    pub Disabled : String, //boolean
    pub BasicScope : String, //bool
    pub Name : String, //string
    pub CustomerFavoritePriceList : String, //boolean
    pub ProjectFavorite : String, //boolean
    pub CreatedId : String, //string
}

impl TableTrait for UserProjectWorkOrderListStore { fn name() -> &'static str { "UserProjectWorkOrderListStore" } }/*
Ext.define("MEM.model.UserRight", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "ObjectRightId", type: "int" },
      { name: "ObjectRightName", type: "string", max: 50 },
      { name: "ObjectName", type: "string", max: 50 },
      { name: "WebClient", type: "bool" },
      { name: "MobileClient", type: "bool" },
      { name: "ApiClient", type: "bool" },
      { name: "AdminClient", type: "bool" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserRightStore {
    pub MobileClient : String, //bool
    pub AdminClient : String, //bool
    pub Disabled : String, //boolean
    pub Id : String, //int
    pub ObjectName : String, //string
    pub ApiClient : String, //bool
    pub Created : String, //date
    pub CreatedId : String, //string
    pub Changed : String, //date
    pub UserId : String, //int
    pub ChangedId : String, //string
    pub ObjectRightId : String, //int
    pub ObjectRightName : String, //string
    pub WebClient : String, //bool
}

impl TableTrait for UserRightStore { fn name() -> &'static str { "UserRightStore" } }/*
Ext.define("MEM.model.UserAccess", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "ObjectRightId", type: "int" },
      { name: "ObjectRightName", type: "string", max: 50 },
      { name: "ObjectName", type: "string", max: 50 },
      { name: "IsProjectRight", type: "bool" },
      { name: "AccessRight", type: "int" },
      { name: "WriteRight", type: "int" },
      { name: "ReadRight", type: "int" },
      { name: "OwnRight", type: "int" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserAccessStore {
    pub IsProjectRight : String, //bool
    pub ObjectName : String, //string
    pub UserId : String, //int
    pub CreatedId : String, //string
    pub ReadRight : String, //int
    pub OwnRight : String, //int
    pub ObjectRightName : String, //string
    pub WriteRight : String, //int
    pub AccessRight : String, //int
    pub Changed : String, //date
    pub ObjectRightId : String, //int
    pub ChangedId : String, //string
    pub Disabled : String, //boolean
    pub Created : String, //date
    pub Id : String, //int
}

impl TableTrait for UserAccessStore { fn name() -> &'static str { "UserAccessStore" } }/*
Ext.define("MEM.model.UserSession", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "SessionId", type: "string", max: 128 },
      { name: "SessionUserId", type: "int" },
      { name: "ImpersonatedUserId", type: "int" },
      { name: "Languagecode", type: "string" },
      {
        name: "FullName",
        type: "string",
        max: 50,
        convert: function (d, b) {
          var c = Ext.getStore("MyUserListStore"),
            a;
          a = c.findRecord("Id", b.get("ImpersonatedUserId"), 0, !1, !0, !0);
          if (a) {
            return a.get("FullName");
          }
          return "";
        },
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserSessionStore {
    pub SessionId : String, //string
    pub Disabled : String, //boolean
    pub Id : String, //int
    pub Created : String, //date
    pub SessionUserId : String, //int
    pub Changed : String, //date
    pub CreatedId : String, //string
    pub ImpersonatedUserId : String, //int
    pub FullName : String, //string
    pub ChangedId : String, //string
    pub Languagecode : String, //string
}

impl TableTrait for UserSessionStore { fn name() -> &'static str { "UserSessionStore" } }/*
Ext.define("MEM.model.UserSetting", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "SettingKey", type: "string", max: 50 },
      { name: "SettingValue", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserSettingStore {
    pub CreatedId : String, //string
    pub SettingValue : String, //string
    pub Id : String, //int
    pub UserId : String, //int
    pub Created : String, //date
    pub Changed : String, //date
    pub ChangedId : String, //string
    pub SettingKey : String, //string
    pub Disabled : String, //boolean
}

impl TableTrait for UserSettingStore { fn name() -> &'static str { "UserSettingStore" } }/*
Ext.define("MEM.model.Vat", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "VatPercent",
        type: "float",
        meType: "mePercent",
        useNull: !0,
        display: T("VAT factor"),
      },
      {
        name: "Description",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Description"),
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct VatStore {
    pub ChangedId : String, //string
    pub Description : String, //string
    pub Changed : String, //date
    pub Created : String, //date
    pub Id : String, //int
    pub CreatedId : String, //string
    pub Disabled : String, //boolean
    pub VatPercent : String, //float
}

impl TableTrait for VatStore { fn name() -> &'static str { "VatStore" } }/*
Ext.define("MEM.model.WorkOrderAssignedLocation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", useNull: !0 },
      { name: "WorkOrderNo", type: "int", max: 10 },
      {
        name: "WOAWONo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
        convert: function (b, a) {
          if (a.get("Addition") == 1) {
            return (
              getSetting("System.Prefix.VariationNo") +
              Ext.String.leftPad(a.get("WorkOrderNo"), 3, "0")
            );
          } else {
            return a.get("WorkOrderNo");
          }
        },
      },
      { name: "Name", type: "string", meType: "meLongText", max: 100 },
      { name: "CustomerName", type: "string", meType: "meLongText", max: 100 },
      { name: "WorkplaceAddress", type: "string", meType: "meMediumText" },
      { name: "WorkOrderStatusId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderStatusCode", type: "int", meType: "meMediumText" },
      { name: "GpsX", type: "int", meType: "meShortText", useNull: !0 },
      { name: "GpsY", type: "int", meType: "meShortText", useNull: !0 },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ProjectStatusId", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderAssignedLocationStore {
    pub GpsX : String, //int
    pub Disabled : String, //boolean
    pub ProjectStatusCode : String, //int
    pub GpsY : String, //int
    pub ResponsibleServiceId : String, //int
    pub Created : String, //date
    pub ProjectId : String, //int
    pub WorkOrderNo : String, //int
    pub WorkplaceAddress : String, //string
    pub ProjectStatusId : String, //int
    pub WOAWONo : String, //int
    pub CustomerName : String, //string
    pub Id : String, //int
    pub CreatedId : String, //string
    pub WorkOrderStatusCode : String, //int
    pub Changed : String, //date
    pub ChangedId : String, //string
    pub WorkOrderStatusId : String, //int
    pub Name : String, //string
}

impl TableTrait for WorkOrderAssignedLocationStore { fn name() -> &'static str { "WorkOrderAssignedLocationStore" } }/*
Ext.define("MEM.model.WorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "ProjectId", type: "int" },
      {
        name: "WorkOrderId",
        type: "int",
        convert: function (a, b) {
          if (a) {
            return a;
          }
          return b.get("Id");
        },
      },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "WorkPoolId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectNo", type: "string", max: 50 },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      {
        name: "BasicScope",
        type: "bool",
        readOnly: !0,
        convert: function (b, a) {
          if (a.get("WorkOrderNo") == 1) {
            return !0;
          }
          return !1;
        },
      },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderListStore {
    pub ResponsibleServiceId : String, //int
    pub CreatedId : String, //string
    pub Changed : String, //date
    pub ResponsibleForemanId : String, //int
    pub WorkOrderStatusId : String, //int
    pub ProjectNo : String, //string
    pub Disabled : String, //boolean
    pub ProjectName : String, //string
    pub WorkPoolId : String, //int
    pub ProjectId : String, //int
    pub ChangedId : String, //string
    pub WorkOrderNo : String, //int
    pub Addition : String, //bool
    pub Name : String, //string
    pub Created : String, //date
    pub Id : String, //int
    pub WorkOrderId : String, //int
    pub CustomerId : String, //int
    pub BasicScope : String, //bool
    pub FullName : String, //string
}

impl TableTrait for WorkOrderListStore { fn name() -> &'static str { "WorkOrderListStore" } }/*
Ext.define("MEM.model.WorkOrderLocation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", useNull: !0 },
      { name: "WorkOrderNo", type: "int", max: 10 },
      {
        name: "WOAWONo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
        convert: function (b, a) {
          if (a.get("Addition") == 1) {
            return (
              getSetting("System.Prefix.VariationNo") +
              Ext.String.leftPad(a.get("WorkOrderNo"), 3, "0")
            );
          } else {
            return a.get("WorkOrderNo");
          }
        },
      },
      { name: "Name", type: "string", meType: "meLongText", max: 100 },
      { name: "CustomerName", type: "string", meType: "meLongText", max: 100 },
      { name: "WorkplaceAddress", type: "string", meType: "meMediumText" },
      { name: "WorkOrderStatusId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderStatusCode", type: "int", meType: "meMediumText" },
      { name: "GpsX", type: "int", meType: "meShortText", useNull: !0 },
      { name: "GpsY", type: "int", meType: "meShortText", useNull: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderLocationStore {
    pub GpsY : String, //int
    pub Name : String, //string
    pub WorkOrderStatusId : String, //int
    pub ProjectId : String, //int
    pub Disabled : String, //boolean
    pub Created : String, //date
    pub ChangedId : String, //string
    pub WorkOrderNo : String, //int
    pub GpsX : String, //int
    pub CustomerName : String, //string
    pub WOAWONo : String, //int
    pub Changed : String, //date
    pub WorkplaceAddress : String, //string
    pub CreatedId : String, //string
    pub WorkOrderStatusCode : String, //int
    pub Id : String, //int
}

impl TableTrait for WorkOrderLocationStore { fn name() -> &'static str { "WorkOrderLocationStore" } }/*
Ext.define("MEM.model.WorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int", sortable: !0, sortType: "asInt" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "TempRec", type: "bool", persist: !1, defaultValue: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderStatusStore {
    pub Id : String, //int
    pub CreatedId : String, //string
    pub StatusName : String, //string
    pub StatusColor : String, //string
    pub TempRec : String, //bool
    pub Changed : String, //date
    pub StatusCode : String, //int
    pub Disabled : String, //boolean
    pub ChangedId : String, //string
    pub Created : String, //date
}

impl TableTrait for WorkOrderStatusStore { fn name() -> &'static str { "WorkOrderStatusStore" } }/*
Ext.define("MEM.model.WorkOrderStatusRelations", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderStatusId", type: "int", useNull: !0 },
      { name: "ExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "AllowExternal", type: "bool", defaultValue: !1 },
      { name: "RequireExternal", type: "bool", defaultValue: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderStatusRelationsStore {
    pub ChangedId : String, //string
    pub Changed : String, //date
    pub Id : String, //int
    pub WorkOrderStatusId : String, //int
    pub CreatedId : String, //string
    pub AllowExternal : String, //bool
    pub Disabled : String, //boolean
    pub RequireExternal : String, //bool
    pub Created : String, //date
    pub ExternalWorkOrderStatusId : String, //int
}

impl TableTrait for WorkOrderStatusRelationsStore { fn name() -> &'static str { "WorkOrderStatusRelationsStore" } }/*
Ext.define("MEM.model.WorkOrder", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool" },
      { name: "Name", type: "string", max: 100, defaultValue: "" },
      { name: "WorkDescription", type: "string", defaultValue: "" },
      { name: "WorkFeedback", type: "string", defaultValue: "" },
      { name: "WorkplaceAddress", type: "string", defaultValue: "" },
      { name: "GpsX", type: "int", persist: !1, useNull: !0 },
      { name: "GpsY", type: "int", persist: !1, useNull: !0 },
      { name: "District", type: "string", persist: !1, max: 50 },
      { name: "ResponsibleServiceId", type: "int", useNull: !0 },
      { name: "WorkPoolId", type: "int", useNull: !0 },
      { name: "ResponsibleForemanId", type: "int", useNull: !0 },
      { name: "CreditRisk", type: "boolean" },
      { name: "CustomerId", type: "int" },
      { name: "CustomerName", type: "string" },
      { name: "CustomerAgentId", type: "int", useNull: !0 },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerRefNo", type: "string", max: 1024, defaultValue: "" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ExternalWorkOrderStatusId", type: "int", useNull: !0 },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        persist: !1,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "ProductionStart",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        useNull: !0,
      },
      {
        name: "ProductionEnd",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        useNull: !0,
      },
      {
        name: "ProductionStartClockXX",
        type: "string",
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "ProductionEndClockXX",
        type: "string",
        dateFormat: "time",
        useNull: !0,
      },
      { name: "OrderDate", type: "date", dateFormat: "Y-m-d" },
      { name: "ReportSign", type: "string", persist: !1, max: 50 },
      { name: "ReportTimestamp", type: "string", persist: !1 },
      { name: "Invoiced", type: "bool", persist: !1, defaultValue: !1 },
      { name: "InvoiceDate", type: "date", persist: !1, useNull: !0 },
      { name: "InvoiceId", type: "int", persist: !1, useNull: !0 },
      { name: "CachedWorkCost", type: "float", persist: !1, useNull: !0 },
      { name: "CachedWorkRevenue", type: "float", persist: !1, useNull: !0 },
      { name: "AdditionStatusId", type: "int" },
      { name: "ConstructionTypeId", type: "int" },
      { name: "BudgetLevelId", type: "int", persist: !1 },
      { name: "MarkupModelId", type: "int", persist: !1 },
      { name: "OrderAmount", type: "float", persist: !1, useNull: !0 },
      { name: "FixedPrice", type: "bool", defaultValue: !0 },
      { name: "CostProjectId", type: "int" },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
      { name: "ServiceCategoryId", type: "int", useNull: !0 },
      { name: "GpsX", type: "int", useNull: !0 },
      { name: "GpsY", type: "int", useNull: !0 },
      { name: "SignOnSite", type: "bool", defaultValue: !1 },
      { name: "WorkOrderDocumentId", type: "int" },
      {
        name: "ExternalStatusName",
        type: "string",
        persist: !1,
        defaultValue: "",
      },
      { name: "ExternalStatusComment", type: "string", persist: !1 },
      { name: "UpdatePrices", type: "bool", defaultValue: !1 },
      { name: "KPIRuleId", type: "int", useNull: !0 },
      { name: "KPIName", type: "string", persist: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderStore {
    pub UpdatePrices : String, //bool
    pub KPIRuleId : String, //int
    pub OrderAmount : String, //float
    pub ContactName : String, //string
    pub KPIName : String, //string
    pub GpsX : String, //int
    pub ReportSign : String, //string
    pub GpsY : String, //int
    pub ProductionEndClockXX : String, //string
    pub Disabled : String, //boolean
    pub Created : String, //date
    pub WorkFeedback : String, //string
    pub Name : String, //string
    pub ProductionStartClockXX : String, //string
    pub WorkplaceAddress : String, //string
    pub District : String, //string
    pub Id : String, //int
    pub ReportTimestamp : String, //string
    pub ChangedId : String, //string
    pub ServiceCategoryId : String, //int
    pub WorkOrderDocumentId : String, //int
    pub InvoiceDate : String, //date
    pub InvoiceId : String, //int
    pub ExternalStatusComment : String, //string
    pub ConstructionTypeId : String, //int
    pub Changed : String, //date
    pub FrameworkContractId : String, //int
    pub Addition : String, //bool
    pub SignOnSite : String, //bool
    pub ExternalWorkOrderStatusId : String, //int
    pub WorkDescription : String, //string
    pub Invoiced : String, //bool
    pub CustomerRefNo : String, //string
    pub BudgetLevelId : String, //int
    pub WorkPoolId : String, //int
    pub AdditionStatusId : String, //int
    pub CostProjectId : String, //int
    pub ExternalStatusName : String, //string
    pub ResponsibleForemanId : String, //int
    pub CreatedId : String, //string
    pub CreditRisk : String, //boolean
    pub WorkOrderStatusId : String, //int
    pub CachedWorkRevenue : String, //float
    pub WorkOrderNo : String, //int
    pub ResponsibleServiceId : String, //int
    pub CustomerId : String, //int
    pub WorkOrderStatusCode : String, //int
    pub MarkupModelId : String, //int
    pub CustomerName : String, //string
    pub ProjectId : String, //int
    pub CustomerAgentId : String, //int
    pub CachedWorkCost : String, //float
    pub ProductionEnd : String, //date
    pub OrderDate : String, //date
    pub FixedPrice : String, //bool
    pub ProductionStart : String, //date
}

impl TableTrait for WorkOrderStore { fn name() -> &'static str { "WorkOrderStore" } }/*
Ext.define("MEM.model.StaffLog", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "Created", type: "string", dateFormat: "time" },
      { name: "CreatedId", type: "int" },
      { name: "Changed", type: "string", dateFormat: "time" },
      { name: "ChangedId", type: "int" },
      { name: "DiaryId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "IdNo", type: "string" },
      { name: "Origin", type: "string", useNull: !0 },
      { name: "OriginId", type: "int" },
      { name: "CheckedIn", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedInTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedIn");
        },
      },
      { name: "CheckedOut", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      { name: "FullName", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct StaffLogStore {
    pub Changed : String, //string
    pub DiaryId : String, //int
    pub CreatedId : String, //int
    pub CheckedInTime : String, //string
    pub ChangedId : String, //int
    pub IdNo : String, //string
    pub Id : String, //int
    pub Created : String, //string
    pub ProjectId : String, //int
    pub CheckedOut : String, //date
    pub OriginId : String, //int
    pub FullName : String, //string
    pub CheckedIn : String, //date
    pub Origin : String, //string
    pub Disabled : String, //boolean
}

impl TableTrait for StaffLogStore { fn name() -> &'static str { "StaffLogStore" } }/*
Ext.define("MEM.model.StaffPreviousDay", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "Created", type: "string", dateFormat: "time" },
      { name: "CreatedId", type: "int" },
      { name: "Changed", type: "string", dateFormat: "time" },
      { name: "ChangedId", type: "int" },
      { name: "IdNo", type: "string" },
      { name: "DiaryId", type: "int" },
      { name: "ProjectId", type: "int" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct StaffPreviousDayStore {
    pub IdNo : String, //string
    pub Disabled : String, //boolean
    pub CreatedId : String, //int
    pub Id : String, //int
    pub ChangedId : String, //int
    pub ProjectId : String, //int
    pub Created : String, //string
    pub DiaryId : String, //int
    pub Changed : String, //string
}

impl TableTrait for StaffPreviousDayStore { fn name() -> &'static str { "StaffPreviousDayStore" } }/*
Ext.define("MEM.model.Supplier", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "OrganizationNo", type: "string", max: 15 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct SupplierStore {
    pub Disabled : String, //boolean
    pub Created : String, //date
    pub CustomerName : String, //string
    pub Id : String, //int
    pub OrganizationNo : String, //string
    pub Changed : String, //date
    pub CustomerNo : String, //string
    pub CreatedId : String, //string
    pub ChangedId : String, //string
}

impl TableTrait for SupplierStore { fn name() -> &'static str { "SupplierStore" } }/*
Ext.define("MEM.model.WorkOrderContact", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "CustomerAgentId", type: "int" },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Email", type: "string", max: 50 },
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerName", type: "string", max: 50 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct WorkOrderContactStore {
    pub Disabled : String, //boolean
    pub ChangedId : String, //string
    pub Changed : String, //date
    pub CustomerAgentId : String, //int
    pub WorkOrderId : String, //int
    pub Id : String, //int
    pub Phone : String, //string
    pub Email : String, //string
    pub Mobile : String, //string
    pub ContactName : String, //string
    pub CustomerName : String, //string
    pub Created : String, //date
    pub CreatedId : String, //string
    pub CustomerId : String, //int
}

impl TableTrait for WorkOrderContactStore { fn name() -> &'static str { "WorkOrderContactStore" } }/*
Ext.define("MEM.model.User", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FullName", type: "string" },
      { name: "UserLogin", type: "string" },
      { name: "PersonalNo", type: "string" },
      { name: "Languagecode", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserStore {
    pub CreatedId : String, //string
    pub Created : String, //date
    pub ChangedId : String, //string
    pub Disabled : String, //boolean
    pub FullName : String, //string
    pub PersonalNo : String, //string
    pub Id : String, //int
    pub Languagecode : String, //string
    pub UserLogin : String, //string
    pub Changed : String, //date
}

impl TableTrait for UserStore { fn name() -> &'static str { "UserStore" } }/*
Ext.define("MEM.model.CustomerContactList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerRef", type: "string", max: 50 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CustomerContactListStore {
    pub Disabled : String, //boolean
    pub ChangedId : String, //string
    pub CustomerRef : String, //string
    pub Created : String, //date
    pub Changed : String, //date
    pub CustomerId : String, //int
    pub CreatedId : String, //string
    pub Id : String, //int
    pub ContactName : String, //string
}

impl TableTrait for CustomerContactListStore { fn name() -> &'static str { "CustomerContactListStore" } }/*
Ext.define("MEM.model.ProjectLimited", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Project",
        type: "string",
        convert: function (b, a) {
          return a.data.ProjectNo + ", " + a.data.ProjectName;
        },
      },
      {
        name: "ParentProjectId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Parent Project No"),
      },
      {
        name: "ProjectNo",
        type: "string",
        meType: "meShortText",
        max: 10,
        persist: !0,
        display: T("Project No"),
      },
      {
        name: "ProjectStatusId",
        type: "int",
        meType: "meMediumText",
        display: T("Project status") + T("Code"),
      },
      {
        name: "ProjectStatusCode",
        type: "int",
        meType: "meMediumText",
        display: T("Project status") + T("Code"),
      },
      {
        name: "ProjectName",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Project Name"),
      },
      {
        name: "PriceTypeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Pricetype") + T("Code"),
      },
      {
        name: "ProjectTypeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Project type") + T("Code"),
      },
      {
        name: "ProjectManagerId",
        type: "int",
        meType: "meMediumText",
        display: T("Project manager") + " " + T("Username"),
      },
      {
        name: "WorkLeaderId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Work leader") + " " + T("Username"),
      },
      {
        name: "TagField1Id",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Tag field 1"),
      },
      {
        name: "TagField2Id",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Tag field 2"),
      },
      {
        name: "CustomerId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Customer no"),
      },
      {
        name: "CustomerAgentId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Customer Contact"),
      },
      {
        name: "CustomerRef",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Customer ref."),
      },
      {
        name: "MarkupModelId",
        type: "int",
        meType: "meShortText",
        display: T("Markup model"),
      },
      {
        name: "CostCenterId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Costcenter"),
      },
      {
        name: "SellerId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Seller") + " " + T("Username"),
      },
      {
        name: "FrameworkContractId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Framework contract"),
        translate: T("FrameworkContract"),
      },
      {
        name: "PartnerSupplierId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Partner supplier"),
      },
      {
        name: "ProjectResourceGroupId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("ProjectResourceGroupProject"),
      },
      {
        name: "WorkplaceId",
        type: "string",
        meType: "meMediumText",
        max: 50,
        allowNull: !0,
        display: T("WorkplaceId"),
      },
      {
        name: "BasicScopeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
      },
      {
        name: "KPIRuleId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("KPI rule"),
      },
      { name: "WOFavorite", type: "boolean", persist: !1 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectLimitedStore {
    pub PriceTypeId : String, //int
    pub SellerId : String, //int
    pub CustomerId : String, //int
    pub ProjectManagerId : String, //int
    pub FrameworkContractId : String, //int
    pub WOFavorite : String, //boolean
    pub ProjectStatusCode : String, //int
    pub ProjectStatusId : String, //int
    pub ProjectName : String, //string
    pub TagField2Id : String, //int
    pub CustomerAgentId : String, //int
    pub MarkupModelId : String, //int
    pub ProjectResourceGroupId : String, //int
    pub Created : String, //date
    pub CreatedId : String, //string
    pub PartnerSupplierId : String, //int
    pub Disabled : String, //boolean
    pub Changed : String, //date
    pub CostCenterId : String, //int
    pub CustomerRef : String, //string
    pub ChangedId : String, //string
    pub ProjectTypeId : String, //int
    pub WorkplaceId : String, //string
    pub Project : String, //string
    pub ParentProjectId : String, //int
    pub TagField1Id : String, //int
    pub ProjectNo : String, //string
    pub Id : String, //int
    pub WorkLeaderId : String, //int
    pub KPIRuleId : String, //int
    pub BasicScopeId : String, //int
}

impl TableTrait for ProjectLimitedStore { fn name() -> &'static str { "ProjectLimitedStore" } }/*
Ext.define("MEM.model.ProjectStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct ProjectStatusStore {
    pub Disabled : String, //boolean
    pub Id : String, //int
    pub Created : String, //date
    pub CreatedId : String, //string
    pub ChangedId : String, //string
    pub StatusName : String, //string
    pub StatusColor : String, //string
    pub StatusCode : String, //int
    pub Changed : String, //date
}

impl TableTrait for ProjectStatusStore { fn name() -> &'static str { "ProjectStatusStore" } }/*
Ext.define("MEM.model.UserFavoriteList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "Name", type: "string" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserFavoriteListStore {
    pub Created : String, //date
    pub Name : String, //string
    pub UserId : String, //int
    pub Id : String, //int
    pub CreatedId : String, //string
    pub FavoriteListId : String, //int
    pub ChangedId : String, //string
    pub Changed : String, //date
    pub Disabled : String, //boolean
}

impl TableTrait for UserFavoriteListStore { fn name() -> &'static str { "UserFavoriteListStore" } }/*
Ext.define("MEM.model.UserFavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "UserId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct UserFavoriteArticleStore {
    pub ItemUnitId : String, //int
    pub ArticleNo : String, //string
    pub CreatedId : String, //string
    pub FullDescription : String, //string
    pub UserId : String, //int
    pub Chargeable : String, //bool
    pub Description : String, //string
    pub AccountNo : String, //string
    pub ArticleId : String, //int
    pub ChangedId : String, //string
    pub Payoff : String, //bool
    pub Created : String, //date
    pub Id : String, //int
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub FavoriteListId : String, //int
}

impl TableTrait for UserFavoriteArticleStore { fn name() -> &'static str { "UserFavoriteArticleStore" } }/*
Ext.define("MEM.model.CustomerFavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct CustomerFavoriteArticleStore {
    pub ArticleNo : String, //string
    pub FavoriteListId : String, //int
    pub AccountNo : String, //string
    pub Created : String, //date
    pub ItemUnitId : String, //int
    pub FullDescription : String, //string
    pub Disabled : String, //boolean
    pub Description : String, //string
    pub CreatedId : String, //string
    pub Chargeable : String, //bool
    pub Changed : String, //date
    pub CustomerId : String, //int
    pub Id : String, //int
    pub ChangedId : String, //string
    pub ArticleId : String, //int
    pub Payoff : String, //bool
}

impl TableTrait for CustomerFavoriteArticleStore { fn name() -> &'static str { "CustomerFavoriteArticleStore" } }/*
Ext.define("MEM.model.FavoriteList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string" },
      { name: "IsCustomerList", type: "bool" },
      { name: "IsGlobal", type: "bool" },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct FavoriteListStore {
    pub Id : String, //int
    pub CreatedId : String, //string
    pub IsCustomerList : String, //bool
    pub Changed : String, //date
    pub Created : String, //date
    pub ChangedId : String, //string
    pub Name : String, //string
    pub IsGlobal : String, //bool
    pub Disabled : String, //boolean
}

impl TableTrait for FavoriteListStore { fn name() -> &'static str { "FavoriteListStore" } }/*
Ext.define("MEM.model.FavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone)]
pub struct FavoriteArticleStore {
    pub Id : String, //int
    pub ChangedId : String, //string
    pub AccountNo : String, //string
    pub CreatedId : String, //string
    pub FavoriteListId : String, //int
    pub ArticleId : String, //int
    pub Payoff : String, //bool
    pub Changed : String, //date
    pub Disabled : String, //boolean
    pub Description : String, //string
    pub ItemUnitId : String, //int
    pub ArticleNo : String, //string
    pub Created : String, //date
    pub FullDescription : String, //string
    pub Chargeable : String, //bool
}

impl TableTrait for FavoriteArticleStore { fn name() -> &'static str { "FavoriteArticleStore" } }