/* MIT License

Copyright (c) 2022 ItalyToast

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */

// This file is generated by the project found in gen/ 

// Available tables:
// -AccountChartStore
// -AdditionalWorkOrderRowStore
// -AdditionalWorkOrderStatusStore
// -AdditionalWorkOrderStore
// -ArticleCustomerStore
// -ArticleCategoryStore
// -WorkOrderRowStore
// -ArticleStore
// -ChecklistDiaryStore
// -ChecklistRowStore
// -ConstructionTypeStore
// -CostStore
// -CurrencyStore
// -CustomerContactStore
// -CustomerListStore
// -CustomerPricelistItemStore
// -CustomerStore
// -CustomerTypeStore
// -DiaryStore
// -ExternalWorkOrderStatusStore
// -FactoryPricelistStore
// -FactoryArticleItemStore
// -FrameworkContractStore
// -FrameworkArticleItemStore
// -FormValidationStore
// -GroupStore
// -HourlyRateStore
// -InfoMessageStore
// -InfoNoteStore
// -InvoiceRowStore
// -InvoiceStore
// -ItemUnitStore
// -MainMenuStore
// -MarkupModelItemStore
// -MarkupModelStore
// -TimeStore
// -OptionValueStore
// -OfficeCompanyStore
// -PhraseStore
// -PriceTypeStore
// -ProfessionItemStore
// -WorkOrderDocumentStore
// -ProjectEconomyBudgetStore
// -ProjectEconomyStore
// -ProjectListStore
// -UserListStore
// -ProjectOverviewStore
// -ProjectPricelistItemStore
// -ProjectPricelistStore
// -ProjectStatusHistoryStore
// -ProjectStore
// -ProjectTreeStore
// -ProjectTypeStore
// -ResourceStore
// -RevenueStore
// -SettingStore
// -ServiceCategoryStore
// -StaffListStore
// -StatusHistoryStore
// -TagStore
// -UserPoolWorkOrderListStore
// -UserWorkOrderListStore
// -UserProjectWorkOrderListStore
// -UserRightStore
// -UserAccessStore
// -UserSessionStore
// -UserSettingStore
// -VatStore
// -WorkOrderAssignedLocationStore
// -WorkOrderListStore
// -WorkOrderLocationStore
// -WorkOrderStatusStore
// -WorkOrderStatusRelationsStore
// -WorkOrderStore
// -StaffLogStore
// -StaffPreviousDayStore
// -SupplierStore
// -WorkOrderContactStore
// -UserStore
// -CustomerContactListStore
// -ProjectLimitedStore
// -ProjectStatusStore
// -UserFavoriteListStore
// -UserFavoriteArticleStore
// -CustomerFavoriteArticleStore
// -FavoriteListStore
// -FavoriteArticleStore

/*
Ext.define("MEM.model.AccountChart", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "AccountNo", type: "string", meType: "meShortText", max: 5 },
      {
        name: "Account",
        type: "string",
        meType: "meShortText",
        max: 5,
        convert: function (b, a) {
          return a.get("AccountNo") + " " + a.get("Description");
        },
      },
      { name: "Description", type: "string", meType: "meMediumText", max: 50 },
      { name: "Cost", type: "bool", meType: "meBool" },
      { name: "Work", type: "bool", meType: "meBool" },
      { name: "Material", type: "bool", meType: "meBool" },
      { name: "VatCode", type: "string", meType: "meShortText", max: 10 },
      {
        name: "ComplementAccount",
        type: "string",
        meType: "meShortText",
        max: 5,
      },
      { name: "VatDuty", type: "bool", meType: "meBool" },
      { name: "InvoiceOnImport", type: "bool", meType: "meBool" },
      { name: "RotShare", type: "int", meType: "meInt" },
    ]*/
@Suppress("unused")
class AccountChartStore (
    val AccountNo : String, //string
    val Account : String, //string
    val Description : String, //string
    val CreatedId : String, //string
    val InvoiceOnImport : String, //bool
    val Changed : String, //date
    val Cost : String, //bool
    val Id : String, //int
    val VatCode : String, //string
    val Disabled : String, //boolean
    val Work : String, //bool
    val RotShare : String, //int
    val ChangedId : String, //string
    val VatDuty : String, //bool
    val ComplementAccount : String, //string
    val Created : String, //date
    val Material : String, //bool
)

/*
Ext.define("MEM.model.AdditionalWorkOrderRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Title", type: "string", max: 50 },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "PlannedQty", type: "float" },
      { name: "UsedQty", type: "float" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "Amount", type: "float", defaultValue: 1 },
      { name: "DeliveryDate", type: "date", useNull: !0, persist: !1 },
      { name: "ReturnDate", type: "date", useNull: !0, persist: !1 },
      { name: "PerformedDate", type: "date", useNull: !0, persist: !1 },
      { name: "PerformedUserId", type: "int", useNull: !0, persist: !1 },
      { name: "Comment", type: "string" },
      { name: "RowFormat", type: "string", max: 3, persist: !1 },
      { name: "RowStatus", type: "string", max: 1, persist: !1 },
      { name: "DiaryId", type: "int", persist: !1 },
      { name: "TimeId", type: "int", persist: !1 },
      { name: "Invoiced", type: "bool", persist: !1 },
    ]*/
@Suppress("unused")
class AdditionalWorkOrderRowStore (
    val PriceUnit : String, //float
    val Created : String, //date
    val AccountNo : String, //string
    val RowStatus : String, //string
    val RowFormat : String, //string
    val CreatedId : String, //string
    val TimeId : String, //int
    val UsedQty : String, //float
    val RowType : String, //string
    val CodeNo : String, //string
    val PlannedQty : String, //float
    val CostUnit : String, //float
    val Disabled : String, //boolean
    val WorkOrderId : String, //int
    val Amount : String, //float
    val DeliveryDate : String?, //date
    val Title : String, //string
    val ReturnDate : String?, //date
    val Comment : String, //string
    val ItemUnitId : String, //int
    val PerformedDate : String?, //date
    val PerformedUserId : String?, //int
    val DiaryId : String, //int
    val Invoiced : String, //bool
    val ChangedId : String, //string
    val Changed : String, //date
    val Id : String, //int
)

/*
Ext.define("MEM.model.AdditionalWorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
    ]*/
@Suppress("unused")
class AdditionalWorkOrderStatusStore (
    val CreatedId : String, //string
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val StatusColor : String, //string
    val Id : String, //int
    val Changed : String, //date
    val Created : String, //date
    val StatusCode : String, //int
    val StatusName : String, //string
)

/*
Ext.define("MEM.model.AdditionalWorkOrder", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      {
        name: "WorkOrderNo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      { name: "Addition", type: "bool", meType: "meBool" },
      { name: "Name", type: "string", meType: "meMediumText", max: 50 },
      { name: "WorkDescription", type: "string", meType: "meLongText" },
      { name: "WorkFeedback", type: "string", meType: "meMediumText" },
      {
        name: "WorkplaceAddress",
        type: "string",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "GpsX",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "GpsY",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "District",
        type: "string",
        meType: "meMediumText",
        persist: !1,
        max: 50,
      },
      {
        name: "ResponsibleServiceId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      {
        name: "ResponsibleForemanId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      { name: "CreditRisk", type: "boolean" },
      { name: "CustomerId", type: "int", meType: "meMediumText", useNull: !0 },
      { name: "CustomerName", type: "string" },
      {
        name: "CustomerAgentId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      { name: "ContactName", type: "string", max: 50, persist: !1 },
      {
        name: "CustomerRefNo",
        type: "string",
        meType: "meMediumText",
        persist: !1,
        max: 50,
      },
      {
        name: "WorkOrderStatusId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "ProductionStart",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "ProductionEnd",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "ProductionStartClock",
        type: "date",
        meType: "meTime",
        persist: !1,
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "ProductionEndClock",
        type: "date",
        meType: "meTime",
        persist: !1,
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "OrderDate",
        type: "date",
        meType: "medate",
        dateFormat: "Y-m-d",
      },
      {
        name: "ReportSign",
        type: "string",
        meType: "meShortText",
        persist: !1,
        max: 50,
      },
      {
        name: "ReportTimestamp",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
      },
      {
        name: "Invoiced",
        type: "bool",
        meType: "meBool",
        persist: !1,
        defaultValue: !1,
      },
      {
        name: "InvoiceDate",
        type: "date",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "InvoiceId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        persist: !1,
      },
      {
        name: "CachedWorkCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        persist: !1,
        readOnly: !0,
      },
      {
        name: "CachedWorkRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        persist: !1,
        readOnly: !0,
      },
      { name: "AdditionStatusId", type: "int", meType: "meMediumText" },
      {
        name: "AdditionStatusCode",
        type: "int",
        sortable: !0,
        persist: !1,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyAdditionalWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("AdditionStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "AdditionStatus",
        type: "string",
        sortable: !0,
        persist: !1,
        sortType: "asString",
        convert: function (d, b) {
          var c = Ext.getStore("MyAdditionalWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("AdditionStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusName");
          }
          return "";
        },
      },
      {
        name: "ConstructionTypeId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      {
        name: "BudgetLevelId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "MarkupModelId",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "OrderAmount",
        type: "float",
        meType: "meMoney",
        persist: !1,
        useNull: !0,
      },
      { name: "FixedPrice", type: "bool", meType: "meBool", defaultValue: !0 },
      {
        name: "CostProjectId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "MarkUpTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "TenderTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "BookedCostTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "BookedHoursTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      { name: "PriceTypeId", type: "int", meType: "meMediumText", useNull: !0 },
    ]*/
@Suppress("unused")
class AdditionalWorkOrderStore (
    val ResponsibleServiceId : String?, //int
    val InvoiceId : String?, //int
    val CustomerAgentId : String?, //int
    val Id : String, //int
    val ProductionStart : String?, //date
    val AdditionStatusCode : String, //int
    val FixedPrice : String, //bool
    val CostProjectId : String?, //int
    val MarkUpTotal : String?, //float
    val BookedCostTotal : String?, //float
    val WorkOrderNo : String?, //int
    val Invoiced : String, //bool
    val AdditionStatus : String, //string
    val CachedWorkRevenue : String?, //float
    val BudgetLevelId : String, //int
    val OrderDate : String, //date
    val WorkFeedback : String, //string
    val ReportSign : String, //string
    val MarkupModelId : String?, //int
    val ProductionStartClock : String?, //date
    val CustomerRefNo : String, //string
    val CustomerName : String, //string
    val ProductionEndClock : String?, //date
    val ResponsibleForemanId : String?, //int
    val CustomerId : String?, //int
    val CachedWorkCost : String?, //float
    val WorkplaceAddress : String, //string
    val WorkDescription : String, //string
    val WorkOrderStatusId : String, //int
    val Addition : String, //bool
    val ReportTimestamp : String, //string
    val Changed : String, //date
    val InvoiceDate : String?, //date
    val Created : String, //date
    val Name : String, //string
    val OrderAmount : String?, //float
    val ContactName : String, //string
    val ConstructionTypeId : String?, //int
    val BookedHoursTotal : String?, //float
    val ChangedId : String, //string
    val PriceTypeId : String?, //int
    val ProjectId : String, //int
    val ProductionEnd : String?, //date
    val Disabled : String, //boolean
    val GpsY : String?, //int
    val CreatedId : String, //string
    val District : String, //string
    val AdditionStatusId : String, //int
    val TenderTotal : String?, //float
    val CreditRisk : String, //boolean
    val GpsX : String?, //int
)

/*
Ext.define("MEM.model.ArticleCustomer", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore");
          var b;
          b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return a.get("Description") + " (" + b.get("Description") + ")";
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "CustomerId", type: "int" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
@Suppress("unused")
class ArticleCustomerStore (
    val CustomerId : String, //int
    val Description : String, //string
    val ArticleNo : String, //string
    val Id : String, //int
    val ItemUnitId : String, //int
    val Changed : String, //date
    val ChangedId : String, //string
    val Payoff : String, //bool
    val AccountNo : String, //string
    val Chargeable : String, //bool
    val FullDescription : String, //string
    val Created : String, //date
    val Disabled : String, //boolean
    val CreatedId : String, //string
)

/*
Ext.define("MEM.model.ArticleCategory", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }]*/
@Suppress("unused")
class ArticleCategoryStore (
    val Id : String, //int
    val ChangedId : String, //string
    val Created : String, //date
    val Changed : String, //date
    val CreatedId : String, //string
    val Disabled : String, //boolean
    val Name : String, //string
)

/*
Ext.define("MEM.model.WorkOrderRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "RowType", type: "string", max: 1, defaultValue: "" },
      { name: "ArticleId", type: "int" },
      { name: "BasePriceUsed", type: "bool" },
      { name: "CostUnitPricelist", type: "string", max: 50, defaultValue: "" },
      { name: "PriceUnitPricelist", type: "string", max: 50, defaultValue: "" },
      {
        name: "PayoffUnitPricelist",
        type: "string",
        max: 50,
        defaultValue: "",
      },
      { name: "CodeNo", type: "string", max: 10, defaultValue: "" },
      { name: "Title", type: "string", max: 128000, defaultValue: "" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "PlannedQty", type: "float" },
      { name: "Days", type: "float" },
      { name: "StartQty", type: "float" },
      { name: "EndQty", type: "float" },
      { name: "UsedQty", type: "float" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "Amount", type: "float", defaultValue: 1 },
      { name: "DeliveryDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "ReturnDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "PerformedDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "PerformedUserId", type: "int", useNull: !0 },
      { name: "Comment", type: "string", defaultValue: "" },
      { name: "RowFormat", type: "string", max: 3 },
      { name: "RowStatus", type: "string", max: 1 },
      { name: "DiaryId", type: "int" },
      { name: "TimeId", type: "int", useNull: !0 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
      { name: "Invoiced", type: "bool", defaultValue: !1, persist: !1 },
      { name: "IsPaidOff", type: "bool", defaultValue: !1, persist: !1 },
      { name: "ParentIsReadOnly", type: "bool", defaultValue: !1, persist: !1 },
      {
        name: "Locked",
        type: "bool",
        convert: function (b, a) {
          return (
            a.get("Invoiced") || a.get("IsPaidOff") || a.get("ParentIsReadOnly")
          );
        },
      },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ResourceId", type: "int", useNull: !0 },
      { name: "FactoryPricelistId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      {
        name: "PlannedQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "PlannedQty");
        },
      },
      {
        name: "Days_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Days");
        },
      },
      {
        name: "UsedQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "UsedQty");
        },
      },
      { name: "KPIValue", type: "float", allowNull: !0, persist: !1 },
      {
        name: "KPIValue_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "KPIValue", 1, this);
        },
      },
      { name: "RelatedWorkOrderRowId", type: "int" },
    ]*/
@Suppress("unused")
class WorkOrderRowStore (
    val KPIValue : String, //float
    val KPIValue_fmt : String, //string
    val Comment : String, //string
    val PerformedDate : String?, //date
    val DiaryId : String, //int
    val Invoiced : String, //bool
    val CostUnit : String, //float
    val ReturnDate : String?, //date
    val Locked : String, //bool
    val CreditProjectId : String?, //int
    val RowFormat : String, //string
    val Id : String, //int
    val StartQty : String, //float
    val BasePriceUsed : String, //bool
    val FactoryPricelistId : String?, //int
    val Chargeable : String, //bool
    val ParentIsReadOnly : String, //bool
    val WorkOrderId : String, //int
    val AccountNo : String, //string
    val IsPaidOff : String, //bool
    val UsedQty_fmt : String, //string
    val Amount : String, //float
    val DeliveryDate : String?, //date
    val PerformedUserId : String?, //int
    val RelatedWorkOrderRowId : String, //int
    val Payoff : String, //bool
    val ChangedId : String, //string
    val RowStatus : String, //string
    val PayoffUnitPricelist : String, //string
    val Changed : String, //date
    val PlannedQty : String, //float
    val Title : String, //string
    val RowType : String, //string
    val UsedQty : String, //float
    val PriceUnitPricelist : String, //string
    val ItemUnitId : String, //int
    val Days : String, //float
    val EndQty : String, //float
    val Disabled : String, //boolean
    val CostUnitPricelist : String, //string
    val ArticleId : String, //int
    val PriceUnit : String, //float
    val TimeId : String?, //int
    val ResourceId : String?, //int
    val Created : String, //date
    val CodeNo : String, //string
    val ArticleCategoryId : String?, //int
    val Days_fmt : String, //string
    val CreatedId : String, //string
    val PlannedQty_fmt : String, //string
)

/*
Ext.define("MEM.model.Article", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").getById(a.get("ItemUnitId"));
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      { name: "WorkOrderProjectId", type: "int", useNull: !0 },
      { name: "HasKPIRelation", type: "bool", defaultValue: !1 },
      { name: "IsKPIRecord", type: "bool", defaultValue: !1 },
    ]*/
@Suppress("unused")
class ArticleStore (
    val Description : String, //string
    val WorkOrderProjectId : String?, //int
    val Disabled : String, //boolean
    val Created : String, //date
    val CreatedId : String, //string
    val FullDescription : String, //string
    val ItemUnitId : String, //int
    val ArticleNo : String, //string
    val AccountNo : String, //string
    val ArticleCategoryId : String?, //int
    val Id : String, //int
    val CostUnit : String, //float
    val CreditProjectId : String?, //int
    val Changed : String, //date
    val Payoff : String, //bool
    val ChangedId : String, //string
    val HasKPIRelation : String, //bool
    val IsKPIRecord : String, //bool
    val PriceUnit : String, //float
    val Chargeable : String, //bool
    val WorkOrderId : String?, //int
)

/*
Ext.define("MEM.model.ChecklistDiary", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "DiaryId", type: "int", meType: "meMediumText" },
      {
        name: "ItemNo",
        type: "string",
        meType: "meShortText",
        max: 50,
        useNull: !0,
      },
      {
        name: "ItemDescription",
        type: "string",
        meType: "meLongText",
        max: 255,
      },
      { name: "Checked", type: "bool", meType: "meBool" },
      {
        name: "CheckDate",
        type: "date",
        meType: "meDate",
        readOnly: !0,
        dateFormat: "Y-m-d",
      },
      {
        name: "CheckedById",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CheckNote",
        type: "string",
        meType: "meLongText",
        max: 255,
        convert: function (a, b) {
          if (null == a) {
            return "";
          } else {
            return a;
          }
        },
      },
    ]*/
@Suppress("unused")
class ChecklistDiaryStore (
    val Changed : String, //date
    val Id : String, //int
    val ChangedId : String, //string
    val ItemNo : String?, //string
    val ItemDescription : String, //string
    val Disabled : String, //boolean
    val Created : String, //date
    val Checked : String, //bool
    val CheckedById : String?, //int
    val CheckDate : String, //date
    val CheckNote : String, //string
    val CreatedId : String, //string
    val DiaryId : String, //int
)

/*
Ext.define("MEM.model.ChecklistRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int", meType: "meMediumText" },
      {
        name: "ItemNo",
        type: "string",
        meType: "meShortText",
        max: 50,
        useNull: !0,
      },
      {
        name: "ItemDescription",
        type: "string",
        meType: "meLongText",
        max: 255,
      },
      { name: "Checked", type: "bool", meType: "meBool" },
      {
        name: "CheckDate",
        type: "date",
        meType: "meDate",
        readOnly: !0,
        dateFormat: "Y-m-d",
      },
      {
        name: "CheckedById",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CheckNote",
        type: "string",
        meType: "meLongText",
        max: 255,
        convert: function (a, b) {
          if (null == a) {
            return "";
          } else {
            return a;
          }
        },
      },
    ]*/
@Suppress("unused")
class ChecklistRowStore (
    val ItemDescription : String, //string
    val CheckedById : String?, //int
    val ChangedId : String, //string
    val CheckDate : String, //date
    val Disabled : String, //boolean
    val Id : String, //int
    val CreatedId : String, //string
    val Checked : String, //bool
    val Created : String, //date
    val ItemNo : String?, //string
    val WorkOrderId : String, //int
    val Changed : String, //date
    val CheckNote : String, //string
)

/*
Ext.define("MEM.model.ConstructionType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }]*/
@Suppress("unused")
class ConstructionTypeStore (
    val Disabled : String, //boolean
    val ChangedId : String, //string
    val TypeName : String, //string
    val CreatedId : String, //string
    val Id : String, //int
    val Changed : String, //date
    val Created : String, //date
)

/*
Ext.define("MEM.model.Cost", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "VerificationNo", type: "string", max: 50 },
      { name: "TransactionNote", type: "string", max: 255 },
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            if (a.get("Addition")) {
              return AWOpad(a.get("WorkOrderNo"), 3);
            } else {
              return a.get("WorkOrderNo");
            }
          }
          return "";
        },
      },
      {
        name: "WorkOrderName",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            return a.get("Name");
          }
          return "";
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "Invoiceable", type: "bool" },
      { name: "LedgerDate", type: "date" },
      {
        name: "InvoiceAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      {
        name: "CustomerPrice",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      { name: "MarkupAmount", type: "float" },
      { name: "CustomerNo", type: "string", max: 50, useNull: !0 },
      { name: "RevenueTransaction", type: "bool" },
      { name: "Invoiced", type: "bool" },
      { name: "InvoiceId", type: "int", useNull: !0 },
      { name: "TransactionType", type: "string", max: 1 },
      { name: "ExtInvoiceNo", type: "string", max: 20, useNull: !0 },
      { name: "IsScanned", type: "bool" },
      {
        name: "ScannedUrl",
        type: "string",
        max: 255,
        useNull: !0,
        convert: function (b, a) {
          return a.getScannedUrl();
        },
      },
      { name: "SupplierInvoiceId", type: "int", allowNull: !0 },
      { name: "ApprovedByProduction", type: "bool" },
      { name: "Locked", type: "bool" },
      { name: "ExtVerificationId", type: "string", max: 50, useNull: !0 },
      { name: "Notes", type: "string", max: 255, useNull: !0 },
      { name: "Mark1", type: "string", max: 255, useNull: !0 },
      { name: "Mark2", type: "string", max: 255, useNull: !0 },
      {
        name: "VatAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
    ]*/
@Suppress("unused")
class CostStore (
    val Locked : String, //bool
    val LedgerDate : String, //date
    val VatAmount : String, //float
    val VerificationNo : String, //string
    val ScannedUrl : String?, //string
    val IsScanned : String, //bool
    val Mark1 : String?, //string
    val ProjectId : String, //int
    val Invoiceable : String, //bool
    val WorkOrderNo : String?, //int
    val InvoiceAmount : String, //float
    val Notes : String?, //string
    val ExtVerificationId : String?, //string
    val SupplierInvoiceId : String, //int
    val CustomerPrice : String, //float
    val WorkOrderId : String?, //int
    val ApprovedByProduction : String, //bool
    val CustomerNo : String?, //string
    val Mark2 : String?, //string
    val TransactionNote : String, //string
    val Id : String, //int
    val Invoiced : String, //bool
    val ExtInvoiceNo : String?, //string
    val Created : String, //date
    val WorkOrderName : String?, //int
    val MarkupAmount : String, //float
    val InvoiceId : String?, //int
    val RevenueTransaction : String, //bool
    val TransactionType : String, //string
    val ChangedId : String, //string
    val AccountNo : String, //string
    val Changed : String, //date
    val CreatedId : String, //string
    val Disabled : String, //boolean
)

/*
Ext.define("MEM.model.Currency", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CurrencyCode", type: "string", max: 3 },
      { name: "Currency", type: "string", max: 50 },
      { name: "Xrate", type: "float" },
      { name: "Base", type: "boolean" },
    ]*/
@Suppress("unused")
class CurrencyStore (
    val Disabled : String, //boolean
    val Id : String, //int
    val CurrencyCode : String, //string
    val Currency : String, //string
    val Xrate : String, //float
    val Created : String, //date
    val CreatedId : String, //string
    val Changed : String, //date
    val ChangedId : String, //string
    val Base : String, //boolean
)

/*
Ext.define("MEM.model.CustomerContact", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Email", type: "string", max: 50 },
      { name: "OrganizationNo", type: "string", max: 12 },
      { name: "CustomerRef", type: "string", max: 50 },
      { name: "DefaultExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "isSelected", type: "bool", persist: !1, defaultValue: !1 },
    ]*/
@Suppress("unused")
class CustomerContactStore (
    val OrganizationNo : String, //string
    val Changed : String, //date
    val isSelected : String, //bool
    val DefaultExternalWorkOrderStatusId : String?, //int
    val ContactName : String, //string
    val Mobile : String, //string
    val Email : String, //string
    val Id : String, //int
    val Disabled : String, //boolean
    val Created : String, //date
    val CustomerId : String, //int
    val CustomerRef : String, //string
    val CreatedId : String, //string
    val ChangedId : String, //string
    val Phone : String, //string
)

/*
Ext.define("MEM.model.CustomerList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "CreditRisk", type: "boolean" },
      {
        name: "CustomerId",
        type: "int",
        persist: !1,
        convert: function (b, a) {
          return a.get("Id");
        },
      },
    ]*/
@Suppress("unused")
class CustomerListStore (
    val Disabled : String, //boolean
    val CustomerNo : String, //string
    val CreditRisk : String, //boolean
    val CreatedId : String, //string
    val Changed : String, //date
    val ChangedId : String, //string
    val Created : String, //date
    val Id : String, //int
    val CustomerId : String, //int
    val CustomerName : String, //string
)

/*
Ext.define("MEM.model.CustomerPricelistItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int", meType: "meMediumText", useNull: !0 },
      {
        name: "ProfessionItemId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      { name: "PriceUnit", type: "float", meType: "meMoney" },
    ]*/
@Suppress("unused")
class CustomerPricelistItemStore (
    val Id : String, //int
    val CustomerId : String?, //int
    val Created : String, //date
    val CreatedId : String, //string
    val Changed : String, //date
    val Disabled : String, //boolean
    val PriceUnit : String, //float
    val ProfessionItemId : String?, //int
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.Customer", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "OrganizationNo", type: "string", max: 15 },
      { name: "BillAddress1", type: "string", max: 50 },
      { name: "BillAddress2", type: "string", max: 50 },
      { name: "BillAddress3", type: "string", max: 50 },
      { name: "BillAddress4", type: "string", max: 50 },
      { name: "BillAddress5", type: "string", max: 50 },
      { name: "BillAddress6", type: "string", max: 50 },
      { name: "Email", type: "string", max: 255 },
      { name: "WebAddress", type: "string", max: 255 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Fax", type: "string", max: 30 },
      { name: "EdiAddress", type: "string", max: 255 },
      { name: "CustomerNote", type: "string" },
      { name: "CustomerName2", type: "string", max: 50 },
      { name: "OrganizationNo2", type: "string", max: 15 },
      { name: "ConstructionCompany", type: "boolean" },
      { name: "SupplierNo", type: "string", max: 50 },
      { name: "CustomerTypeId", type: "int" },
      { name: "CurrencyId", type: "int" },
      { name: "PaymentTermsCode", type: "string", max: 10 },
      { name: "Iban", type: "string", max: 34 },
      { name: "SwiftBic", type: "string", max: 11 },
      { name: "BankName", type: "string", max: 50 },
      { name: "BankAccountNo", type: "string", max: 50 },
      { name: "ClearingNo", type: "string", max: 4 },
      { name: "EanCode", type: "string", max: 50 },
      { name: "VatNo", type: "string", max: 20 },
      { name: "CountryCode", type: "string", max: 2 },
      { name: "PropertyName", type: "string", max: 50 },
      { name: "HousingCooperativeOrgNo", type: "string", max: 15 },
      { name: "ApartmentNo", type: "string", max: 10 },
      { name: "InfoNoteId", type: "int", useNull: !0, persist: !1 },
      { name: "CreditRisk", type: "boolean" },
      { name: "DefaultExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "HasFavorites", type: "boolean" },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
    ]*/
@Suppress("unused")
class CustomerStore (
    val ChangedId : String, //string
    val CreatedId : String, //string
    val BillAddress4 : String, //string
    val Fax : String, //string
    val BillAddress3 : String, //string
    val SwiftBic : String, //string
    val BankName : String, //string
    val PaymentTermsCode : String, //string
    val Mobile : String, //string
    val ClearingNo : String, //string
    val Changed : String, //date
    val VatNo : String, //string
    val Id : String, //int
    val OrganizationNo2 : String, //string
    val ApartmentNo : String, //string
    val Email : String, //string
    val InfoNoteId : String?, //int
    val CreditRisk : String, //boolean
    val DefaultExternalWorkOrderStatusId : String?, //int
    val WebAddress : String, //string
    val Iban : String, //string
    val CustomerName2 : String, //string
    val CustomerNote : String, //string
    val Disabled : String, //boolean
    val BankAccountNo : String, //string
    val CountryCode : String, //string
    val CurrencyId : String, //int
    val CustomerNo : String, //string
    val BillAddress1 : String, //string
    val CustomerName : String, //string
    val HousingCooperativeOrgNo : String, //string
    val EanCode : String, //string
    val EdiAddress : String, //string
    val HasFavorites : String, //boolean
    val BillAddress6 : String, //string
    val PropertyName : String, //string
    val BillAddress5 : String, //string
    val FrameworkContractId : String?, //int
    val SupplierNo : String, //string
    val BillAddress2 : String, //string
    val Created : String, //date
    val CustomerTypeId : String, //int
    val Phone : String, //string
    val OrganizationNo : String, //string
    val ConstructionCompany : String, //boolean
)

/*
Ext.define("MEM.model.CustomerType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }]*/
@Suppress("unused")
class CustomerTypeStore (
    val ChangedId : String, //string
    val Created : String, //date
    val Changed : String, //date
    val TypeName : String, //string
    val Disabled : String, //boolean
    val Id : String, //int
    val CreatedId : String, //string
)

/*
Ext.define("MEM.model.Diary", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "RegDate", type: "string", meType: "meDate" },
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      { name: "CurrentWork", type: "string", meType: "meMediumText" },
      { name: "FinishedWork", type: "string", meType: "meMediumText" },
      { name: "WorkProblems", type: "string", meType: "meMediumText" },
      { name: "ChangeAdditionNotes", type: "string", meType: "meMediumText" },
      {
        name: "Time1",
        type: "date",
        meType: "meTimeStamp",
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "Time1Display",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
        convert: function (b, a) {
          return a.timeDisplay(b, a, "Time1");
        },
      },
      { name: "Temperature1", type: "float", meType: "meQty" },
      { name: "Precipitation1", type: "string", meType: "meMediumText" },
      {
        name: "Time2",
        type: "date",
        meType: "meTimeStamp",
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "Time2Display",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
        convert: function (b, a) {
          return a.timeDisplay(b, a, "Time2");
        },
      },
      { name: "Temperature2", type: "float", meType: "meQty" },
      { name: "Precipitation2", type: "string", meType: "meMediumText" },
      { name: "WorkforceCount", type: "int", meType: "meInt" },
      { name: "WorkforceNotes", type: "string", meType: "meMediumText" },
      { name: "HasStaffLog", type: "boolean" },
      { name: "UserId", type: "int", useNull: !0 },
      { name: "KPIName", type: "string" },
      { name: "MaterialTemp1", type: "float", meType: "meQty", useNull: !0 },
      { name: "MaterialTemp2", type: "float", meType: "meQty", useNull: !0 },
    ]*/
@Suppress("unused")
class DiaryStore (
    val Time2 : String, //date
    val WorkforceNotes : String, //string
    val WorkforceCount : String, //int
    val ChangedId : String, //string
    val ChangeAdditionNotes : String, //string
    val Time1Display : String, //string
    val CreatedId : String, //string
    val Precipitation1 : String, //string
    val Time1 : String, //date
    val Created : String, //date
    val Changed : String, //date
    val Time2Display : String, //string
    val HasStaffLog : String, //boolean
    val FinishedWork : String, //string
    val Disabled : String, //boolean
    val Id : String, //int
    val UserId : String?, //int
    val MaterialTemp2 : String?, //float
    val ProjectId : String, //int
    val MaterialTemp1 : String?, //float
    val KPIName : String, //string
    val WorkProblems : String, //string
    val Precipitation2 : String, //string
    val Temperature1 : String, //float
    val RegDate : String, //string
    val Temperature2 : String, //float
    val CurrentWork : String, //string
)

/*
Ext.define("MEM.model.ExternalWorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "IsDefaultStatus", type: "bool", defaultValue: !1 },
      { name: "IsSignatureStatus", type: "bool", defaultValue: !1 },
    ]*/
@Suppress("unused")
class ExternalWorkOrderStatusStore (
    val StatusName : String, //string
    val StatusCode : String, //int
    val StatusColor : String, //string
    val CreatedId : String, //string
    val Disabled : String, //boolean
    val Created : String, //date
    val IsSignatureStatus : String, //bool
    val Id : String, //int
    val ChangedId : String, //string
    val IsDefaultStatus : String, //bool
    val Changed : String, //date
)

/*
Ext.define("MEM.model.FactoryPricelist", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }]*/
@Suppress("unused")
class FactoryPricelistStore (
    val Id : String, //int
    val Changed : String, //date
    val ChangedId : String, //string
    val Name : String, //string
    val Created : String, //date
    val CreatedId : String, //string
    val Disabled : String, //boolean
)

/*
Ext.define("MEM.model.FactoryArticleItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FactoryPricelistId", type: "int" },
      { name: "ArticleId", type: "int", useNull: !0 },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").findRecord(
            "Id",
            a.get("ItemUnitId")
          );
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
    ]*/
@Suppress("unused")
class FactoryArticleItemStore (
    val ItemUnitId : String, //int
    val CostUnit : String, //float
    val Disabled : String, //boolean
    val PriceUnit : String, //float
    val Changed : String, //date
    val ChangedId : String, //string
    val Description : String, //string
    val FullDescription : String, //string
    val Created : String, //date
    val CreatedId : String, //string
    val ArticleId : String?, //int
    val AccountNo : String, //string
    val ArticleNo : String, //string
    val Id : String, //int
    val FactoryPricelistId : String, //int
)

/*
Ext.define("MEM.model.FrameworkContract", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string", max: 50 },
      { name: "CustomerId", type: "int" },
      { name: "LimitArticles", type: "bool" },
    ]*/
@Suppress("unused")
class FrameworkContractStore (
    val Changed : String, //date
    val CreatedId : String, //string
    val Disabled : String, //boolean
    val Name : String, //string
    val Id : String, //int
    val ChangedId : String, //string
    val Created : String, //date
    val LimitArticles : String, //bool
    val CustomerId : String, //int
)

/*
Ext.define("MEM.model.FrameworkArticleItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FrameworkContractId", type: "int" },
      { name: "ArticleId", type: "int", useNull: !0 },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").getById(a.get("ItemUnitId"));
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
@Suppress("unused")
class FrameworkArticleItemStore (
    val CostUnit : String, //float
    val CreditProjectId : String?, //int
    val Id : String, //int
    val Description : String, //string
    val ItemUnitId : String, //int
    val Changed : String, //date
    val ChangedId : String, //string
    val FrameworkContractId : String, //int
    val Disabled : String, //boolean
    val ArticleId : String?, //int
    val PriceUnit : String, //float
    val CreatedId : String, //string
    val Chargeable : String, //bool
    val ArticleNo : String, //string
    val Created : String, //date
    val FullDescription : String, //string
    val AccountNo : String, //string
    val ArticleCategoryId : String?, //int
    val Payoff : String, //bool
)

/*
Ext.define("MEM.model.FormValidation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StoreName", type: "string", max: 50 },
      { name: "FieldName", type: "string", max: 50 },
      { name: "AllowBlank", type: "boolean" },
      { name: "ValidationType", type: "string", max: 50 },
      { name: "RegEx", type: "string", max: 1000 },
      { name: "Hidden", type: "boolean" },
    ]*/
@Suppress("unused")
class FormValidationStore (
    val Disabled : String, //boolean
    val ValidationType : String, //string
    val ChangedId : String, //string
    val Hidden : String, //boolean
    val StoreName : String, //string
    val Created : String, //date
    val Changed : String, //date
    val CreatedId : String, //string
    val AllowBlank : String, //boolean
    val RegEx : String, //string
    val Id : String, //int
    val FieldName : String, //string
)

/*
Ext.define("MEM.model.Group", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "GroupName", type: "string", max: 50 }]*/
@Suppress("unused")
class GroupStore (
    val Id : String, //int
    val Disabled : String, //boolean
    val CreatedId : String, //string
    val GroupName : String, //string
    val Created : String, //date
    val Changed : String, //date
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.HourlyRate", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProfessionItemId", type: "int" },
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionDescription", type: "string", max: 50 },
      { name: "PriceUnit", type: "float" },
      { name: "UnitName", type: "string", max: 50 },
      { name: "CustomerPrice", type: "float" },
      { name: "ProjectPrice", type: "float" },
    ]*/
@Suppress("unused")
class HourlyRateStore (
    val UnitName : String, //string
    val Created : String, //date
    val CreatedId : String, //string
    val ProfessionCode : String, //string
    val ProfessionItemId : String, //int
    val Id : String, //int
    val ProjectPrice : String, //float
    val CustomerPrice : String, //float
    val Disabled : String, //boolean
    val Changed : String, //date
    val ChangedId : String, //string
    val ProfessionDescription : String, //string
    val PriceUnit : String, //float
)

/*
Ext.define("MEM.model.InfoMessage", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Date",
        type: "string",
        convert: function (b, a) {
          return Ext.Date.format(a.get("Created"), "Y-m-d");
        },
      },
      { name: "Message", type: "string" },
      { name: "ShowInMobile", type: "bool" },
      { name: "GroupId", type: "int" },
    ]*/
@Suppress("unused")
class InfoMessageStore (
    val Date : String, //string
    val Message : String, //string
    val Created : String, //date
    val Changed : String, //date
    val Disabled : String, //boolean
    val ChangedId : String, //string
    val Id : String, //int
    val ShowInMobile : String, //bool
    val GroupId : String, //int
    val CreatedId : String, //string
)

/*
Ext.define("MEM.model.InfoNote", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "TableName", type: "string", max: 50 },
      { name: "TableId", type: "int" },
      { name: "UserId", type: "int" },
      { name: "Note", type: "string" },
    ]*/
@Suppress("unused")
class InfoNoteStore (
    val Changed : String, //date
    val Id : String, //int
    val CreatedId : String, //string
    val TableId : String, //int
    val Created : String, //date
    val Disabled : String, //boolean
    val Note : String, //string
    val UserId : String, //int
    val TableName : String, //string
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.InvoiceRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "InvoiceId", type: "int" },
      { name: "RowNo", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      { name: "Unit", type: "string", max: 5 },
      { name: "Amount", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "Markup", type: "int" },
      {
        name: "TotalPrice",
        type: "float",
        persist: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("Amount") * a.get("PriceUnit");
        },
      },
      { name: "RowFormat", type: "string" },
    ]*/
@Suppress("unused")
class InvoiceRowStore (
    val RowNo : String, //int
    val ChangedId : String, //string
    val CreatedId : String, //string
    val InvoiceId : String, //int
    val Description : String, //string
    val RowType : String, //string
    val CodeNo : String, //string
    val Amount : String, //int
    val Disabled : String, //boolean
    val Id : String, //int
    val Unit : String, //string
    val Created : String, //date
    val RowFormat : String, //string
    val PriceUnit : String, //float
    val TotalPrice : String, //float
    val Changed : String, //date
    val Markup : String, //int
)

/*
Ext.define("MEM.model.Invoice", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "InvoiceId", type: "int" },
      { name: "RowNo", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      { name: "Unit", type: "string", max: 5 },
      { name: "Amount", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "Markup", type: "int" },
      {
        name: "TotalPrice",
        type: "float",
        persist: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("Amount") * a.get("PriceUnit");
        },
      },
      { name: "RowFormat", type: "string" },
    ]*/
@Suppress("unused")
class InvoiceStore (
    val PriceUnit : String, //float
    val Markup : String, //int
    val TotalPrice : String, //float
    val ChangedId : String, //string
    val Changed : String, //date
    val Description : String, //string
    val InvoiceId : String, //int
    val RowNo : String, //int
    val Amount : String, //int
    val Created : String, //date
    val Id : String, //int
    val Disabled : String, //boolean
    val RowFormat : String, //string
    val CreatedId : String, //string
    val RowType : String, //string
    val Unit : String, //string
    val CodeNo : String, //string
)

/*
Ext.define("MEM.model.ItemUnit", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UnitName", type: "string", max: 10 },
      { name: "Description", type: "string", max: 10 },
    ]*/
@Suppress("unused")
class ItemUnitStore (
    val CreatedId : String, //string
    val Id : String, //int
    val Disabled : String, //boolean
    val ChangedId : String, //string
    val Changed : String, //date
    val Description : String, //string
    val UnitName : String, //string
    val Created : String, //date
)

/*
Ext.define("MEM.model.MainMenu", {
  extend: Ext.data.Model,
  config: {
    fields: [
      { name: "MenuText" },
      { name: "ShortMenuText" },
      { name: "View" },
      { name: "Store" },
      { name: "Active" },
      { name: "Picto" },
      { name: "Title" },
    ]*/
@Suppress("unused")
class MainMenuStore (
    val Id : String, //int
    val Changed : String, //date
    val Created : String, //date
    val CreatedId : String, //string
    val ChangedId : String, //string
    val Disabled : String, //boolean
)

/*
Ext.define("MEM.model.MarkupModelItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "MarkupModelId", type: "int" },
      { name: "ResourceAccount", type: "string", max: 5 },
      { name: "Description", type: "string", max: 50 },
      { name: "MarkupCF", type: "int" },
    ]*/
@Suppress("unused")
class MarkupModelItemStore (
    val CreatedId : String, //string
    val ResourceAccount : String, //string
    val Description : String, //string
    val Disabled : String, //boolean
    val MarkupCF : String, //int
    val ChangedId : String, //string
    val Changed : String, //date
    val MarkupModelId : String, //int
    val Id : String, //int
    val Created : String, //date
)

/*
Ext.define("MEM.model.MarkupModel", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string", max: 50 },
      { name: "Code", type: "string", max: 10 },
    ]*/
@Suppress("unused")
class MarkupModelStore (
    val CreatedId : String, //string
    val Changed : String, //date
    val Disabled : String, //boolean
    val Code : String, //string
    val ChangedId : String, //string
    val Created : String, //date
    val Id : String, //int
    val Name : String, //string
)

/*
Ext.define("MEM.model.Time", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "FullName", type: "string", max: 100 },
      { name: "ProjectId", type: "int" },
      { name: "AbsenceProjectId", type: "int", useNull: !0 },
      {
        name: "Absence",
        type: "bool",
        convert: function (c, b) {
          var a = MEM.app.getController("Common");
          return b.get("ProjectId") != a.absenceProjectId() ? 0 : 1;
        },
      },
      {
        name: "ProjectName",
        type: "string",
        max: 255,
        sortable: !0,
        convert: function (b, c) {
          if (b) {
            return b;
          } else {
            var d = Ext.getStore("MyCloneProjectListAllStore"),
              a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
            if (a) {
              return a.get("ProjectName");
            } else {
              return "";
            }
          }
        },
      },
      {
        name: "ProjectNo",
        type: "string",
        max: 20,
        sortable: !0,
        sortType: "asInt",
        convert: function (b, c) {
          if (b) {
            return b;
          } else {
            var d = Ext.getStore("MyCloneProjectListAllStore"),
              a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
            if (a) {
              return a.get("ProjectNo");
            } else {
              return "";
            }
          }
        },
      },
      {
        name: "Project",
        type: "string",
        max: 255,
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneProjectListAllStore"),
            a;
          a = c.findRecord("Id", b.get("ProjectId"), 0, !1, !0, !0);
          if (a) {
            return a.get("ProjectNo") + ", " + a.get("ProjectName");
          }
        },
      },
      {
        name: "ProjectStatus",
        type: "string",
        max: 255,
        convert: function (e, c) {
          var d = Ext.getStore("MyCloneProjectListAllStore"),
            b = Ext.getStore("MyProjectStatusStore"),
            a;
          a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
          if (a) {
            b = b.findRecord("Id", a.get("ProjectStatusId"), 0, !1, !0, !0);
            return b.get("StatusCode");
          } else {
            return null;
          }
        },
      },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (b, c) {
          var a = Ext.getStore("MyWorkOrderListStore").findRecord(
            "Id",
            c.get("WorkOrderId"),
            0,
            !1,
            !0,
            !0
          );
          if (a && a.get("Addition")) {
            return AWOpad(b, 3);
          }
          return b;
        },
      },
      { name: "WOAWONo", type: "string", max: 10, sortable: !0 },
      { name: "WorkOrderName", type: "string", max: 255, sortable: !0 },
      { name: "RegDate", type: "string", max: 10, sortType: "asDate" },
      { name: "Debit", type: "boolean", defaultValue: !0 },
      { name: "ProfessionItemId", type: "int" },
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionAccountNo", type: "string", max: 5 },
      { name: "Unit", type: "string", max: 5 },
      {
        name: "Hours",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "BreakTime",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "StartTime",
        useNull: !0,
        type: "date",
        dateFormat: "Y-m-d H:i:s",
        convert: function (b, h) {
          var f,
            d = new Date(h.get("RegDate")),
            c,
            e = getSetting("Time.Timestamp.Interval"),
            g = e ? parseInt(e) : 15;
          if (typeof b == "string") {
            var a = b.split(/[-:T]*/
@Suppress("unused")
class TimeStore (
    val ProjectNo : String, //string
    val Changed : String, //date
    val WorkOrderId : String?, //int
    val WorkOrderNo : String?, //int
    val ProjectStatus : String, //string
    val ChangedId : String, //string
    val ProfessionCode : String, //string
    val FullName : String, //string
    val Project : String, //string
    val UserId : String, //int
    val WorkOrderName : String, //string
    val Created : String, //date
    val ProfessionAccountNo : String, //string
    val Unit : String, //string
    val BreakTime : String, //float
    val Absence : String, //bool
    val Disabled : String, //boolean
    val ProfessionItemId : String, //int
    val ProjectId : String, //int
    val Id : String, //int
    val CreatedId : String, //string
    val AbsenceProjectId : String?, //int
    val WOAWONo : String, //string
    val ProjectName : String, //string
    val RegDate : String, //string
    val Debit : String, //boolean
    val Hours : String, //float
)

/*
Ext.define("MEM.model.OptionValue", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "SettingKey", type: "string", max: 50 },
      { name: "SettingValue", type: "string" },
      { name: "SettingDescription", type: "string" },
    ]*/
@Suppress("unused")
class OptionValueStore (
    val SettingDescription : String, //string
    val Created : String, //date
    val SettingKey : String, //string
    val Disabled : String, //boolean
    val Changed : String, //date
    val CreatedId : String, //string
    val Id : String, //int
    val SettingValue : String, //string
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.OfficeCompany", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CompanyName", type: "string" },
      { name: "AbsenceProjectId", type: "int" },
    ]*/
@Suppress("unused")
class OfficeCompanyStore (
    val ChangedId : String, //string
    val Id : String, //int
    val CompanyName : String, //string
    val Disabled : String, //boolean
    val CreatedId : String, //string
    val AbsenceProjectId : String, //int
    val Created : String, //date
    val Changed : String, //date
)

/*
Ext.define("MEM.model.Phrase", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Phrase",
        type: "string",
        meType: "meMediumText",
        display: T("Phrasetext"),
      },
    ]*/
@Suppress("unused")
class PhraseStore (
    val ChangedId : String, //string
    val Created : String, //date
    val Disabled : String, //boolean
    val Phrase : String, //string
    val Changed : String, //date
    val Id : String, //int
    val CreatedId : String, //string
)

/*
Ext.define("MEM.model.PriceType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }]*/
@Suppress("unused")
class PriceTypeStore (
    val Created : String, //date
    val Id : String, //int
    val Changed : String, //date
    val Disabled : String, //boolean
    val CreatedId : String, //string
    val TypeName : String, //string
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.ProfessionItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionDescription", type: "string", max: 50 },
      { name: "ItemUnitId", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "SalaryNo", type: "string", max: 10 },
      { name: "CostUnit", type: "float" },
      { name: "ProfessionGroup", type: "string", max: 50 },
      { name: "Chargeable", type: "bool" },
    ]*/
@Suppress("unused")
class ProfessionItemStore (
    val CreatedId : String, //string
    val SalaryNo : String, //string
    val CostUnit : String, //float
    val ItemUnitId : String, //int
    val Disabled : String, //boolean
    val Changed : String, //date
    val PriceUnit : String, //float
    val Chargeable : String, //bool
    val ProfessionCode : String, //string
    val Id : String, //int
    val AccountNo : String, //string
    val Created : String, //date
    val ProfessionGroup : String, //string
    val ChangedId : String, //string
    val ProfessionDescription : String, //string
)

/*
Ext.define("MEM.model.WorkOrderDocument", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderId", type: "int", meType: "meMediumText" },
      { name: "DiaryId", type: "int", meType: "meMediumText" },
      { name: "DocumentDescription", type: "string", meType: "meLongText" },
      { name: "Url", type: "string", meType: "meMediumText", max: 255 },
      { name: "Title", type: "string", meType: "meMediumText", max: 255 },
      { name: "Filename", type: "string", meType: "meMediumText", max: 255 },
      {
        name: "DocumentMimeType",
        type: "string",
        meType: "meMediumText",
        max: 255,
      },
      { name: "DocumentSize", type: "int", meType: "meMediumText" },
      { name: "DocumentData", type: "string" },
      {
        name: "ThumbnailMimeType",
        type: "string",
        meType: "meMediumText",
        max: 255,
      },
      { name: "ThumbnailData", type: "string", meType: "meLongText" },
      { name: "ImageWidth", type: "int", meType: "meInt" },
      { name: "ImageHeight", type: "int", meType: "meInt" },
      { name: "HideInPDA", type: "bool", persist: !1 },
      { name: "EnlargeInReports", type: "bool" },
      { name: "IncludeInReport", type: "bool" },
      { name: "ShowInPortal", type: "bool" },
      { name: "RegDate", type: "string" },
    ]*/
@Suppress("unused")
class WorkOrderDocumentStore (
    val ThumbnailMimeType : String, //string
    val DocumentSize : String, //int
    val EnlargeInReports : String, //bool
    val IncludeInReport : String, //bool
    val DocumentDescription : String, //string
    val DiaryId : String, //int
    val ProjectId : String, //int
    val DocumentMimeType : String, //string
    val RegDate : String, //string
    val Filename : String, //string
    val ChangedId : String, //string
    val DocumentData : String, //string
    val ThumbnailData : String, //string
    val Id : String, //int
    val CreatedId : String, //string
    val ShowInPortal : String, //bool
    val Disabled : String, //boolean
    val Created : String, //date
    val ImageWidth : String, //int
    val Changed : String, //date
    val ImageHeight : String, //int
    val Url : String, //string
    val WorkOrderId : String, //int
    val Title : String, //string
    val HideInPDA : String, //bool
)

/*
Ext.define("MEM.model.ProjectEconomyBudget", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "BudgetCost", type: "float" },
      { name: "BudgetRevenue", type: "float" },
    ]*/
@Suppress("unused")
class ProjectEconomyBudgetStore (
    val Id : String, //int
    val Disabled : String, //boolean
    val Changed : String, //date
    val ProjectId : String, //int
    val Created : String, //date
    val BudgetRevenue : String, //float
    val BudgetCost : String, //float
    val CreatedId : String, //string
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.ProjectEconomy", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "LineType", type: "int" },
      { name: "Cost", type: "float" },
      { name: "Revenue", type: "float" },
      { name: "ContributionMargin", type: "float" },
      { name: "ContributionMarginPercent", type: "float" },
    ]*/
@Suppress("unused")
class ProjectEconomyStore (
    val ProjectId : String, //int
    val ContributionMargin : String, //float
    val Revenue : String, //float
    val Id : String, //int
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val Created : String, //date
    val Changed : String, //date
    val CreatedId : String, //string
    val Cost : String, //float
    val ContributionMarginPercent : String, //float
    val LineType : String, //int
)

/*
Ext.define("MEM.model.ProjectList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusId", type: "int" },
      {
        name: "ProjectStatus",
        type: "string",
        sortable: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyProjectStatusStore"),
            a;
          a = c.findRecord("Id", b.get("ProjectStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusName");
          }
          return "";
        },
      },
      { name: "CustomerId", type: "int" },
      { name: "WorkplaceId", type: "string" },
      { name: "StatusCode", type: "string", sortType: "asInt" },
      { name: "ProjectName", type: "string" },
      { name: "ProjectNo", type: "string", sortType: "asInt" },
      {
        name: "Project",
        type: "string",
        convert: function (b, a) {
          return a.data.ProjectNo + ", " + a.data.ProjectName;
        },
      },
      { name: "SecReadOnly", type: "bool", persist: !1 },
      { name: "Piecework", type: "bool", persist: !1 },
      { name: "KPIRuleId", type: "int", useNull: !0 },
    ]*/
@Suppress("unused")
class ProjectListStore (
    val KPIRuleId : String?, //int
    val Piecework : String, //bool
    val CreatedId : String, //string
    val ProjectNo : String, //string
    val ProjectStatusId : String, //int
    val CustomerId : String, //int
    val WorkplaceId : String, //string
    val Id : String, //int
    val SecReadOnly : String, //bool
    val ChangedId : String, //string
    val StatusCode : String, //string
    val Changed : String, //date
    val Created : String, //date
    val ProjectName : String, //string
    val Project : String, //string
    val Disabled : String, //boolean
    val ProjectStatus : String, //string
)

/*
Ext.define("MEM.model.UserList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FullName", type: "string" },
      { name: "Signature", type: "string" },
      { name: "EmployeeNo", type: "string" },
      { name: "PersonalNo", type: "string" },
      { name: "ProfessionCode", type: "string" },
      { name: "ProfessionItemId", type: "int" },
      { name: "OrganizationalProjectId", type: "int" },
      { name: "PartnerSupplier", type: "bool" },
    ]*/
@Suppress("unused")
class UserListStore (
    val Signature : String, //string
    val ProfessionItemId : String, //int
    val PersonalNo : String, //string
    val Disabled : String, //boolean
    val FullName : String, //string
    val ChangedId : String, //string
    val EmployeeNo : String, //string
    val ProfessionCode : String, //string
    val CreatedId : String, //string
    val Id : String, //int
    val OrganizationalProjectId : String, //int
    val PartnerSupplier : String, //bool
    val Changed : String, //date
    val Created : String, //date
)

/*
Ext.define("MEM.model.ProjectOverview", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "ProjectId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectNo",
        type: "string",
        meType: "meShortText",
        max: 10,
        readOnly: !0,
      },
      {
        name: "ProjectName",
        type: "string",
        meType: "meMediumText",
        max: 50,
        readOnly: !0,
      },
      {
        name: "TagField1Id",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "TagField2Id",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectManagerId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectStart",
        type: "date",
        meType: "meDate",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectEnd",
        type: "date",
        meType: "meDate",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CustomerId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectStatusId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "BudgetRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "BookedCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BookedRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "BudgetRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "ContributionMarginAmount",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginPercent",
        type: "int",
        meType: "mePercent",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetHours",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BookedHours",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkOrderCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkOrderRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginWO",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "SLPCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "SLPRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginAmountSLP",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginPercentSLP",
        type: "int",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkCostWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("WorkCost") * Me.Moms;
        },
      },
      {
        name: "MaterialCost",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "MaterialCost",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("MaterialCost") * Me.Moms;
        },
      },
      {
        name: "EarnedRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "EarnedRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "EarnedRevenueNotInvoiced",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "EarnedRevenueNotInvoicedWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenueNotInvoiced") * Me.Moms;
        },
      },
    ]*/
@Suppress("unused")
class ProjectOverviewStore (
    val CreatedId : String, //string
    val ProjectStart : String?, //date
    val SLPRevenue : String?, //float
    val BookedCost : String?, //float
    val WorkOrderCost : String?, //float
    val BudgetHours : String?, //int
    val ContributionMarginWO : String?, //float
    val MaterialCost : String?, //float
    val WorkCost : String?, //float
    val EarnedRevenueNotInvoicedWithTax : String?, //float
    val SLPCost : String?, //float
    val CustomerId : String?, //int
    val Disabled : String, //boolean
    val ContributionMarginPercent : String?, //int
    val ProjectStatusId : String?, //int
    val BookedHours : String?, //int
    val EarnedRevenue : String?, //float
    val TagField1Id : String?, //int
    val ContributionMarginPercentSLP : String?, //int
    val ProjectNo : String, //string
    val ContributionMarginAmount : String?, //float
    val EarnedRevenueWithTax : String?, //float
    val BookedRevenue : String?, //float
    val TagField2Id : String?, //int
    val ContributionMarginAmountSLP : String?, //float
    val ProjectEnd : String?, //date
    val Created : String, //date
    val Changed : String, //date
    val BudgetRevenue : String?, //float
    val WorkOrderRevenue : String?, //float
    val EarnedRevenueNotInvoiced : String?, //float
    val BudgetCost : String?, //float
    val ProjectName : String, //string
    val ChangedId : String, //string
    val WorkCostWithTax : String?, //float
    val BudgetRevenueWithTax : String?, //float
    val ProjectManagerId : String?, //int
    val Id : String, //int
    val ProjectId : String?, //int
)

/*
Ext.define("MEM.model.ProjectPricelistItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText", useNull: !0 },
      {
        name: "ProfessionItemId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      { name: "PriceUnit", type: "float", meType: "meMoney" },
    ]*/
@Suppress("unused")
class ProjectPricelistItemStore (
    val ProjectId : String?, //int
    val Id : String, //int
    val Disabled : String, //boolean
    val ProfessionItemId : String?, //int
    val Changed : String, //date
    val ChangedId : String, //string
    val CreatedId : String, //string
    val PriceUnit : String, //float
    val Created : String, //date
)

/*
Ext.define("MEM.model.ProjectPricelist", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ServiceCarPriceDay", type: "float" },
      { name: "ServiceCarPriceKm", type: "float" },
    ]*/
@Suppress("unused")
class ProjectPricelistStore (
    val Created : String, //date
    val ChangedId : String, //string
    val Id : String, //int
    val CreatedId : String, //string
    val Changed : String, //date
    val ServiceCarPriceKm : String, //float
    val ProjectId : String, //int
    val Disabled : String, //boolean
    val ServiceCarPriceDay : String, //float
)

/*
Ext.define("MEM.model.ProjectStatusHistory", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusHistoryId", type: "int" },
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "FullName", type: "string", max: 50 },
    ]*/
@Suppress("unused")
class ProjectStatusHistoryStore (
    val Changed : String, //date
    val Created : String, //date
    val Id : String, //int
    val ChangedId : String, //string
    val ProjectStatusHistoryId : String, //int
    val StatusName : String, //string
    val StatusCode : String, //int
    val StatusColor : String, //string
    val ProjectId : String, //int
    val CreatedId : String, //string
    val FullName : String, //string
    val Disabled : String, //boolean
)

/*
Ext.define("MEM.model.Project", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ParentProjectId", type: "int", allowBlank: !1, useNull: !0 },
      { name: "ProjectNo", type: "int", persist: !1, sortType: "asInt" },
      { name: "ProjectStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50, allowBlank: !1 },
      { name: "PriceTypeId", type: "int" },
      { name: "ProjectTypeId", type: "int" },
      { name: "ProjectManagerId", type: "int" },
      { name: "WorkLeaderId", type: "int" },
      { name: "TagField1Id", type: "int", useNull: !0 },
      { name: "TagField2Id", type: "int", useNull: !0 },
      { name: "ProjectNote", type: "string", useNull: !0 },
      { name: "CustomerId", type: "int", useNull: !0 },
      { name: "CustomerName", type: "string" },
      { name: "CreditRisk", type: "boolean" },
      { name: "ContactName", type: "string" },
      { name: "CustomerAgentId", type: "int", useNull: !0 },
      { name: "CustomerRef", type: "string", max: 50 },
      { name: "ProjectStart", type: "date", dateFormat: "Y-m-d" },
      { name: "ProjectEnd", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "MarkupModelId", type: "int", allowBlank: !1 },
      { name: "WorkplaceAddress1", type: "string", max: 50 },
      { name: "WorkplaceAddress2", type: "string", max: 50 },
      { name: "WorkplaceZipcode", type: "string", max: 50 },
      { name: "WorkplaceCity", type: "string", max: 50 },
      { name: "WorkplaceDistance", type: "int" },
      { name: "FinalInspectionDate", type: "date", dateFormat: "Y-m-d" },
      { name: "GuaranteeTime", type: "int" },
      { name: "GuaranteeInspectionDate", type: "date", dateFormat: "Y-m-d" },
      { name: "WOFavorite", type: "boolean", persist: !1 },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
    ]*/
@Suppress("unused")
class ProjectStore (
    val MarkupModelId : String, //int
    val WorkplaceAddress2 : String, //string
    val PriceTypeId : String, //int
    val GuaranteeTime : String, //int
    val TagField1Id : String?, //int
    val ProjectManagerId : String, //int
    val ProjectNo : String, //int
    val ProjectEnd : String?, //date
    val WorkLeaderId : String, //int
    val WorkplaceAddress1 : String, //string
    val ContactName : String, //string
    val ProjectName : String, //string
    val Id : String, //int
    val Created : String, //date
    val CreditRisk : String, //boolean
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val Changed : String, //date
    val CustomerAgentId : String?, //int
    val GuaranteeInspectionDate : String, //date
    val WOFavorite : String, //boolean
    val FinalInspectionDate : String, //date
    val CreatedId : String, //string
    val FrameworkContractId : String?, //int
    val ParentProjectId : String?, //int
    val ProjectStart : String, //date
    val CustomerName : String, //string
    val WorkplaceCity : String, //string
    val WorkplaceDistance : String, //int
    val TagField2Id : String?, //int
    val CustomerRef : String, //string
    val ProjectTypeId : String, //int
    val ProjectStatusId : String, //int
    val WorkplaceZipcode : String, //string
    val ProjectNote : String?, //string
    val CustomerId : String?, //int
)

/*
Ext.define("MEM.model.ProjectTree", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusId", type: "int" },
      { name: "ProjectName", type: "string" },
      { name: "ProjectNo", type: "string" },
    ]*/
@Suppress("unused")
class ProjectTreeStore (
    val ChangedId : String, //string
    val ProjectStatusId : String, //int
    val ProjectName : String, //string
    val Created : String, //date
    val Id : String, //int
    val Disabled : String, //boolean
    val CreatedId : String, //string
    val Changed : String, //date
    val ProjectNo : String, //string
)

/*
Ext.define("MEM.model.ProjectType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }]*/
@Suppress("unused")
class ProjectTypeStore (
    val Id : String, //int
    val CreatedId : String, //string
    val Changed : String, //date
    val ChangedId : String, //string
    val Created : String, //date
    val TypeName : String, //string
    val Disabled : String, //boolean
)

/*
Ext.define("MEM.model.Resource", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ResourceNo", type: "string", max: 20 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (b, a) {
          return a.get("ResourceNo") + " " + a.get("Description");
        },
      },
      { name: "CreditProjectId", type: "int" },
      { name: "CreditProjectNo", type: "string" },
      { name: "CreditProjectName", type: "string" },
    ]*/
@Suppress("unused")
class ResourceStore (
    val CreditProjectId : String, //int
    val ResourceNo : String, //string
    val CreditProjectNo : String, //string
    val Created : String, //date
    val CreditProjectName : String, //string
    val Changed : String, //date
    val Id : String, //int
    val FullDescription : String, //string
    val Description : String, //string
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val CreatedId : String, //string
)

/*
Ext.define("MEM.model.Revenue", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "VerificationNo", type: "string", max: 50, readOnly: !0 },
      { name: "TransactionNote", type: "string", max: 255 },
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            if (a.get("Addition")) {
              return AWOpad(a.get("WorkOrderNo"), 3);
            } else {
              return a.get("WorkOrderNo");
            }
          }
          return "";
        },
      },
      {
        name: "WorkOrderName",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            return a.get("Name");
          }
          return "";
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "Invoiceable", type: "bool" },
      { name: "LedgerDate", type: "date" },
      {
        name: "InvoiceAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      {
        name: "CustomerPrice",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      { name: "MarkupAmount", type: "float" },
      { name: "CustomerNo", type: "string", max: 50, useNull: !0 },
      { name: "RevenueTransaction", type: "bool" },
      { name: "Invoiced", type: "bool" },
      { name: "InvoiceId", type: "int", useNull: !0 },
      { name: "TransactionType", type: "string", max: 1 },
      { name: "ExtInvoiceNo", type: "string", max: 20, useNull: !0 },
      { name: "IsScanned", type: "bool" },
      {
        name: "ScannedUrl",
        type: "string",
        max: 255,
        useNull: !0,
        convert: function (b, a) {
          return a.getScannedUrl();
        },
      },
      { name: "SupplierInvoiceId", type: "int", allowNull: !0 },
      { name: "ApprovedByProduction", type: "bool" },
      { name: "Locked", type: "bool" },
      { name: "ExtVerificationId", type: "string", max: 50, useNull: !0 },
      { name: "Notes", type: "string", max: 255, useNull: !0 },
      { name: "Mark1", type: "string", max: 255, useNull: !0 },
      { name: "Mark2", type: "string", max: 255, useNull: !0 },
    ]*/
@Suppress("unused")
class RevenueStore (
    val TransactionType : String, //string
    val RevenueTransaction : String, //bool
    val ProjectId : String, //int
    val MarkupAmount : String, //float
    val InvoiceId : String?, //int
    val IsScanned : String, //bool
    val ExtVerificationId : String?, //string
    val CustomerPrice : String, //float
    val ApprovedByProduction : String, //bool
    val Mark1 : String?, //string
    val AccountNo : String, //string
    val WorkOrderNo : String?, //int
    val InvoiceAmount : String, //float
    val Disabled : String, //boolean
    val SupplierInvoiceId : String, //int
    val Invoiceable : String, //bool
    val TransactionNote : String, //string
    val CreatedId : String, //string
    val Changed : String, //date
    val Mark2 : String?, //string
    val Notes : String?, //string
    val CustomerNo : String?, //string
    val Created : String, //date
    val Id : String, //int
    val ChangedId : String, //string
    val VerificationNo : String, //string
    val WorkOrderName : String?, //int
    val LedgerDate : String, //date
    val ScannedUrl : String?, //string
    val WorkOrderId : String?, //int
    val Invoiced : String, //bool
    val ExtInvoiceNo : String?, //string
    val Locked : String, //bool
)

/*
Ext.define("MEM.model.Setting", {
  extend: Ext.data.Model,
  config: { fields: [{ name: "Name" }, { name: "Value" }]*/
@Suppress("unused")
class SettingStore (
    val Changed : String, //date
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val CreatedId : String, //string
    val Created : String, //date
    val Id : String, //int
)

/*
Ext.define("MEM.model.ServiceCategory", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }]*/
@Suppress("unused")
class ServiceCategoryStore (
    val Disabled : String, //boolean
    val Created : String, //date
    val CreatedId : String, //string
    val Changed : String, //date
    val ChangedId : String, //string
    val Name : String, //string
    val Id : String, //int
)

/*
Ext.define("MEM.model.StaffList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "DiaryId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "CustomerName", type: "string" },
      { name: "FullName", type: "string" },
      { name: "IdNo", type: "string" },
      { name: "Origin", type: "string", useNull: !0 },
      { name: "OriginId", type: "int" },
      { name: "isEmployee", type: "bool" },
      { name: "LogId", type: "int" },
      { name: "CheckedIn", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedInTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedIn");
        },
      },
      { name: "CheckedOut", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedOutTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedOut");
        },
      },
      {
        name: "Present",
        type: "string",
        convert: function (b, a) {
          if (a.data.CheckedIn == null || a.data.CheckedOut != null) {
            return "red";
          } else {
            return "green";
          }
        },
      },
    ]*/
@Suppress("unused")
class StaffListStore (
    val OriginId : String, //int
    val Id : String, //int
    val CustomerId : String, //int
    val ChangedId : String, //string
    val CustomerName : String, //string
    val Disabled : String, //boolean
    val DiaryId : String, //int
    val FullName : String, //string
    val CheckedIn : String, //date
    val CheckedInTime : String, //string
    val IdNo : String, //string
    val CheckedOutTime : String, //string
    val Created : String, //date
    val Present : String, //string
    val CheckedOut : String, //date
    val LogId : String, //int
    val ProjectId : String, //int
    val Changed : String, //date
    val CreatedId : String, //string
    val Origin : String?, //string
    val isEmployee : String, //bool
)

/*
Ext.define("MEM.model.StatusHistory", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusHistoryId", type: "int" },
      { name: "StatusName", type: "string", max: 50 },
      { name: "FullName", type: "string", max: 50 },
      { name: "Changed", type: "data" },
    ]*/
@Suppress("unused")
class StatusHistoryStore (
    val FullName : String, //string
    val Id : String, //int
    val CreatedId : String, //string
    val Disabled : String, //boolean
    val Changed : String, //data
    val ChangedId : String, //string
    val StatusName : String, //string
    val Created : String, //date
    val ProjectStatusHistoryId : String, //int
)

/*
Ext.define("MEM.model.Tag", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "TagName", type: "string", max: 50 },
      { name: "TagValue", type: "string", max: 50 },
    ]*/
@Suppress("unused")
class TagStore (
    val TagName : String, //string
    val Id : String, //int
    val CreatedId : String, //string
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val Created : String, //date
    val TagValue : String, //string
    val Changed : String, //date
)

/*
Ext.define("MEM.model.UserPoolWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "ProjectNo", type: "string", max: 50 },
      {
        name: "Project",
        type: "string",
        max: 100,
        convert: function (b, a) {
          return a.get("ProjectNo") + ", " + a.get("ProjectName");
        },
      },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "ProductionStart",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "ProductionEnd",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      { name: "HaveDocument", type: "bool", defaultValue: !1 },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "ProductionStartDateDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartDateDisplay(b, a);
        },
      },
      {
        name: "ProductionStartWeekDay",
        type: "string",
        convert: function (b, a) {
          return Ext.String.capitalize(a.convertProductionStartWeekDay(b, a));
        },
      },
      {
        name: "ProductionStartTimeDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartTimeDisplay(b, a);
        },
      },
      { name: "CustomerName", type: "string", max: 50 },
      { name: "CustomerFavoritePriceList", type: "boolean", persist: !1 },
      { name: "CustomerFavoriteArticlePrice", type: "boolean", persist: !1 },
      { name: "ProjectFavorite", type: "boolean", persist: !1 },
    ]*/
@Suppress("unused")
class UserPoolWorkOrderListStore (
    val Created : String, //date
    val HaveDocument : String, //bool
    val ProductionStartDateDisplay : String, //string
    val ProductionEnd : String?, //date
    val WorkOrderStatusId : String, //int
    val ProjectNo : String, //string
    val Project : String, //string
    val Name : String, //string
    val CustomerFavoritePriceList : String, //boolean
    val ResponsibleForemanId : String, //int
    val ProjectName : String, //string
    val ProjectFavorite : String, //boolean
    val Addition : String, //bool
    val WorkOrderStatusCode : String, //int
    val CustomerName : String, //string
    val CustomerFavoriteArticlePrice : String, //boolean
    val CreatedId : String, //string
    val ProjectStatusCode : String, //int
    val WorkOrderId : String, //int
    val Id : String, //int
    val ProductionStartWeekDay : String, //string
    val ProductionStartTimeDisplay : String, //string
    val ResponsibleServiceId : String, //int
    val WorkOrderNo : String, //int
    val ProductionStart : String?, //date
    val ProjectId : String, //int
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val Changed : String, //date
)

/*
Ext.define("MEM.model.UserWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "ProjectNo", type: "string", max: 50 },
      {
        name: "Project",
        type: "string",
        max: 100,
        convert: function (b, a) {
          return a.get("ProjectNo") + ", " + a.get("ProjectName");
        },
      },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "ProductionStart",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "ProductionStartDateDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartDateDisplay(b, a);
        },
      },
      {
        name: "ProductionStartWeekDay",
        type: "string",
        convert: function (b, a) {
          return Ext.String.capitalize(a.convertProductionStartWeekDay(b, a));
        },
      },
      {
        name: "ProductionStartTimeDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartTimeDisplay(b, a);
        },
      },
      {
        name: "ProductionEnd",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
      { name: "HaveDocument", type: "bool", defaultValue: !1 },
      { name: "CustomerName", type: "string", max: 50 },
    ]*/
@Suppress("unused")
class UserWorkOrderListStore (
    val ProjectName : String, //string
    val ChangedId : String, //string
    val ResponsibleForemanId : String, //int
    val ProductionStartDateDisplay : String, //string
    val ResponsibleServiceId : String, //int
    val Name : String, //string
    val Changed : String, //date
    val Addition : String, //bool
    val ProductionStart : String?, //date
    val ProjectId : String, //int
    val ProjectStatusCode : String, //int
    val ProductionStartWeekDay : String, //string
    val WorkOrderNo : String, //int
    val Disabled : String, //boolean
    val ProductionStartTimeDisplay : String, //string
    val ProductionEnd : String?, //date
    val CreatedId : String, //string
    val HaveDocument : String, //bool
    val WorkOrderStatusId : String, //int
    val WorkOrderId : String, //int
    val WorkOrderStatusCode : String, //int
    val Created : String, //date
    val ProjectNo : String, //string
    val Project : String, //string
    val Id : String, //int
    val CustomerName : String, //string
    val FullName : String, //string
)

/*
Ext.define("MEM.model.UserProjectWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "WorkPoolId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      {
        name: "BasicScope",
        type: "bool",
        readOnly: !0,
        convert: function (b, a) {
          if (a.get("WorkOrderNo") == 1) {
            return !0;
          }
          return !1;
        },
      },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
      { name: "CustomerId", type: "int", persist: !1 },
      { name: "CustomerFavoritePriceList", type: "boolean", persist: !1 },
      { name: "CustomerFavoriteArticlePrice", type: "boolean", persist: !1 },
      { name: "ProjectFavorite", type: "boolean", persist: !1 },
    ]*/
@Suppress("unused")
class UserProjectWorkOrderListStore (
    val FullName : String, //string
    val Disabled : String, //boolean
    val CustomerId : String, //int
    val CreatedId : String, //string
    val Changed : String, //date
    val ResponsibleServiceId : String, //int
    val Created : String, //date
    val Name : String, //string
    val CustomerFavoritePriceList : String, //boolean
    val CustomerFavoriteArticlePrice : String, //boolean
    val WorkOrderStatusId : String, //int
    val Id : String, //int
    val WorkPoolId : String, //int
    val WorkOrderNo : String, //int
    val ProjectFavorite : String, //boolean
    val BasicScope : String, //bool
    val ProjectName : String, //string
    val ChangedId : String, //string
    val Addition : String, //bool
    val ProjectId : String, //int
)

/*
Ext.define("MEM.model.UserRight", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "ObjectRightId", type: "int" },
      { name: "ObjectRightName", type: "string", max: 50 },
      { name: "ObjectName", type: "string", max: 50 },
      { name: "WebClient", type: "bool" },
      { name: "MobileClient", type: "bool" },
      { name: "ApiClient", type: "bool" },
      { name: "AdminClient", type: "bool" },
    ]*/
@Suppress("unused")
class UserRightStore (
    val Created : String, //date
    val AdminClient : String, //bool
    val WebClient : String, //bool
    val CreatedId : String, //string
    val Id : String, //int
    val ChangedId : String, //string
    val UserId : String, //int
    val ObjectRightId : String, //int
    val Disabled : String, //boolean
    val ObjectRightName : String, //string
    val ObjectName : String, //string
    val ApiClient : String, //bool
    val Changed : String, //date
    val MobileClient : String, //bool
)

/*
Ext.define("MEM.model.UserAccess", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "ObjectRightId", type: "int" },
      { name: "ObjectRightName", type: "string", max: 50 },
      { name: "ObjectName", type: "string", max: 50 },
      { name: "IsProjectRight", type: "bool" },
      { name: "AccessRight", type: "int" },
      { name: "WriteRight", type: "int" },
      { name: "ReadRight", type: "int" },
      { name: "OwnRight", type: "int" },
    ]*/
@Suppress("unused")
class UserAccessStore (
    val Created : String, //date
    val WriteRight : String, //int
    val CreatedId : String, //string
    val Changed : String, //date
    val ChangedId : String, //string
    val ReadRight : String, //int
    val ObjectRightName : String, //string
    val ObjectName : String, //string
    val Id : String, //int
    val UserId : String, //int
    val IsProjectRight : String, //bool
    val OwnRight : String, //int
    val ObjectRightId : String, //int
    val AccessRight : String, //int
    val Disabled : String, //boolean
)

/*
Ext.define("MEM.model.UserSession", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "SessionId", type: "string", max: 128 },
      { name: "SessionUserId", type: "int" },
      { name: "ImpersonatedUserId", type: "int" },
      { name: "Languagecode", type: "string" },
      {
        name: "FullName",
        type: "string",
        max: 50,
        convert: function (d, b) {
          var c = Ext.getStore("MyUserListStore"),
            a;
          a = c.findRecord("Id", b.get("ImpersonatedUserId"), 0, !1, !0, !0);
          if (a) {
            return a.get("FullName");
          }
          return "";
        },
      },
    ]*/
@Suppress("unused")
class UserSessionStore (
    val Id : String, //int
    val Created : String, //date
    val CreatedId : String, //string
    val ChangedId : String, //string
    val SessionUserId : String, //int
    val ImpersonatedUserId : String, //int
    val Languagecode : String, //string
    val Changed : String, //date
    val Disabled : String, //boolean
    val FullName : String, //string
    val SessionId : String, //string
)

/*
Ext.define("MEM.model.UserSetting", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "SettingKey", type: "string", max: 50 },
      { name: "SettingValue", type: "string" },
    ]*/
@Suppress("unused")
class UserSettingStore (
    val SettingKey : String, //string
    val UserId : String, //int
    val Created : String, //date
    val Changed : String, //date
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val SettingValue : String, //string
    val Id : String, //int
    val CreatedId : String, //string
)

/*
Ext.define("MEM.model.Vat", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "VatPercent",
        type: "float",
        meType: "mePercent",
        useNull: !0,
        display: T("VAT factor"),
      },
      {
        name: "Description",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Description"),
      },
    ]*/
@Suppress("unused")
class VatStore (
    val Description : String, //string
    val ChangedId : String, //string
    val Created : String, //date
    val CreatedId : String, //string
    val Changed : String, //date
    val VatPercent : String?, //float
    val Id : String, //int
    val Disabled : String, //boolean
)

/*
Ext.define("MEM.model.WorkOrderAssignedLocation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", useNull: !0 },
      { name: "WorkOrderNo", type: "int", max: 10 },
      {
        name: "WOAWONo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
        convert: function (b, a) {
          if (a.get("Addition") == 1) {
            return (
              getSetting("System.Prefix.VariationNo") +
              Ext.String.leftPad(a.get("WorkOrderNo"), 3, "0")
            );
          } else {
            return a.get("WorkOrderNo");
          }
        },
      },
      { name: "Name", type: "string", meType: "meLongText", max: 100 },
      { name: "CustomerName", type: "string", meType: "meLongText", max: 100 },
      { name: "WorkplaceAddress", type: "string", meType: "meMediumText" },
      { name: "WorkOrderStatusId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderStatusCode", type: "int", meType: "meMediumText" },
      { name: "GpsX", type: "int", meType: "meShortText", useNull: !0 },
      { name: "GpsY", type: "int", meType: "meShortText", useNull: !0 },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ProjectStatusId", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
    ]*/
@Suppress("unused")
class WorkOrderAssignedLocationStore (
    val WorkOrderStatusId : String, //int
    val ProjectStatusCode : String, //int
    val WOAWONo : String?, //int
    val Changed : String, //date
    val ProjectId : String?, //int
    val GpsY : String?, //int
    val Disabled : String, //boolean
    val Created : String, //date
    val CreatedId : String, //string
    val Name : String, //string
    val ChangedId : String, //string
    val WorkOrderStatusCode : String, //int
    val CustomerName : String, //string
    val ProjectStatusId : String, //int
    val WorkOrderNo : String, //int
    val Id : String, //int
    val ResponsibleServiceId : String, //int
    val GpsX : String?, //int
    val WorkplaceAddress : String, //string
)

/*
Ext.define("MEM.model.WorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "ProjectId", type: "int" },
      {
        name: "WorkOrderId",
        type: "int",
        convert: function (a, b) {
          if (a) {
            return a;
          }
          return b.get("Id");
        },
      },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "WorkPoolId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectNo", type: "string", max: 50 },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      {
        name: "BasicScope",
        type: "bool",
        readOnly: !0,
        convert: function (b, a) {
          if (a.get("WorkOrderNo") == 1) {
            return !0;
          }
          return !1;
        },
      },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
    ]*/
@Suppress("unused")
class WorkOrderListStore (
    val WorkOrderNo : String, //int
    val ResponsibleServiceId : String, //int
    val ResponsibleForemanId : String, //int
    val FullName : String, //string
    val CreatedId : String, //string
    val ChangedId : String, //string
    val ProjectName : String, //string
    val Addition : String, //bool
    val ProjectId : String, //int
    val Created : String, //date
    val Disabled : String, //boolean
    val Changed : String, //date
    val CustomerId : String, //int
    val ProjectNo : String, //string
    val Id : String, //int
    val WorkPoolId : String, //int
    val BasicScope : String, //bool
    val WorkOrderStatusId : String, //int
    val WorkOrderId : String, //int
    val Name : String, //string
)

/*
Ext.define("MEM.model.WorkOrderLocation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", useNull: !0 },
      { name: "WorkOrderNo", type: "int", max: 10 },
      {
        name: "WOAWONo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
        convert: function (b, a) {
          if (a.get("Addition") == 1) {
            return (
              getSetting("System.Prefix.VariationNo") +
              Ext.String.leftPad(a.get("WorkOrderNo"), 3, "0")
            );
          } else {
            return a.get("WorkOrderNo");
          }
        },
      },
      { name: "Name", type: "string", meType: "meLongText", max: 100 },
      { name: "CustomerName", type: "string", meType: "meLongText", max: 100 },
      { name: "WorkplaceAddress", type: "string", meType: "meMediumText" },
      { name: "WorkOrderStatusId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderStatusCode", type: "int", meType: "meMediumText" },
      { name: "GpsX", type: "int", meType: "meShortText", useNull: !0 },
      { name: "GpsY", type: "int", meType: "meShortText", useNull: !0 },
    ]*/
@Suppress("unused")
class WorkOrderLocationStore (
    val Created : String, //date
    val CreatedId : String, //string
    val CustomerName : String, //string
    val WOAWONo : String?, //int
    val Disabled : String, //boolean
    val WorkOrderStatusCode : String, //int
    val GpsX : String?, //int
    val WorkplaceAddress : String, //string
    val ChangedId : String, //string
    val Name : String, //string
    val GpsY : String?, //int
    val WorkOrderNo : String, //int
    val Changed : String, //date
    val Id : String, //int
    val ProjectId : String?, //int
    val WorkOrderStatusId : String, //int
)

/*
Ext.define("MEM.model.WorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int", sortable: !0, sortType: "asInt" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "TempRec", type: "bool", persist: !1, defaultValue: !1 },
    ]*/
@Suppress("unused")
class WorkOrderStatusStore (
    val ChangedId : String, //string
    val Id : String, //int
    val Disabled : String, //boolean
    val Changed : String, //date
    val Created : String, //date
    val StatusColor : String, //string
    val TempRec : String, //bool
    val CreatedId : String, //string
    val StatusCode : String, //int
    val StatusName : String, //string
)

/*
Ext.define("MEM.model.WorkOrderStatusRelations", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderStatusId", type: "int", useNull: !0 },
      { name: "ExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "AllowExternal", type: "bool", defaultValue: !1 },
      { name: "RequireExternal", type: "bool", defaultValue: !1 },
    ]*/
@Suppress("unused")
class WorkOrderStatusRelationsStore (
    val Id : String, //int
    val Disabled : String, //boolean
    val ExternalWorkOrderStatusId : String?, //int
    val CreatedId : String, //string
    val ChangedId : String, //string
    val Changed : String, //date
    val AllowExternal : String, //bool
    val RequireExternal : String, //bool
    val Created : String, //date
    val WorkOrderStatusId : String?, //int
)

/*
Ext.define("MEM.model.WorkOrder", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool" },
      { name: "Name", type: "string", max: 100, defaultValue: "" },
      { name: "WorkDescription", type: "string", defaultValue: "" },
      { name: "WorkFeedback", type: "string", defaultValue: "" },
      { name: "WorkplaceAddress", type: "string", defaultValue: "" },
      { name: "GpsX", type: "int", persist: !1, useNull: !0 },
      { name: "GpsY", type: "int", persist: !1, useNull: !0 },
      { name: "District", type: "string", persist: !1, max: 50 },
      { name: "ResponsibleServiceId", type: "int", useNull: !0 },
      { name: "WorkPoolId", type: "int", useNull: !0 },
      { name: "ResponsibleForemanId", type: "int", useNull: !0 },
      { name: "CreditRisk", type: "boolean" },
      { name: "CustomerId", type: "int" },
      { name: "CustomerName", type: "string" },
      { name: "CustomerAgentId", type: "int", useNull: !0 },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerRefNo", type: "string", max: 1024, defaultValue: "" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ExternalWorkOrderStatusId", type: "int", useNull: !0 },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        persist: !1,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "ProductionStart",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        useNull: !0,
      },
      {
        name: "ProductionEnd",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        useNull: !0,
      },
      {
        name: "ProductionStartClockXX",
        type: "string",
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "ProductionEndClockXX",
        type: "string",
        dateFormat: "time",
        useNull: !0,
      },
      { name: "OrderDate", type: "date", dateFormat: "Y-m-d" },
      { name: "ReportSign", type: "string", persist: !1, max: 50 },
      { name: "ReportTimestamp", type: "string", persist: !1 },
      { name: "Invoiced", type: "bool", persist: !1, defaultValue: !1 },
      { name: "InvoiceDate", type: "date", persist: !1, useNull: !0 },
      { name: "InvoiceId", type: "int", persist: !1, useNull: !0 },
      { name: "CachedWorkCost", type: "float", persist: !1, useNull: !0 },
      { name: "CachedWorkRevenue", type: "float", persist: !1, useNull: !0 },
      { name: "AdditionStatusId", type: "int" },
      { name: "ConstructionTypeId", type: "int" },
      { name: "BudgetLevelId", type: "int", persist: !1 },
      { name: "MarkupModelId", type: "int", persist: !1 },
      { name: "OrderAmount", type: "float", persist: !1, useNull: !0 },
      { name: "FixedPrice", type: "bool", defaultValue: !0 },
      { name: "CostProjectId", type: "int" },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
      { name: "ServiceCategoryId", type: "int", useNull: !0 },
      { name: "GpsX", type: "int", useNull: !0 },
      { name: "GpsY", type: "int", useNull: !0 },
      { name: "SignOnSite", type: "bool", defaultValue: !1 },
      { name: "WorkOrderDocumentId", type: "int" },
      {
        name: "ExternalStatusName",
        type: "string",
        persist: !1,
        defaultValue: "",
      },
      { name: "ExternalStatusComment", type: "string", persist: !1 },
      { name: "UpdatePrices", type: "bool", defaultValue: !1 },
      { name: "KPIRuleId", type: "int", useNull: !0 },
      { name: "KPIName", type: "string", persist: !1 },
    ]*/
@Suppress("unused")
class WorkOrderStore (
    val CostProjectId : String, //int
    val CachedWorkCost : String?, //float
    val FrameworkContractId : String?, //int
    val District : String, //string
    val WorkFeedback : String, //string
    val ServiceCategoryId : String?, //int
    val WorkOrderDocumentId : String, //int
    val CreatedId : String, //string
    val ConstructionTypeId : String, //int
    val SignOnSite : String, //bool
    val ExternalStatusName : String, //string
    val Created : String, //date
    val GpsY : String?, //int
    val WorkOrderStatusId : String, //int
    val OrderAmount : String?, //float
    val InvoiceId : String?, //int
    val Id : String, //int
    val UpdatePrices : String, //bool
    val KPIRuleId : String?, //int
    val Changed : String, //date
    val Invoiced : String, //bool
    val ExternalStatusComment : String, //string
    val InvoiceDate : String?, //date
    val CustomerRefNo : String, //string
    val WorkOrderStatusCode : String, //int
    val KPIName : String, //string
    val CachedWorkRevenue : String?, //float
    val ReportSign : String, //string
    val ProductionEnd : String?, //date
    val WorkPoolId : String?, //int
    val ContactName : String, //string
    val ProductionStartClockXX : String?, //string
    val WorkDescription : String, //string
    val ResponsibleServiceId : String?, //int
    val CustomerName : String, //string
    val CustomerAgentId : String?, //int
    val BudgetLevelId : String, //int
    val WorkplaceAddress : String, //string
    val MarkupModelId : String, //int
    val GpsX : String?, //int
    val ChangedId : String, //string
    val ResponsibleForemanId : String?, //int
    val ProductionStart : String?, //date
    val OrderDate : String, //date
    val ExternalWorkOrderStatusId : String?, //int
    val FixedPrice : String, //bool
    val ProjectId : String, //int
    val Disabled : String, //boolean
    val WorkOrderNo : String, //int
    val Addition : String, //bool
    val CustomerId : String, //int
    val ProductionEndClockXX : String?, //string
    val Name : String, //string
    val ReportTimestamp : String, //string
    val CreditRisk : String, //boolean
    val AdditionStatusId : String, //int
)

/*
Ext.define("MEM.model.StaffLog", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "Created", type: "string", dateFormat: "time" },
      { name: "CreatedId", type: "int" },
      { name: "Changed", type: "string", dateFormat: "time" },
      { name: "ChangedId", type: "int" },
      { name: "DiaryId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "IdNo", type: "string" },
      { name: "Origin", type: "string", useNull: !0 },
      { name: "OriginId", type: "int" },
      { name: "CheckedIn", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedInTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedIn");
        },
      },
      { name: "CheckedOut", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      { name: "FullName", type: "string" },
    ]*/
@Suppress("unused")
class StaffLogStore (
    val CreatedId : String, //int
    val Origin : String?, //string
    val CheckedInTime : String, //string
    val ChangedId : String, //int
    val Changed : String, //string
    val ProjectId : String, //int
    val Created : String, //string
    val Disabled : String, //boolean
    val CheckedIn : String, //date
    val IdNo : String, //string
    val OriginId : String, //int
    val CheckedOut : String, //date
    val FullName : String, //string
    val Id : String, //int
    val DiaryId : String, //int
)

/*
Ext.define("MEM.model.StaffPreviousDay", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "Created", type: "string", dateFormat: "time" },
      { name: "CreatedId", type: "int" },
      { name: "Changed", type: "string", dateFormat: "time" },
      { name: "ChangedId", type: "int" },
      { name: "IdNo", type: "string" },
      { name: "DiaryId", type: "int" },
      { name: "ProjectId", type: "int" },
    ]*/
@Suppress("unused")
class StaffPreviousDayStore (
    val Created : String, //string
    val IdNo : String, //string
    val Id : String, //int
    val ChangedId : String, //int
    val CreatedId : String, //int
    val Changed : String, //string
    val ProjectId : String, //int
    val Disabled : String, //boolean
    val DiaryId : String, //int
)

/*
Ext.define("MEM.model.Supplier", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "OrganizationNo", type: "string", max: 15 },
    ]*/
@Suppress("unused")
class SupplierStore (
    val CustomerName : String, //string
    val OrganizationNo : String, //string
    val Disabled : String, //boolean
    val ChangedId : String, //string
    val Created : String, //date
    val Id : String, //int
    val CreatedId : String, //string
    val CustomerNo : String, //string
    val Changed : String, //date
)

/*
Ext.define("MEM.model.WorkOrderContact", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "CustomerAgentId", type: "int" },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Email", type: "string", max: 50 },
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerName", type: "string", max: 50 },
    ]*/
@Suppress("unused")
class WorkOrderContactStore (
    val CustomerAgentId : String, //int
    val Phone : String, //string
    val ContactName : String, //string
    val Email : String, //string
    val Disabled : String, //boolean
    val CustomerName : String, //string
    val Mobile : String, //string
    val CustomerId : String, //int
    val Changed : String, //date
    val CreatedId : String, //string
    val WorkOrderId : String, //int
    val Created : String, //date
    val Id : String, //int
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.User", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FullName", type: "string" },
      { name: "UserLogin", type: "string" },
      { name: "PersonalNo", type: "string" },
      { name: "Languagecode", type: "string" },
    ]*/
@Suppress("unused")
class UserStore (
    val Changed : String, //date
    val PersonalNo : String, //string
    val CreatedId : String, //string
    val FullName : String, //string
    val Created : String, //date
    val Id : String, //int
    val UserLogin : String, //string
    val Disabled : String, //boolean
    val Languagecode : String, //string
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.CustomerContactList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerRef", type: "string", max: 50 },
    ]*/
@Suppress("unused")
class CustomerContactListStore (
    val Id : String, //int
    val Disabled : String, //boolean
    val Created : String, //date
    val CreatedId : String, //string
    val Changed : String, //date
    val ChangedId : String, //string
    val CustomerId : String, //int
    val ContactName : String, //string
    val CustomerRef : String, //string
)

/*
Ext.define("MEM.model.ProjectLimited", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Project",
        type: "string",
        convert: function (b, a) {
          return a.data.ProjectNo + ", " + a.data.ProjectName;
        },
      },
      {
        name: "ParentProjectId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Parent Project No"),
      },
      {
        name: "ProjectNo",
        type: "string",
        meType: "meShortText",
        max: 10,
        persist: !0,
        display: T("Project No"),
      },
      {
        name: "ProjectStatusId",
        type: "int",
        meType: "meMediumText",
        display: T("Project status") + T("Code"),
      },
      {
        name: "ProjectStatusCode",
        type: "int",
        meType: "meMediumText",
        display: T("Project status") + T("Code"),
      },
      {
        name: "ProjectName",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Project Name"),
      },
      {
        name: "PriceTypeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Pricetype") + T("Code"),
      },
      {
        name: "ProjectTypeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Project type") + T("Code"),
      },
      {
        name: "ProjectManagerId",
        type: "int",
        meType: "meMediumText",
        display: T("Project manager") + " " + T("Username"),
      },
      {
        name: "WorkLeaderId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Work leader") + " " + T("Username"),
      },
      {
        name: "TagField1Id",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Tag field 1"),
      },
      {
        name: "TagField2Id",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Tag field 2"),
      },
      {
        name: "CustomerId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Customer no"),
      },
      {
        name: "CustomerAgentId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Customer Contact"),
      },
      {
        name: "CustomerRef",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Customer ref."),
      },
      {
        name: "MarkupModelId",
        type: "int",
        meType: "meShortText",
        display: T("Markup model"),
      },
      {
        name: "CostCenterId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Costcenter"),
      },
      {
        name: "SellerId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Seller") + " " + T("Username"),
      },
      {
        name: "FrameworkContractId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Framework contract"),
        translate: T("FrameworkContract"),
      },
      {
        name: "PartnerSupplierId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Partner supplier"),
      },
      {
        name: "ProjectResourceGroupId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("ProjectResourceGroupProject"),
      },
      {
        name: "WorkplaceId",
        type: "string",
        meType: "meMediumText",
        max: 50,
        allowNull: !0,
        display: T("WorkplaceId"),
      },
      {
        name: "BasicScopeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
      },
      {
        name: "KPIRuleId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("KPI rule"),
      },
      { name: "WOFavorite", type: "boolean", persist: !1 },
    ]*/
@Suppress("unused")
class ProjectLimitedStore (
    val CustomerId : String, //int
    val PriceTypeId : String, //int
    val ProjectResourceGroupId : String, //int
    val KPIRuleId : String, //int
    val WorkplaceId : String, //string
    val ProjectTypeId : String, //int
    val Changed : String, //date
    val ProjectManagerId : String, //int
    val WorkLeaderId : String, //int
    val WOFavorite : String, //boolean
    val Created : String, //date
    val SellerId : String, //int
    val TagField2Id : String, //int
    val CustomerAgentId : String, //int
    val Disabled : String, //boolean
    val CustomerRef : String, //string
    val ProjectName : String, //string
    val MarkupModelId : String, //int
    val CostCenterId : String, //int
    val TagField1Id : String, //int
    val PartnerSupplierId : String, //int
    val ParentProjectId : String, //int
    val BasicScopeId : String, //int
    val Project : String, //string
    val Id : String, //int
    val ChangedId : String, //string
    val ProjectStatusCode : String, //int
    val ProjectNo : String, //string
    val CreatedId : String, //string
    val ProjectStatusId : String, //int
    val FrameworkContractId : String, //int
)

/*
Ext.define("MEM.model.ProjectStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
    ]*/
@Suppress("unused")
class ProjectStatusStore (
    val Id : String, //int
    val Disabled : String, //boolean
    val CreatedId : String, //string
    val StatusCode : String, //int
    val StatusName : String, //string
    val Changed : String, //date
    val StatusColor : String, //string
    val Created : String, //date
    val ChangedId : String, //string
)

/*
Ext.define("MEM.model.UserFavoriteList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "Name", type: "string" },
    ]*/
@Suppress("unused")
class UserFavoriteListStore (
    val CreatedId : String, //string
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val Id : String, //int
    val UserId : String, //int
    val Created : String, //date
    val FavoriteListId : String, //int
    val Changed : String, //date
    val Name : String, //string
)

/*
Ext.define("MEM.model.UserFavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "UserId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
@Suppress("unused")
class UserFavoriteArticleStore (
    val ItemUnitId : String, //int
    val ChangedId : String, //string
    val Disabled : String, //boolean
    val FavoriteListId : String, //int
    val Payoff : String, //bool
    val FullDescription : String, //string
    val Description : String, //string
    val Chargeable : String, //bool
    val UserId : String, //int
    val AccountNo : String, //string
    val Changed : String, //date
    val Created : String, //date
    val ArticleId : String, //int
    val ArticleNo : String, //string
    val CreatedId : String, //string
    val Id : String, //int
)

/*
Ext.define("MEM.model.CustomerFavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
@Suppress("unused")
class CustomerFavoriteArticleStore (
    val Disabled : String, //boolean
    val CustomerId : String, //int
    val Created : String, //date
    val Payoff : String, //bool
    val FavoriteListId : String, //int
    val FullDescription : String, //string
    val Chargeable : String, //bool
    val ItemUnitId : String, //int
    val CreatedId : String, //string
    val Changed : String, //date
    val ArticleNo : String, //string
    val ChangedId : String, //string
    val Id : String, //int
    val Description : String, //string
    val AccountNo : String, //string
    val ArticleId : String, //int
)

/*
Ext.define("MEM.model.FavoriteList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string" },
      { name: "IsCustomerList", type: "bool" },
      { name: "IsGlobal", type: "bool" },
    ]*/
@Suppress("unused")
class FavoriteListStore (
    val Name : String, //string
    val Created : String, //date
    val IsGlobal : String, //bool
    val Disabled : String, //boolean
    val IsCustomerList : String, //bool
    val Id : String, //int
    val Changed : String, //date
    val ChangedId : String, //string
    val CreatedId : String, //string
)

/*
Ext.define("MEM.model.FavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ]*/
@Suppress("unused")
class FavoriteArticleStore (
    val CreatedId : String, //string
    val ArticleId : String, //int
    val Changed : String, //date
    val AccountNo : String, //string
    val FullDescription : String, //string
    val ChangedId : String, //string
    val Created : String, //date
    val ArticleNo : String, //string
    val Chargeable : String, //bool
    val Payoff : String, //bool
    val Disabled : String, //boolean
    val FavoriteListId : String, //int
    val Id : String, //int
    val Description : String, //string
    val ItemUnitId : String, //int
)

