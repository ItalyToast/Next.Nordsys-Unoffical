/* MIT License

Copyright (c) 2022 ItalyToast

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */

// This file is generated by the project found in gen/ 

// Available tables:
// -AdditionalWorkOrderStore
// -AdditionalWorkOrderRowStore
// -AdditionalWorkOrderStatusStore
// -ArticleStore
// -ArticleCustomerStore
// -ChecklistRowStore
// -ConstructionTypeStore
// -CostStore
// -CurrencyStore
// -CustomerStore
// -CustomerContactStore
// -CustomerContactListStore
// -CustomerFavoriteArticleStore
// -CustomerListStore
// -CustomerPricelistItemStore
// -CustomerTypeStore
// -DiaryStore
// -ExternalWorkOrderStatusStore
// -FactoryArticleItemStore
// -FactoryPricelistStore
// -FavoriteArticleStore
// -FavoriteListStore
// -FormValidationStore
// -FrameworkArticleItemStore
// -FrameworkContractStore
// -GroupStore
// -HourlyRateStore
// -InfoMessageStore
// -InfoNoteStore
// -InvoiceStore
// -InvoiceRowStore
// -ItemUnitStore
// -MainMenuStore
// -MarkupModelStore
// -MarkupModelItemStore
// -OfficeCompanyStore
// -OptionValueStore
// -PhraseStore
// -PriceTypeStore
// -ProfessionItemStore
// -ProjectStore
// -ProjectEconomyStore
// -ProjectEconomyBudgetStore
// -ProjectLimitedStore
// -ProjectListStore
// -ProjectOverviewStore
// -ProjectPricelistStore
// -ProjectPricelistItemStore
// -ProjectStatusStore
// -ProjectStatusHistoryStore
// -ProjectTreeStore
// -ProjectTypeStore
// -ResourceStore
// -RevenueStore
// -ServiceCategoryStore
// -SettingStore
// -StaffListStore
// -StaffLogStore
// -StaffPreviousDayStore
// -SupplierStore
// -TagStore
// -TimeStore
// -UserStore
// -UserAccessStore
// -UserFavoriteArticleStore
// -UserFavoriteListStore
// -UserListStore
// -UserPoolWorkOrderListStore
// -UserProjectWorkOrderListStore
// -UserRightStore
// -UserSessionStore
// -UserSettingStore
// -UserWorkOrderListStore
// -VatStore
// -WorkOrderStore
// -WorkOrderAssignedLocationStore
// -WorkOrderContactStore
// -WorkOrderDocumentStore
// -WorkOrderListStore
// -WorkOrderLocationStore
// -WorkOrderRowStore
// -WorkOrderStatusStore
// -WorkOrderStatusRelationsStore

/*
Ext.define("MEM.model.AdditionalWorkOrder", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      {
        name: "WorkOrderNo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      { name: "Addition", type: "bool", meType: "meBool" },
      { name: "Name", type: "string", meType: "meMediumText", max: 50 },
      { name: "WorkDescription", type: "string", meType: "meLongText" },
      { name: "WorkFeedback", type: "string", meType: "meMediumText" },
      {
        name: "WorkplaceAddress",
        type: "string",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "GpsX",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "GpsY",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "District",
        type: "string",
        meType: "meMediumText",
        persist: !1,
        max: 50,
      },
      {
        name: "ResponsibleServiceId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      {
        name: "ResponsibleForemanId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      { name: "CreditRisk", type: "boolean" },
      { name: "CustomerId", type: "int", meType: "meMediumText", useNull: !0 },
      { name: "CustomerName", type: "string" },
      {
        name: "CustomerAgentId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      { name: "ContactName", type: "string", max: 50, persist: !1 },
      {
        name: "CustomerRefNo",
        type: "string",
        meType: "meMediumText",
        persist: !1,
        max: 50,
      },
      {
        name: "WorkOrderStatusId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "ProductionStart",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "ProductionEnd",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "ProductionStartClock",
        type: "date",
        meType: "meTime",
        persist: !1,
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "ProductionEndClock",
        type: "date",
        meType: "meTime",
        persist: !1,
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "OrderDate",
        type: "date",
        meType: "medate",
        dateFormat: "Y-m-d",
      },
      {
        name: "ReportSign",
        type: "string",
        meType: "meShortText",
        persist: !1,
        max: 50,
      },
      {
        name: "ReportTimestamp",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
      },
      {
        name: "Invoiced",
        type: "bool",
        meType: "meBool",
        persist: !1,
        defaultValue: !1,
      },
      {
        name: "InvoiceDate",
        type: "date",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "InvoiceId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        persist: !1,
      },
      {
        name: "CachedWorkCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        persist: !1,
        readOnly: !0,
      },
      {
        name: "CachedWorkRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        persist: !1,
        readOnly: !0,
      },
      { name: "AdditionStatusId", type: "int", meType: "meMediumText" },
      {
        name: "AdditionStatusCode",
        type: "int",
        sortable: !0,
        persist: !1,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyAdditionalWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("AdditionStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "AdditionStatus",
        type: "string",
        sortable: !0,
        persist: !1,
        sortType: "asString",
        convert: function (d, b) {
          var c = Ext.getStore("MyAdditionalWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("AdditionStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusName");
          }
          return "";
        },
      },
      {
        name: "ConstructionTypeId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      {
        name: "BudgetLevelId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "MarkupModelId",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "OrderAmount",
        type: "float",
        meType: "meMoney",
        persist: !1,
        useNull: !0,
      },
      { name: "FixedPrice", type: "bool", meType: "meBool", defaultValue: !0 },
      {
        name: "CostProjectId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "MarkUpTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "TenderTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "BookedCostTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "BookedHoursTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      { name: "PriceTypeId", type: "int", meType: "meMediumText", useNull: !0 },
    ],
  },
});*/
@Suppress("unused")
data class AdditionalWorkOrderStore (
    val Addition : String = "", //bool
    val AdditionStatus : String = "", //string
    val AdditionStatusCode : String = "", //int
    val AdditionStatusId : String = "", //int
    val BookedCostTotal : String? = null, //float
    val BookedHoursTotal : String? = null, //float
    val BudgetLevelId : String = "", //int
    val CachedWorkCost : String? = null, //float
    val CachedWorkRevenue : String? = null, //float
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ConstructionTypeId : String? = null, //int
    val ContactName : String = "", //string
    val CostProjectId : String? = null, //int
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditRisk : String = "", //boolean
    val CustomerAgentId : String? = null, //int
    val CustomerId : String? = null, //int
    val CustomerName : String = "", //string
    val CustomerRefNo : String = "", //string
    val Disabled : String = "", //boolean
    val District : String = "", //string
    val FixedPrice : String = "", //bool
    val GpsX : String? = null, //int
    val GpsY : String? = null, //int
    val Id : String = "", //int
    val InvoiceDate : String? = null, //date
    val InvoiceId : String? = null, //int
    val Invoiced : String = "", //bool
    val MarkUpTotal : String? = null, //float
    val MarkupModelId : String? = null, //int
    val Name : String = "", //string
    val OrderAmount : String? = null, //float
    val OrderDate : String = "", //date
    val PriceTypeId : String? = null, //int
    val ProductionEnd : String? = null, //date
    val ProductionEndClock : String? = null, //date
    val ProductionStart : String? = null, //date
    val ProductionStartClock : String? = null, //date
    val ProjectId : String = "", //int
    val ReportSign : String = "", //string
    val ReportTimestamp : String = "", //string
    val ResponsibleForemanId : String? = null, //int
    val ResponsibleServiceId : String? = null, //int
    val TenderTotal : String? = null, //float
    val WorkDescription : String = "", //string
    val WorkFeedback : String = "", //string
    val WorkOrderNo : String? = null, //int
    val WorkOrderStatusId : String = "", //int
    val WorkplaceAddress : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class AdditionalWorkOrderStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<AdditionalWorkOrderStore> = ArrayList()
)

/*
Ext.define("MEM.model.AdditionalWorkOrderRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Title", type: "string", max: 50 },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "PlannedQty", type: "float" },
      { name: "UsedQty", type: "float" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "Amount", type: "float", defaultValue: 1 },
      { name: "DeliveryDate", type: "date", useNull: !0, persist: !1 },
      { name: "ReturnDate", type: "date", useNull: !0, persist: !1 },
      { name: "PerformedDate", type: "date", useNull: !0, persist: !1 },
      { name: "PerformedUserId", type: "int", useNull: !0, persist: !1 },
      { name: "Comment", type: "string" },
      { name: "RowFormat", type: "string", max: 3, persist: !1 },
      { name: "RowStatus", type: "string", max: 1, persist: !1 },
      { name: "DiaryId", type: "int", persist: !1 },
      { name: "TimeId", type: "int", persist: !1 },
      { name: "Invoiced", type: "bool", persist: !1 },
    ],
  },
});*/
@Suppress("unused")
data class AdditionalWorkOrderRowStore (
    val AccountNo : String = "", //string
    val Amount : String = "", //float
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val CodeNo : String = "", //string
    val Comment : String = "", //string
    val CostUnit : String = "", //float
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val DeliveryDate : String? = null, //date
    val DiaryId : String = "", //int
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val Invoiced : String = "", //bool
    val ItemUnitId : String = "", //int
    val PerformedDate : String? = null, //date
    val PerformedUserId : String? = null, //int
    val PlannedQty : String = "", //float
    val PriceUnit : String = "", //float
    val ReturnDate : String? = null, //date
    val RowFormat : String = "", //string
    val RowStatus : String = "", //string
    val RowType : String = "", //string
    val TimeId : String = "", //int
    val Title : String = "", //string
    val UsedQty : String = "", //float
    val WorkOrderId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class AdditionalWorkOrderRowStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<AdditionalWorkOrderRowStore> = ArrayList()
)

/*
Ext.define("MEM.model.AdditionalWorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
    ],
  },
});*/
@Suppress("unused")
data class AdditionalWorkOrderStatusStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val StatusCode : String = "", //int
    val StatusColor : String = "", //string
    val StatusName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class AdditionalWorkOrderStatusStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<AdditionalWorkOrderStatusStore> = ArrayList()
)

/*
Ext.define("MEM.model.Article", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").getById(a.get("ItemUnitId"));
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      { name: "WorkOrderProjectId", type: "int", useNull: !0 },
      { name: "HasKPIRelation", type: "bool", defaultValue: !1 },
      { name: "IsKPIRecord", type: "bool", defaultValue: !1 },
    ],
  },
  get: function (a) {
    switch (a) {
      case "ArticleId":
        return this.get("Id");
        break;
      default:
        return this.callParent(arguments);
        break;
    }
  },
});
Ext.define("MEM.store.MyArticleStore", {
  extend: MEM.ux.data.MyBaseStore,
  alias: "store.myarticlestorealias",
  config: {
    model: "MEM.model.Article",
    storeId: "MyArticleStore",
    autoLoad: !1,
    autoSync: !1,
    remoteFilter: !1,
    sorters: [{ property: "Description", direction: "ASC" }],
    proxy: { type: "myproxy", url: Me.STORE_URL + "ArticleStore" },
  },
});
Ext.define("MEM.model.ChecklistDiary", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "DiaryId", type: "int", meType: "meMediumText" },
      {
        name: "ItemNo",
        type: "string",
        meType: "meShortText",
        max: 50,
        useNull: !0,
      },
      {
        name: "ItemDescription",
        type: "string",
        meType: "meLongText",
        max: 255,
      },
      { name: "Checked", type: "bool", meType: "meBool" },
      {
        name: "CheckDate",
        type: "date",
        meType: "meDate",
        readOnly: !0,
        dateFormat: "Y-m-d",
      },
      {
        name: "CheckedById",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CheckNote",
        type: "string",
        meType: "meLongText",
        max: 255,
        convert: function (a, b) {
          if (null == a) {
            return "";
          } else {
            return a;
          }
        },
      },
    ],
    validations: [
      { type: "presence", field: "ItemNo" },
      { type: "presence", field: "ItemDescription" },
    ],
  },
});*/
@Suppress("unused")
data class ArticleStore (
    val AccountNo : String = "", //string
    val ArticleCategoryId : String? = null, //int
    val ArticleNo : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Chargeable : String = "", //bool
    val CheckDate : String = "", //date
    val CheckNote : String = "", //string
    val Checked : String = "", //bool
    val CheckedById : String? = null, //int
    val CostUnit : String = "", //float
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditProjectId : String? = null, //int
    val Description : String = "", //string
    val DiaryId : String = "", //int
    val Disabled : String = "", //boolean
    val FullDescription : String = "", //string
    val HasKPIRelation : String = "", //bool
    val Id : String = "", //int
    val IsKPIRecord : String = "", //bool
    val ItemDescription : String = "", //string
    val ItemNo : String? = null, //string
    val ItemUnitId : String = "", //int
    val Payoff : String = "", //bool
    val PriceUnit : String = "", //float
    val WorkOrderId : String? = null, //int
    val WorkOrderProjectId : String? = null, //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ArticleStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ArticleStore> = ArrayList()
)

/*
Ext.define("MEM.model.ArticleCustomer", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore");
          var b;
          b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return a.get("Description") + " (" + b.get("Description") + ")";
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "CustomerId", type: "int" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
  get: function (a) {
    switch (a) {
      case "ArticleId":
        return this.get("Id");
        break;
      default:
        return this.callParent(arguments);
        break;
    }
  },
});
Ext.define("MEM.store.MyArticleCustomerStore", {
  extend: MEM.ux.data.MyBaseStore,
  config: {
    model: "MEM.model.ArticleCustomer",
    storeId: "MyArticleCustomerStore",
    autoLoad: !1,
    autoSync: !1,
    remoteFilter: !1,
    sorters: [{ property: "Description", direction: "ASC" }],
    proxy: { type: "myproxy", url: Me.STORE_URL + "ArticleCustomerStore" },
  },
});
Ext.define("MEM.model.ArticleCategory", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }] },
});*/
@Suppress("unused")
data class ArticleCustomerStore (
    val AccountNo : String = "", //string
    val ArticleNo : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Chargeable : String = "", //bool
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String = "", //int
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val FullDescription : String = "", //string
    val Id : String = "", //int
    val ItemUnitId : String = "", //int
    val Name : String = "", //string
    val Payoff : String = "", //bool
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ArticleCustomerStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ArticleCustomerStore> = ArrayList()
)

/*
Ext.define("MEM.model.ChecklistRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int", meType: "meMediumText" },
      {
        name: "ItemNo",
        type: "string",
        meType: "meShortText",
        max: 50,
        useNull: !0,
      },
      {
        name: "ItemDescription",
        type: "string",
        meType: "meLongText",
        max: 255,
      },
      { name: "Checked", type: "bool", meType: "meBool" },
      {
        name: "CheckDate",
        type: "date",
        meType: "meDate",
        readOnly: !0,
        dateFormat: "Y-m-d",
      },
      {
        name: "CheckedById",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CheckNote",
        type: "string",
        meType: "meLongText",
        max: 255,
        convert: function (a, b) {
          if (null == a) {
            return "";
          } else {
            return a;
          }
        },
      },
    ],
    validations: [
      { type: "presence", field: "ItemNo" },
      { type: "presence", field: "ItemDescription" },
    ],
  },
});*/
@Suppress("unused")
data class ChecklistRowStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val CheckDate : String = "", //date
    val CheckNote : String = "", //string
    val Checked : String = "", //bool
    val CheckedById : String? = null, //int
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val ItemDescription : String = "", //string
    val ItemNo : String? = null, //string
    val WorkOrderId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ChecklistRowStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ChecklistRowStore> = ArrayList()
)

/*
Ext.define("MEM.model.ConstructionType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }] },
});*/
@Suppress("unused")
data class ConstructionTypeStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val TypeName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ConstructionTypeStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ConstructionTypeStore> = ArrayList()
)

/*
Ext.define("MEM.model.Cost", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "VerificationNo", type: "string", max: 50 },
      { name: "TransactionNote", type: "string", max: 255 },
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            if (a.get("Addition")) {
              return AWOpad(a.get("WorkOrderNo"), 3);
            } else {
              return a.get("WorkOrderNo");
            }
          }
          return "";
        },
      },
      {
        name: "WorkOrderName",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            return a.get("Name");
          }
          return "";
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "Invoiceable", type: "bool" },
      { name: "LedgerDate", type: "date" },
      {
        name: "InvoiceAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      {
        name: "CustomerPrice",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      { name: "MarkupAmount", type: "float" },
      { name: "CustomerNo", type: "string", max: 50, useNull: !0 },
      { name: "RevenueTransaction", type: "bool" },
      { name: "Invoiced", type: "bool" },
      { name: "InvoiceId", type: "int", useNull: !0 },
      { name: "TransactionType", type: "string", max: 1 },
      { name: "ExtInvoiceNo", type: "string", max: 20, useNull: !0 },
      { name: "IsScanned", type: "bool" },
      {
        name: "ScannedUrl",
        type: "string",
        max: 255,
        useNull: !0,
        convert: function (b, a) {
          return a.getScannedUrl();
        },
      },
      { name: "SupplierInvoiceId", type: "int", allowNull: !0 },
      { name: "ApprovedByProduction", type: "bool" },
      { name: "Locked", type: "bool" },
      { name: "ExtVerificationId", type: "string", max: 50, useNull: !0 },
      { name: "Notes", type: "string", max: 255, useNull: !0 },
      { name: "Mark1", type: "string", max: 255, useNull: !0 },
      { name: "Mark2", type: "string", max: 255, useNull: !0 },
      {
        name: "VatAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
    ],
  },
});*/
@Suppress("unused")
data class CostStore (
    val AccountNo : String = "", //string
    val ApprovedByProduction : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerNo : String? = null, //string
    val CustomerPrice : String = "", //float
    val Disabled : String = "", //boolean
    val ExtInvoiceNo : String? = null, //string
    val ExtVerificationId : String? = null, //string
    val Id : String = "", //int
    val InvoiceAmount : String = "", //float
    val InvoiceId : String? = null, //int
    val Invoiceable : String = "", //bool
    val Invoiced : String = "", //bool
    val IsScanned : String = "", //bool
    val LedgerDate : String = "", //date
    val Locked : String = "", //bool
    val Mark1 : String? = null, //string
    val Mark2 : String? = null, //string
    val MarkupAmount : String = "", //float
    val Notes : String? = null, //string
    val ProjectId : String = "", //int
    val RevenueTransaction : String = "", //bool
    val ScannedUrl : String? = null, //string
    val SupplierInvoiceId : String = "", //int
    val TransactionNote : String = "", //string
    val TransactionType : String = "", //string
    val VatAmount : String = "", //float
    val VerificationNo : String = "", //string
    val WorkOrderId : String? = null, //int
    val WorkOrderName : String? = null, //int
    val WorkOrderNo : String? = null, //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CostStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CostStore> = ArrayList()
)

/*
Ext.define("MEM.model.Currency", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CurrencyCode", type: "string", max: 3 },
      { name: "Currency", type: "string", max: 50 },
      { name: "Xrate", type: "float" },
      { name: "Base", type: "boolean" },
    ],
  },
});*/
@Suppress("unused")
data class CurrencyStore (
    val Base : String = "", //boolean
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Currency : String = "", //string
    val CurrencyCode : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val Xrate : String = "", //float
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CurrencyStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CurrencyStore> = ArrayList()
)

/*
Ext.define("MEM.model.Customer", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "OrganizationNo", type: "string", max: 15 },
      { name: "BillAddress1", type: "string", max: 50 },
      { name: "BillAddress2", type: "string", max: 50 },
      { name: "BillAddress3", type: "string", max: 50 },
      { name: "BillAddress4", type: "string", max: 50 },
      { name: "BillAddress5", type: "string", max: 50 },
      { name: "BillAddress6", type: "string", max: 50 },
      { name: "Email", type: "string", max: 255 },
      { name: "WebAddress", type: "string", max: 255 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Fax", type: "string", max: 30 },
      { name: "EdiAddress", type: "string", max: 255 },
      { name: "CustomerNote", type: "string" },
      { name: "CustomerName2", type: "string", max: 50 },
      { name: "OrganizationNo2", type: "string", max: 15 },
      { name: "ConstructionCompany", type: "boolean" },
      { name: "SupplierNo", type: "string", max: 50 },
      { name: "CustomerTypeId", type: "int" },
      { name: "CurrencyId", type: "int" },
      { name: "PaymentTermsCode", type: "string", max: 10 },
      { name: "Iban", type: "string", max: 34 },
      { name: "SwiftBic", type: "string", max: 11 },
      { name: "BankName", type: "string", max: 50 },
      { name: "BankAccountNo", type: "string", max: 50 },
      { name: "ClearingNo", type: "string", max: 4 },
      { name: "EanCode", type: "string", max: 50 },
      { name: "VatNo", type: "string", max: 20 },
      { name: "CountryCode", type: "string", max: 2 },
      { name: "PropertyName", type: "string", max: 50 },
      { name: "HousingCooperativeOrgNo", type: "string", max: 15 },
      { name: "ApartmentNo", type: "string", max: 10 },
      { name: "InfoNoteId", type: "int", useNull: !0, persist: !1 },
      { name: "CreditRisk", type: "boolean" },
      { name: "DefaultExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "HasFavorites", type: "boolean" },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
    ],
  },
});*/
@Suppress("unused")
data class CustomerStore (
    val ApartmentNo : String = "", //string
    val BankAccountNo : String = "", //string
    val BankName : String = "", //string
    val BillAddress1 : String = "", //string
    val BillAddress2 : String = "", //string
    val BillAddress3 : String = "", //string
    val BillAddress4 : String = "", //string
    val BillAddress5 : String = "", //string
    val BillAddress6 : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ClearingNo : String = "", //string
    val ConstructionCompany : String = "", //boolean
    val CountryCode : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditRisk : String = "", //boolean
    val CurrencyId : String = "", //int
    val CustomerName : String = "", //string
    val CustomerName2 : String = "", //string
    val CustomerNo : String = "", //string
    val CustomerNote : String = "", //string
    val CustomerTypeId : String = "", //int
    val DefaultExternalWorkOrderStatusId : String? = null, //int
    val Disabled : String = "", //boolean
    val EanCode : String = "", //string
    val EdiAddress : String = "", //string
    val Email : String = "", //string
    val Fax : String = "", //string
    val FrameworkContractId : String? = null, //int
    val HasFavorites : String = "", //boolean
    val HousingCooperativeOrgNo : String = "", //string
    val Iban : String = "", //string
    val Id : String = "", //int
    val InfoNoteId : String? = null, //int
    val Mobile : String = "", //string
    val OrganizationNo : String = "", //string
    val OrganizationNo2 : String = "", //string
    val PaymentTermsCode : String = "", //string
    val Phone : String = "", //string
    val PropertyName : String = "", //string
    val SupplierNo : String = "", //string
    val SwiftBic : String = "", //string
    val VatNo : String = "", //string
    val WebAddress : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CustomerStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CustomerStore> = ArrayList()
)

/*
Ext.define("MEM.model.CustomerContact", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Email", type: "string", max: 50 },
      { name: "OrganizationNo", type: "string", max: 12 },
      { name: "CustomerRef", type: "string", max: 50 },
      { name: "DefaultExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "isSelected", type: "bool", persist: !1, defaultValue: !1 },
    ],
    validations: [{ type: "email", field: "Email" }],
  },
});*/
@Suppress("unused")
data class CustomerContactStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ContactName : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String = "", //int
    val CustomerRef : String = "", //string
    val DefaultExternalWorkOrderStatusId : String? = null, //int
    val Disabled : String = "", //boolean
    val Email : String = "", //string
    val Id : String = "", //int
    val Mobile : String = "", //string
    val OrganizationNo : String = "", //string
    val Phone : String = "", //string
    val isField : String = "", //boolean
    val isSelected : String = "", //bool
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CustomerContactStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CustomerContactStore> = ArrayList()
)

/*
Ext.define("MEM.model.CustomerContactList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerRef", type: "string", max: 50 },
    ],
  },
});*/
@Suppress("unused")
data class CustomerContactListStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ContactName : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String = "", //int
    val CustomerRef : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CustomerContactListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CustomerContactListStore> = ArrayList()
)

/*
Ext.define("MEM.model.CustomerFavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
});*/
@Suppress("unused")
data class CustomerFavoriteArticleStore (
    val AccountNo : String = "", //string
    val ArticleId : String = "", //int
    val ArticleNo : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Chargeable : String = "", //bool
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String = "", //int
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val FavoriteListId : String = "", //int
    val FullDescription : String = "", //string
    val Id : String = "", //int
    val ItemUnitId : String = "", //int
    val Payoff : String = "", //bool
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CustomerFavoriteArticleStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CustomerFavoriteArticleStore> = ArrayList()
)

/*
Ext.define("MEM.model.CustomerList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "CreditRisk", type: "boolean" },
      {
        name: "CustomerId",
        type: "int",
        persist: !1,
        convert: function (b, a) {
          return a.get("Id");
        },
      },
    ],
  },
});*/
@Suppress("unused")
data class CustomerListStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditRisk : String = "", //boolean
    val CustomerId : String = "", //int
    val CustomerName : String = "", //string
    val CustomerNo : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CustomerListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CustomerListStore> = ArrayList()
)

/*
Ext.define("MEM.model.CustomerPricelistItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int", meType: "meMediumText", useNull: !0 },
      {
        name: "ProfessionItemId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      { name: "PriceUnit", type: "float", meType: "meMoney" },
    ],
  },
});*/
@Suppress("unused")
data class CustomerPricelistItemStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String? = null, //int
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val PriceUnit : String = "", //float
    val ProfessionItemId : String? = null, //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CustomerPricelistItemStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CustomerPricelistItemStore> = ArrayList()
)

/*
Ext.define("MEM.model.CustomerType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }] },
});*/
@Suppress("unused")
data class CustomerTypeStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val TypeName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class CustomerTypeStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<CustomerTypeStore> = ArrayList()
)

/*
Ext.define("MEM.model.Diary", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "RegDate", type: "string", meType: "meDate" },
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      { name: "CurrentWork", type: "string", meType: "meMediumText" },
      { name: "FinishedWork", type: "string", meType: "meMediumText" },
      { name: "WorkProblems", type: "string", meType: "meMediumText" },
      { name: "ChangeAdditionNotes", type: "string", meType: "meMediumText" },
      {
        name: "Time1",
        type: "date",
        meType: "meTimeStamp",
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "Time1Display",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
        convert: function (b, a) {
          return a.timeDisplay(b, a, "Time1");
        },
      },
      { name: "Temperature1", type: "float", meType: "meQty" },
      { name: "Precipitation1", type: "string", meType: "meMediumText" },
      {
        name: "Time2",
        type: "date",
        meType: "meTimeStamp",
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "Time2Display",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
        convert: function (b, a) {
          return a.timeDisplay(b, a, "Time2");
        },
      },
      { name: "Temperature2", type: "float", meType: "meQty" },
      { name: "Precipitation2", type: "string", meType: "meMediumText" },
      { name: "WorkforceCount", type: "int", meType: "meInt" },
      { name: "WorkforceNotes", type: "string", meType: "meMediumText" },
      { name: "HasStaffLog", type: "boolean" },
      { name: "UserId", type: "int", useNull: !0 },
      { name: "KPIName", type: "string" },
      { name: "MaterialTemp1", type: "float", meType: "meQty", useNull: !0 },
      { name: "MaterialTemp2", type: "float", meType: "meQty", useNull: !0 },
    ],
  },
});*/
@Suppress("unused")
data class DiaryStore (
    val ChangeAdditionNotes : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CurrentWork : String = "", //string
    val Disabled : String = "", //boolean
    val FinishedWork : String = "", //string
    val HasStaffLog : String = "", //boolean
    val Id : String = "", //int
    val KPIName : String = "", //string
    val MaterialTemp1 : String? = null, //float
    val MaterialTemp2 : String? = null, //float
    val Precipitation1 : String = "", //string
    val Precipitation2 : String = "", //string
    val ProjectId : String = "", //int
    val RegDate : String = "", //string
    val Temperature1 : String = "", //float
    val Temperature2 : String = "", //float
    val Time1 : String = "", //date
    val Time1Display : String = "", //string
    val Time2 : String = "", //date
    val Time2Display : String = "", //string
    val UserId : String? = null, //int
    val WorkProblems : String = "", //string
    val WorkforceCount : String = "", //int
    val WorkforceNotes : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class DiaryStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<DiaryStore> = ArrayList()
)

/*
Ext.define("MEM.model.ExternalWorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "IsDefaultStatus", type: "bool", defaultValue: !1 },
      { name: "IsSignatureStatus", type: "bool", defaultValue: !1 },
    ],
  },
});*/
@Suppress("unused")
data class ExternalWorkOrderStatusStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val IsDefaultStatus : String = "", //bool
    val IsSignatureStatus : String = "", //bool
    val StatusCode : String = "", //int
    val StatusColor : String = "", //string
    val StatusName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ExternalWorkOrderStatusStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ExternalWorkOrderStatusStore> = ArrayList()
)

/*
Ext.define("MEM.model.FactoryArticleItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FactoryPricelistId", type: "int" },
      { name: "ArticleId", type: "int", useNull: !0 },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").findRecord(
            "Id",
            a.get("ItemUnitId")
          );
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
    ],
  },
});*/
@Suppress("unused")
data class FactoryArticleItemStore (
    val AccountNo : String = "", //string
    val ArticleId : String? = null, //int
    val ArticleNo : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val CostUnit : String = "", //float
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val FactoryPricelistId : String = "", //int
    val FullDescription : String = "", //string
    val Id : String = "", //int
    val ItemUnitId : String = "", //int
    val PriceUnit : String = "", //float
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class FactoryArticleItemStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<FactoryArticleItemStore> = ArrayList()
)

/*
Ext.define("MEM.model.FactoryPricelist", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }] },
});*/
@Suppress("unused")
data class FactoryPricelistStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val Name : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class FactoryPricelistStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<FactoryPricelistStore> = ArrayList()
)

/*
Ext.define("MEM.model.FavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
});*/
@Suppress("unused")
data class FavoriteArticleStore (
    val AccountNo : String = "", //string
    val ArticleId : String = "", //int
    val ArticleNo : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Chargeable : String = "", //bool
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val FavoriteListId : String = "", //int
    val FullDescription : String = "", //string
    val Id : String = "", //int
    val ItemUnitId : String = "", //int
    val Payoff : String = "", //bool
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class FavoriteArticleStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<FavoriteArticleStore> = ArrayList()
)

/*
Ext.define("MEM.model.FavoriteList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string" },
      { name: "IsCustomerList", type: "bool" },
      { name: "IsGlobal", type: "bool" },
    ],
  },
});*/
@Suppress("unused")
data class FavoriteListStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val IsCustomerList : String = "", //bool
    val IsGlobal : String = "", //bool
    val Name : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class FavoriteListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<FavoriteListStore> = ArrayList()
)

/*
Ext.define("MEM.model.FormValidation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StoreName", type: "string", max: 50 },
      { name: "FieldName", type: "string", max: 50 },
      { name: "AllowBlank", type: "boolean" },
      { name: "ValidationType", type: "string", max: 50 },
      { name: "RegEx", type: "string", max: 1000 },
      { name: "Hidden", type: "boolean" },
    ],
  },
});*/
@Suppress("unused")
data class FormValidationStore (
    val AllowBlank : String = "", //boolean
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val FieldName : String = "", //string
    val Hidden : String = "", //boolean
    val Id : String = "", //int
    val RegEx : String = "", //string
    val StoreName : String = "", //string
    val ValidationType : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class FormValidationStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<FormValidationStore> = ArrayList()
)

/*
Ext.define("MEM.model.FrameworkArticleItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FrameworkContractId", type: "int" },
      { name: "ArticleId", type: "int", useNull: !0 },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").getById(a.get("ItemUnitId"));
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
});*/
@Suppress("unused")
data class FrameworkArticleItemStore (
    val AccountNo : String = "", //string
    val ArticleCategoryId : String? = null, //int
    val ArticleId : String? = null, //int
    val ArticleNo : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Chargeable : String = "", //bool
    val CostUnit : String = "", //float
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditProjectId : String? = null, //int
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val FrameworkContractId : String = "", //int
    val FullDescription : String = "", //string
    val Id : String = "", //int
    val ItemUnitId : String = "", //int
    val Payoff : String = "", //bool
    val PriceUnit : String = "", //float
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class FrameworkArticleItemStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<FrameworkArticleItemStore> = ArrayList()
)

/*
Ext.define("MEM.model.FrameworkContract", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string", max: 50 },
      { name: "CustomerId", type: "int" },
      { name: "LimitArticles", type: "bool" },
    ],
  },
});*/
@Suppress("unused")
data class FrameworkContractStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String = "", //int
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val LimitArticles : String = "", //bool
    val Name : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class FrameworkContractStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<FrameworkContractStore> = ArrayList()
)

/*
Ext.define("MEM.model.Group", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "GroupName", type: "string", max: 50 }] },
});*/
@Suppress("unused")
data class GroupStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val GroupName : String = "", //string
    val Id : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class GroupStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<GroupStore> = ArrayList()
)

/*
Ext.define("MEM.model.HourlyRate", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProfessionItemId", type: "int" },
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionDescription", type: "string", max: 50 },
      { name: "PriceUnit", type: "float" },
      { name: "UnitName", type: "string", max: 50 },
      { name: "CustomerPrice", type: "float" },
      { name: "ProjectPrice", type: "float" },
    ],
  },
});*/
@Suppress("unused")
data class HourlyRateStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerPrice : String = "", //float
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val PriceUnit : String = "", //float
    val ProfessionCode : String = "", //string
    val ProfessionDescription : String = "", //string
    val ProfessionItemId : String = "", //int
    val ProjectPrice : String = "", //float
    val UnitName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class HourlyRateStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<HourlyRateStore> = ArrayList()
)

/*
Ext.define("MEM.model.InfoMessage", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Date",
        type: "string",
        convert: function (b, a) {
          return Ext.Date.format(a.get("Created"), "Y-m-d");
        },
      },
      { name: "Message", type: "string" },
      { name: "ShowInMobile", type: "bool" },
      { name: "GroupId", type: "int" },
    ],
  },
});*/
@Suppress("unused")
data class InfoMessageStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Date : String = "", //string
    val Disabled : String = "", //boolean
    val GroupId : String = "", //int
    val Id : String = "", //int
    val Message : String = "", //string
    val ShowInMobile : String = "", //bool
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class InfoMessageStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<InfoMessageStore> = ArrayList()
)

/*
Ext.define("MEM.model.InfoNote", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "TableName", type: "string", max: 50 },
      { name: "TableId", type: "int" },
      { name: "UserId", type: "int" },
      { name: "Note", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class InfoNoteStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val Note : String = "", //string
    val TableId : String = "", //int
    val TableName : String = "", //string
    val UserId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class InfoNoteStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<InfoNoteStore> = ArrayList()
)

/*
Ext.define("MEM.model.Invoice", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "InvoiceId", type: "int" },
      { name: "RowNo", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      { name: "Unit", type: "string", max: 5 },
      { name: "Amount", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "Markup", type: "int" },
      {
        name: "TotalPrice",
        type: "float",
        persist: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("Amount") * a.get("PriceUnit");
        },
      },
      { name: "RowFormat", type: "string" },
    ],
    validations: [
      {
        type: "custom",
        field: "InvoiceTotal",
        validate: function (b, a) {
          return a.get("TaxReductionAmount") <= b;
        },
        message:
          "Tax Reduction Amount should be less or equeal to Invoice Total value.",
      },
    ],
  },
});*/
@Suppress("unused")
data class InvoiceStore (
    val Amount : String = "", //int
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val CodeNo : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val InvoiceId : String = "", //int
    val Markup : String = "", //int
    val PriceUnit : String = "", //float
    val RowFormat : String = "", //string
    val RowNo : String = "", //int
    val RowType : String = "", //string
    val TotalPrice : String = "", //float
    val Unit : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class InvoiceStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<InvoiceStore> = ArrayList()
)

/*
Ext.define("MEM.model.InvoiceRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "InvoiceId", type: "int" },
      { name: "RowNo", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      { name: "Unit", type: "string", max: 5 },
      { name: "Amount", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "Markup", type: "int" },
      {
        name: "TotalPrice",
        type: "float",
        persist: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("Amount") * a.get("PriceUnit");
        },
      },
      { name: "RowFormat", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class InvoiceRowStore (
    val Amount : String = "", //int
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val CodeNo : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val InvoiceId : String = "", //int
    val Markup : String = "", //int
    val PriceUnit : String = "", //float
    val RowFormat : String = "", //string
    val RowNo : String = "", //int
    val RowType : String = "", //string
    val TotalPrice : String = "", //float
    val Unit : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class InvoiceRowStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<InvoiceRowStore> = ArrayList()
)

/*
Ext.define("MEM.model.ItemUnit", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UnitName", type: "string", max: 10 },
      { name: "Description", type: "string", max: 10 },
    ],
  },
});*/
@Suppress("unused")
data class ItemUnitStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val UnitName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ItemUnitStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ItemUnitStore> = ArrayList()
)

/*
Ext.define("MEM.model.MainMenu", {
  extend: Ext.data.Model,
  config: {
    fields: [
      { name: "MenuText" },
      { name: "ShortMenuText" },
      { name: "View" },
      { name: "Store" },
      { name: "Active" },
      { name: "Picto" },
      { name: "Title" },
    ],
  },
});*/
@Suppress("unused")
data class MainMenuStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class MainMenuStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<MainMenuStore> = ArrayList()
)

/*
Ext.define("MEM.model.MarkupModel", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string", max: 50 },
      { name: "Code", type: "string", max: 10 },
    ],
  },
});*/
@Suppress("unused")
data class MarkupModelStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Code : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val Name : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class MarkupModelStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<MarkupModelStore> = ArrayList()
)

/*
Ext.define("MEM.model.MarkupModelItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "MarkupModelId", type: "int" },
      { name: "ResourceAccount", type: "string", max: 5 },
      { name: "Description", type: "string", max: 50 },
      { name: "MarkupCF", type: "int" },
    ],
  },
});*/
@Suppress("unused")
data class MarkupModelItemStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val MarkupCF : String = "", //int
    val MarkupModelId : String = "", //int
    val ResourceAccount : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class MarkupModelItemStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<MarkupModelItemStore> = ArrayList()
)

/*
Ext.define("MEM.model.OfficeCompany", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CompanyName", type: "string" },
      { name: "AbsenceProjectId", type: "int" },
    ],
  },
});*/
@Suppress("unused")
data class OfficeCompanyStore (
    val AbsenceProjectId : String = "", //int
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val CompanyName : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class OfficeCompanyStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<OfficeCompanyStore> = ArrayList()
)

/*
Ext.define("MEM.model.OptionValue", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "SettingKey", type: "string", max: 50 },
      { name: "SettingValue", type: "string" },
      { name: "SettingDescription", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class OptionValueStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val SettingDescription : String = "", //string
    val SettingKey : String = "", //string
    val SettingValue : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class OptionValueStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<OptionValueStore> = ArrayList()
)

/*
Ext.define("MEM.model.Phrase", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Phrase",
        type: "string",
        meType: "meMediumText",
        display: T("Phrasetext"),
      },
    ],
  },
});*/
@Suppress("unused")
data class PhraseStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val Phrase : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class PhraseStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<PhraseStore> = ArrayList()
)

/*
Ext.define("MEM.model.PriceType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }] },
});*/
@Suppress("unused")
data class PriceTypeStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val TypeName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class PriceTypeStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<PriceTypeStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProfessionItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionDescription", type: "string", max: 50 },
      { name: "ItemUnitId", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "SalaryNo", type: "string", max: 10 },
      { name: "CostUnit", type: "float" },
      { name: "ProfessionGroup", type: "string", max: 50 },
      { name: "Chargeable", type: "bool" },
    ],
  },
});*/
@Suppress("unused")
data class ProfessionItemStore (
    val AccountNo : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Chargeable : String = "", //bool
    val CostUnit : String = "", //float
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val ItemUnitId : String = "", //int
    val PriceUnit : String = "", //float
    val ProfessionCode : String = "", //string
    val ProfessionDescription : String = "", //string
    val ProfessionGroup : String = "", //string
    val SalaryNo : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProfessionItemStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProfessionItemStore> = ArrayList()
)

/*
Ext.define("MEM.model.Project", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ParentProjectId", type: "int", allowBlank: !1, useNull: !0 },
      { name: "ProjectNo", type: "int", persist: !1, sortType: "asInt" },
      { name: "ProjectStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50, allowBlank: !1 },
      { name: "PriceTypeId", type: "int" },
      { name: "ProjectTypeId", type: "int" },
      { name: "ProjectManagerId", type: "int" },
      { name: "WorkLeaderId", type: "int" },
      { name: "TagField1Id", type: "int", useNull: !0 },
      { name: "TagField2Id", type: "int", useNull: !0 },
      { name: "ProjectNote", type: "string", useNull: !0 },
      { name: "CustomerId", type: "int", useNull: !0 },
      { name: "CustomerName", type: "string" },
      { name: "CreditRisk", type: "boolean" },
      { name: "ContactName", type: "string" },
      { name: "CustomerAgentId", type: "int", useNull: !0 },
      { name: "CustomerRef", type: "string", max: 50 },
      { name: "ProjectStart", type: "date", dateFormat: "Y-m-d" },
      { name: "ProjectEnd", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "MarkupModelId", type: "int", allowBlank: !1 },
      { name: "WorkplaceAddress1", type: "string", max: 50 },
      { name: "WorkplaceAddress2", type: "string", max: 50 },
      { name: "WorkplaceZipcode", type: "string", max: 50 },
      { name: "WorkplaceCity", type: "string", max: 50 },
      { name: "WorkplaceDistance", type: "int" },
      { name: "FinalInspectionDate", type: "date", dateFormat: "Y-m-d" },
      { name: "GuaranteeTime", type: "int" },
      { name: "GuaranteeInspectionDate", type: "date", dateFormat: "Y-m-d" },
      { name: "WOFavorite", type: "boolean", persist: !1 },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
    ],
  },
});*/
@Suppress("unused")
data class ProjectStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ContactName : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditRisk : String = "", //boolean
    val CustomerAgentId : String? = null, //int
    val CustomerId : String? = null, //int
    val CustomerName : String = "", //string
    val CustomerRef : String = "", //string
    val Disabled : String = "", //boolean
    val FinalInspectionDate : String = "", //date
    val FrameworkContractId : String? = null, //int
    val GuaranteeInspectionDate : String = "", //date
    val GuaranteeTime : String = "", //int
    val Id : String = "", //int
    val MarkupModelId : String = "", //int
    val ParentProjectId : String? = null, //int
    val PriceTypeId : String = "", //int
    val ProjectEnd : String? = null, //date
    val ProjectManagerId : String = "", //int
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //int
    val ProjectNote : String? = null, //string
    val ProjectStart : String = "", //date
    val ProjectStatusId : String = "", //int
    val ProjectTypeId : String = "", //int
    val TagField1Id : String? = null, //int
    val TagField2Id : String? = null, //int
    val WOFavorite : String = "", //boolean
    val WorkLeaderId : String = "", //int
    val WorkplaceAddress1 : String = "", //string
    val WorkplaceAddress2 : String = "", //string
    val WorkplaceCity : String = "", //string
    val WorkplaceDistance : String = "", //int
    val WorkplaceZipcode : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectEconomy", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "LineType", type: "int" },
      { name: "Cost", type: "float" },
      { name: "Revenue", type: "float" },
      { name: "ContributionMargin", type: "float" },
      { name: "ContributionMarginPercent", type: "float" },
    ],
  },
});*/
@Suppress("unused")
data class ProjectEconomyStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ContributionMargin : String = "", //float
    val ContributionMarginPercent : String = "", //float
    val Cost : String = "", //float
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val LineType : String = "", //int
    val ProjectId : String = "", //int
    val Revenue : String = "", //float
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectEconomyStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectEconomyStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectEconomyBudget", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "BudgetCost", type: "float" },
      { name: "BudgetRevenue", type: "float" },
    ],
  },
});*/
@Suppress("unused")
data class ProjectEconomyBudgetStore (
    val BudgetCost : String = "", //float
    val BudgetRevenue : String = "", //float
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val ProjectId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectEconomyBudgetStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectEconomyBudgetStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectLimited", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Project",
        type: "string",
        convert: function (b, a) {
          return a.data.ProjectNo + ", " + a.data.ProjectName;
        },
      },
      {
        name: "ParentProjectId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Parent Project No"),
      },
      {
        name: "ProjectNo",
        type: "string",
        meType: "meShortText",
        max: 10,
        persist: !0,
        display: T("Project No"),
      },
      {
        name: "ProjectStatusId",
        type: "int",
        meType: "meMediumText",
        display: T("Project status") + T("Code"),
      },
      {
        name: "ProjectStatusCode",
        type: "int",
        meType: "meMediumText",
        display: T("Project status") + T("Code"),
      },
      {
        name: "ProjectName",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Project Name"),
      },
      {
        name: "PriceTypeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Pricetype") + T("Code"),
      },
      {
        name: "ProjectTypeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Project type") + T("Code"),
      },
      {
        name: "ProjectManagerId",
        type: "int",
        meType: "meMediumText",
        display: T("Project manager") + " " + T("Username"),
      },
      {
        name: "WorkLeaderId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Work leader") + " " + T("Username"),
      },
      {
        name: "TagField1Id",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Tag field 1"),
      },
      {
        name: "TagField2Id",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Tag field 2"),
      },
      {
        name: "CustomerId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Customer no"),
      },
      {
        name: "CustomerAgentId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Customer Contact"),
      },
      {
        name: "CustomerRef",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Customer ref."),
      },
      {
        name: "MarkupModelId",
        type: "int",
        meType: "meShortText",
        display: T("Markup model"),
      },
      {
        name: "CostCenterId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Costcenter"),
      },
      {
        name: "SellerId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Seller") + " " + T("Username"),
      },
      {
        name: "FrameworkContractId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Framework contract"),
        translate: T("FrameworkContract"),
      },
      {
        name: "PartnerSupplierId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Partner supplier"),
      },
      {
        name: "ProjectResourceGroupId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("ProjectResourceGroupProject"),
      },
      {
        name: "WorkplaceId",
        type: "string",
        meType: "meMediumText",
        max: 50,
        allowNull: !0,
        display: T("WorkplaceId"),
      },
      {
        name: "BasicScopeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
      },
      {
        name: "KPIRuleId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("KPI rule"),
      },
      { name: "WOFavorite", type: "boolean", persist: !1 },
    ],
  },
});*/
@Suppress("unused")
data class ProjectLimitedStore (
    val BasicScopeId : String = "", //int
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val CostCenterId : String = "", //int
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerAgentId : String = "", //int
    val CustomerId : String = "", //int
    val CustomerRef : String = "", //string
    val Disabled : String = "", //boolean
    val FrameworkContractId : String = "", //int
    val Id : String = "", //int
    val KPIRuleId : String = "", //int
    val MarkupModelId : String = "", //int
    val ParentProjectId : String = "", //int
    val PartnerSupplierId : String = "", //int
    val PriceTypeId : String = "", //int
    val Project : String = "", //string
    val ProjectManagerId : String = "", //int
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //string
    val ProjectResourceGroupId : String = "", //int
    val ProjectStatusCode : String = "", //int
    val ProjectStatusId : String = "", //int
    val ProjectTypeId : String = "", //int
    val SellerId : String = "", //int
    val TagField1Id : String = "", //int
    val TagField2Id : String = "", //int
    val WOFavorite : String = "", //boolean
    val WorkLeaderId : String = "", //int
    val WorkplaceId : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectLimitedStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectLimitedStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusId", type: "int" },
      {
        name: "ProjectStatus",
        type: "string",
        sortable: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyProjectStatusStore"),
            a;
          a = c.findRecord("Id", b.get("ProjectStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusName");
          }
          return "";
        },
      },
      { name: "CustomerId", type: "int" },
      { name: "WorkplaceId", type: "string" },
      { name: "StatusCode", type: "string", sortType: "asInt" },
      { name: "ProjectName", type: "string" },
      { name: "ProjectNo", type: "string", sortType: "asInt" },
      {
        name: "Project",
        type: "string",
        convert: function (b, a) {
          return a.data.ProjectNo + ", " + a.data.ProjectName;
        },
      },
      { name: "SecReadOnly", type: "bool", persist: !1 },
      { name: "Piecework", type: "bool", persist: !1 },
      { name: "KPIRuleId", type: "int", useNull: !0 },
    ],
  },
});*/
@Suppress("unused")
data class ProjectListStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String = "", //int
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val KPIRuleId : String? = null, //int
    val Piecework : String = "", //bool
    val Project : String = "", //string
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //string
    val ProjectStatus : String = "", //string
    val ProjectStatusId : String = "", //int
    val SecReadOnly : String = "", //bool
    val StatusCode : String = "", //string
    val WorkplaceId : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectListStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectOverview", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "ProjectId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectNo",
        type: "string",
        meType: "meShortText",
        max: 10,
        readOnly: !0,
      },
      {
        name: "ProjectName",
        type: "string",
        meType: "meMediumText",
        max: 50,
        readOnly: !0,
      },
      {
        name: "TagField1Id",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "TagField2Id",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectManagerId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectStart",
        type: "date",
        meType: "meDate",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectEnd",
        type: "date",
        meType: "meDate",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CustomerId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectStatusId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "BudgetRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "BookedCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BookedRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "BudgetRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "ContributionMarginAmount",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginPercent",
        type: "int",
        meType: "mePercent",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetHours",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BookedHours",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkOrderCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkOrderRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginWO",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "SLPCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "SLPRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginAmountSLP",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginPercentSLP",
        type: "int",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkCostWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("WorkCost") * Me.Moms;
        },
      },
      {
        name: "MaterialCost",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "MaterialCost",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("MaterialCost") * Me.Moms;
        },
      },
      {
        name: "EarnedRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "EarnedRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "EarnedRevenueNotInvoiced",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "EarnedRevenueNotInvoicedWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenueNotInvoiced") * Me.Moms;
        },
      },
    ],
  },
});*/
@Suppress("unused")
data class ProjectOverviewStore (
    val BookedCost : String? = null, //float
    val BookedHours : String? = null, //int
    val BookedRevenue : String? = null, //float
    val BudgetCost : String? = null, //float
    val BudgetHours : String? = null, //int
    val BudgetRevenue : String? = null, //float
    val BudgetRevenueWithTax : String? = null, //float
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ContributionMarginAmount : String? = null, //float
    val ContributionMarginAmountSLP : String? = null, //float
    val ContributionMarginPercent : String? = null, //int
    val ContributionMarginPercentSLP : String? = null, //int
    val ContributionMarginWO : String? = null, //float
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String? = null, //int
    val Disabled : String = "", //boolean
    val EarnedRevenue : String? = null, //float
    val EarnedRevenueNotInvoiced : String? = null, //float
    val EarnedRevenueNotInvoicedWithTax : String? = null, //float
    val EarnedRevenueWithTax : String? = null, //float
    val Id : String = "", //int
    val MaterialCost : String? = null, //float
    val ProjectEnd : String? = null, //date
    val ProjectId : String? = null, //int
    val ProjectManagerId : String? = null, //int
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //string
    val ProjectStart : String? = null, //date
    val ProjectStatusId : String? = null, //int
    val SLPCost : String? = null, //float
    val SLPRevenue : String? = null, //float
    val TagField1Id : String? = null, //int
    val TagField2Id : String? = null, //int
    val WorkCost : String? = null, //float
    val WorkCostWithTax : String? = null, //float
    val WorkOrderCost : String? = null, //float
    val WorkOrderRevenue : String? = null, //float
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectOverviewStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectOverviewStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectPricelist", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ServiceCarPriceDay", type: "float" },
      { name: "ServiceCarPriceKm", type: "float" },
    ],
  },
});*/
@Suppress("unused")
data class ProjectPricelistStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val ProjectId : String = "", //int
    val ServiceCarPriceDay : String = "", //float
    val ServiceCarPriceKm : String = "", //float
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectPricelistStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectPricelistStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectPricelistItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText", useNull: !0 },
      {
        name: "ProfessionItemId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      { name: "PriceUnit", type: "float", meType: "meMoney" },
    ],
  },
});*/
@Suppress("unused")
data class ProjectPricelistItemStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val PriceUnit : String = "", //float
    val ProfessionItemId : String? = null, //int
    val ProjectId : String? = null, //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectPricelistItemStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectPricelistItemStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
    ],
  },
});*/
@Suppress("unused")
data class ProjectStatusStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val StatusCode : String = "", //int
    val StatusColor : String = "", //string
    val StatusName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectStatusStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectStatusStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectStatusHistory", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusHistoryId", type: "int" },
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "FullName", type: "string", max: 50 },
    ],
  },
});*/
@Suppress("unused")
data class ProjectStatusHistoryStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val Id : String = "", //int
    val ProjectId : String = "", //int
    val ProjectStatusHistoryId : String = "", //int
    val StatusCode : String = "", //int
    val StatusColor : String = "", //string
    val StatusName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectStatusHistoryStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectStatusHistoryStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectTree", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusId", type: "int" },
      { name: "ProjectName", type: "string" },
      { name: "ProjectNo", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class ProjectTreeStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //string
    val ProjectStatusId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectTreeStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectTreeStore> = ArrayList()
)

/*
Ext.define("MEM.model.ProjectType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }] },
});*/
@Suppress("unused")
data class ProjectTypeStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val TypeName : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ProjectTypeStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ProjectTypeStore> = ArrayList()
)

/*
Ext.define("MEM.model.Resource", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ResourceNo", type: "string", max: 20 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (b, a) {
          return a.get("ResourceNo") + " " + a.get("Description");
        },
      },
      { name: "CreditProjectId", type: "int" },
      { name: "CreditProjectNo", type: "string" },
      { name: "CreditProjectName", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class ResourceStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditProjectId : String = "", //int
    val CreditProjectName : String = "", //string
    val CreditProjectNo : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val FullDescription : String = "", //string
    val Id : String = "", //int
    val ResourceNo : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ResourceStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ResourceStore> = ArrayList()
)

/*
Ext.define("MEM.model.Revenue", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "VerificationNo", type: "string", max: 50, readOnly: !0 },
      { name: "TransactionNote", type: "string", max: 255 },
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            if (a.get("Addition")) {
              return AWOpad(a.get("WorkOrderNo"), 3);
            } else {
              return a.get("WorkOrderNo");
            }
          }
          return "";
        },
      },
      {
        name: "WorkOrderName",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            return a.get("Name");
          }
          return "";
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "Invoiceable", type: "bool" },
      { name: "LedgerDate", type: "date" },
      {
        name: "InvoiceAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      {
        name: "CustomerPrice",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      { name: "MarkupAmount", type: "float" },
      { name: "CustomerNo", type: "string", max: 50, useNull: !0 },
      { name: "RevenueTransaction", type: "bool" },
      { name: "Invoiced", type: "bool" },
      { name: "InvoiceId", type: "int", useNull: !0 },
      { name: "TransactionType", type: "string", max: 1 },
      { name: "ExtInvoiceNo", type: "string", max: 20, useNull: !0 },
      { name: "IsScanned", type: "bool" },
      {
        name: "ScannedUrl",
        type: "string",
        max: 255,
        useNull: !0,
        convert: function (b, a) {
          return a.getScannedUrl();
        },
      },
      { name: "SupplierInvoiceId", type: "int", allowNull: !0 },
      { name: "ApprovedByProduction", type: "bool" },
      { name: "Locked", type: "bool" },
      { name: "ExtVerificationId", type: "string", max: 50, useNull: !0 },
      { name: "Notes", type: "string", max: 255, useNull: !0 },
      { name: "Mark1", type: "string", max: 255, useNull: !0 },
      { name: "Mark2", type: "string", max: 255, useNull: !0 },
    ],
  },
});*/
@Suppress("unused")
data class RevenueStore (
    val AccountNo : String = "", //string
    val ApprovedByProduction : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerNo : String? = null, //string
    val CustomerPrice : String = "", //float
    val Disabled : String = "", //boolean
    val ExtInvoiceNo : String? = null, //string
    val ExtVerificationId : String? = null, //string
    val Id : String = "", //int
    val InvoiceAmount : String = "", //float
    val InvoiceId : String? = null, //int
    val Invoiceable : String = "", //bool
    val Invoiced : String = "", //bool
    val IsScanned : String = "", //bool
    val LedgerDate : String = "", //date
    val Locked : String = "", //bool
    val Mark1 : String? = null, //string
    val Mark2 : String? = null, //string
    val MarkupAmount : String = "", //float
    val Notes : String? = null, //string
    val ProjectId : String = "", //int
    val RevenueTransaction : String = "", //bool
    val ScannedUrl : String? = null, //string
    val SupplierInvoiceId : String = "", //int
    val TransactionNote : String = "", //string
    val TransactionType : String = "", //string
    val VerificationNo : String = "", //string
    val WorkOrderId : String? = null, //int
    val WorkOrderName : String? = null, //int
    val WorkOrderNo : String? = null, //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class RevenueStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<RevenueStore> = ArrayList()
)

/*
Ext.define("MEM.model.ServiceCategory", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }] },
});*/
@Suppress("unused")
data class ServiceCategoryStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val Name : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class ServiceCategoryStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<ServiceCategoryStore> = ArrayList()
)

/*
Ext.define("MEM.model.Setting", {
  extend: Ext.data.Model,
  config: { fields: [{ name: "Name" }, { name: "Value" }] },
});*/
@Suppress("unused")
data class SettingStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class SettingStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<SettingStore> = ArrayList()
)

/*
Ext.define("MEM.model.StaffList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "DiaryId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "CustomerName", type: "string" },
      { name: "FullName", type: "string" },
      { name: "IdNo", type: "string" },
      { name: "Origin", type: "string", useNull: !0 },
      { name: "OriginId", type: "int" },
      { name: "isEmployee", type: "bool" },
      { name: "LogId", type: "int" },
      { name: "CheckedIn", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedInTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedIn");
        },
      },
      { name: "CheckedOut", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedOutTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedOut");
        },
      },
      {
        name: "Present",
        type: "string",
        convert: function (b, a) {
          if (a.data.CheckedIn == null || a.data.CheckedOut != null) {
            return "red";
          } else {
            return "green";
          }
        },
      },
    ],
  },
  set: function (a, b) {
    this.callParent(arguments);
    switch (a) {
      case "CheckedIn":
        this.set("CheckedInTime", "");
        this.set("Present", "");
        break;
      case "CheckedOut":
        this.set("CheckedOutTime", "");
        this.set("Present", "");
        break;
    }
  },
});
Ext.define("MEM.store.MyStaffListStore", {
  extend: MEM.ux.data.MyBaseStore,
  alias: "store.mystaffliststorealias",
  config: {
    model: "MEM.model.StaffList",
    storeId: "MyStaffListStore",
    autoLoad: !1,
    sorters: [
      { property: "isEmployee" },
      { property: "CustomerName" },
      { property: "FullName" },
    ],
    grouper: {
      groupFn: function (a) {
        if (a.get("isEmployee") == !0) {
          return T("Own Staff");
        } else {
          return a.get("CustomerName");
        }
      },
      sortProperty: "isEmployee",
      direction: "DESC",
    },
    proxy: { type: "myproxy", url: Me.STORE_URL + "StaffListStore" },
  },
});
Ext.define("MEM.model.StatusHistory", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusHistoryId", type: "int" },
      { name: "StatusName", type: "string", max: 50 },
      { name: "FullName", type: "string", max: 50 },
      { name: "Changed", type: "data" },
    ],
  },
});*/
@Suppress("unused")
data class StaffListStore (
    val Changed : String = "", //data
    val ChangedId : String = "", //string
    val CheckedIn : String = "", //date
    val CheckedInTime : String = "", //string
    val CheckedOut : String = "", //date
    val CheckedOutTime : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String = "", //int
    val CustomerName : String = "", //string
    val DiaryId : String = "", //int
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val Id : String = "", //int
    val IdNo : String = "", //string
    val LogId : String = "", //int
    val Origin : String? = null, //string
    val OriginId : String = "", //int
    val Present : String = "", //string
    val ProjectId : String = "", //int
    val ProjectStatusHistoryId : String = "", //int
    val StatusName : String = "", //string
    val isEmployee : String = "", //bool
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class StaffListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<StaffListStore> = ArrayList()
)

/*
Ext.define("MEM.model.StaffLog", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "Created", type: "string", dateFormat: "time" },
      { name: "CreatedId", type: "int" },
      { name: "Changed", type: "string", dateFormat: "time" },
      { name: "ChangedId", type: "int" },
      { name: "DiaryId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "IdNo", type: "string" },
      { name: "Origin", type: "string", useNull: !0 },
      { name: "OriginId", type: "int" },
      { name: "CheckedIn", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedInTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedIn");
        },
      },
      { name: "CheckedOut", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      { name: "FullName", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class StaffLogStore (
    val Changed : String = "", //string
    val ChangedId : String = "", //int
    val CheckedIn : String = "", //date
    val CheckedInTime : String = "", //string
    val CheckedOut : String = "", //date
    val Created : String = "", //string
    val CreatedId : String = "", //int
    val CreatedName : String = "", //string
    val DiaryId : String = "", //int
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val Id : String = "", //int
    val IdNo : String = "", //string
    val Origin : String? = null, //string
    val OriginId : String = "", //int
    val ProjectId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class StaffLogStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<StaffLogStore> = ArrayList()
)

/*
Ext.define("MEM.model.StaffPreviousDay", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "Created", type: "string", dateFormat: "time" },
      { name: "CreatedId", type: "int" },
      { name: "Changed", type: "string", dateFormat: "time" },
      { name: "ChangedId", type: "int" },
      { name: "IdNo", type: "string" },
      { name: "DiaryId", type: "int" },
      { name: "ProjectId", type: "int" },
    ],
  },
});*/
@Suppress("unused")
data class StaffPreviousDayStore (
    val Changed : String = "", //string
    val ChangedId : String = "", //int
    val Created : String = "", //string
    val CreatedId : String = "", //int
    val CreatedName : String = "", //string
    val DiaryId : String = "", //int
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val IdNo : String = "", //string
    val ProjectId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class StaffPreviousDayStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<StaffPreviousDayStore> = ArrayList()
)

/*
Ext.define("MEM.model.Supplier", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "OrganizationNo", type: "string", max: 15 },
    ],
  },
});*/
@Suppress("unused")
data class SupplierStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerName : String = "", //string
    val CustomerNo : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val OrganizationNo : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class SupplierStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<SupplierStore> = ArrayList()
)

/*
Ext.define("MEM.model.Tag", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "TagName", type: "string", max: 50 },
      { name: "TagValue", type: "string", max: 50 },
    ],
  },
});*/
@Suppress("unused")
data class TagStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val TagName : String = "", //string
    val TagValue : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class TagStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<TagStore> = ArrayList()
)

/*
Ext.define("MEM.model.Time", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "FullName", type: "string", max: 100 },
      { name: "ProjectId", type: "int" },
      { name: "AbsenceProjectId", type: "int", useNull: !0 },
      {
        name: "Absence",
        type: "bool",
        convert: function (c, b) {
          var a = MEM.app.getController("Common");
          return b.get("ProjectId") != a.absenceProjectId() ? 0 : 1;
        },
      },
      {
        name: "ProjectName",
        type: "string",
        max: 255,
        sortable: !0,
        convert: function (b, c) {
          if (b) {
            return b;
          } else {
            var d = Ext.getStore("MyCloneProjectListAllStore"),
              a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
            if (a) {
              return a.get("ProjectName");
            } else {
              return "";
            }
          }
        },
      },
      {
        name: "ProjectNo",
        type: "string",
        max: 20,
        sortable: !0,
        sortType: "asInt",
        convert: function (b, c) {
          if (b) {
            return b;
          } else {
            var d = Ext.getStore("MyCloneProjectListAllStore"),
              a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
            if (a) {
              return a.get("ProjectNo");
            } else {
              return "";
            }
          }
        },
      },
      {
        name: "Project",
        type: "string",
        max: 255,
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneProjectListAllStore"),
            a;
          a = c.findRecord("Id", b.get("ProjectId"), 0, !1, !0, !0);
          if (a) {
            return a.get("ProjectNo") + ", " + a.get("ProjectName");
          }
        },
      },
      {
        name: "ProjectStatus",
        type: "string",
        max: 255,
        convert: function (e, c) {
          var d = Ext.getStore("MyCloneProjectListAllStore"),
            b = Ext.getStore("MyProjectStatusStore"),
            a;
          a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
          if (a) {
            b = b.findRecord("Id", a.get("ProjectStatusId"), 0, !1, !0, !0);
            return b.get("StatusCode");
          } else {
            return null;
          }
        },
      },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (b, c) {
          var a = Ext.getStore("MyWorkOrderListStore").findRecord(
            "Id",
            c.get("WorkOrderId"),
            0,
            !1,
            !0,
            !0
          );
          if (a && a.get("Addition")) {
            return AWOpad(b, 3);
          }
          return b;
        },
      },
      { name: "WOAWONo", type: "string", max: 10, sortable: !0 },
      { name: "WorkOrderName", type: "string", max: 255, sortable: !0 },
      { name: "RegDate", type: "string", max: 10, sortType: "asDate" },
      { name: "Debit", type: "boolean", defaultValue: !0 },
      { name: "ProfessionItemId", type: "int" },
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionAccountNo", type: "string", max: 5 },
      { name: "Unit", type: "string", max: 5 },
      {
        name: "Hours",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "BreakTime",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "StartTime",
        useNull: !0,
        type: "date",
        dateFormat: "Y-m-d H:i:s",
        convert: function (b, h) {
          var f,
            d = new Date(h.get("RegDate")),
            c,
            e = getSetting("Time.Timestamp.Interval"),
            g = e ? parseInt(e) : 15;
          if (typeof b == "string") {
            var a = b.split(/[-:T]/);
            c = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);
          } else {
            if (
              getSetting("Time.Timestamp.Show.Project") == 1 ||
              getSetting("Time.Timestamp.Show.Absence") == 1
            ) {
              c = b ? b : new Date();
            } else {
              return b;
            }
          }
          f = new Date(
            d.getFullYear(),
            d.getMonth(),
            d.getDate(),
            c.getHours(),
            b ? c.getMinutes() : (Math.round(c.getMinutes() / g) * g) % 60
          );
          return f;
        },
      },
      {
        name: "StopTime",
        dateFormat: "Y-m-d H:i:s",
        type: "date",
        persist: !1,
        convert: function (b, c) {
          var h = c.get("StartTime"),
            e,
            g = getSetting("Time.Timestamp.Interval"),
            i = g ? parseInt(g) : 15;
          if (c.get("Hours") && !b) {
            Date.prototype.addHours = function (a) {
              this.setTime(this.getTime() + a * 60 * 60 * 1000);
              return this;
            };
            if (h) {
              e = new Date(h).addHours(c.get("Hours") + c.get("BreakTime"));
            }
          } else {
            if (b) {
              var d,
                f = new Date(c.get("RegDate"));
              if (typeof b == "string") {
                var a = b.split(/[-:T]/);
                d = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);
              } else {
                d = b;
              }
              e = new Date(
                f.getFullYear(),
                f.getMonth(),
                f.getDate(),
                d.getHours(),
                b ? d.getMinutes() : (Math.round(d.getMinutes() / i) * i) % 60
              );
            }
          }
          return e;
        },
      },
      { name: "Description", type: "string", defaultValue: "" },
      { name: "TotalCost", type: "float" },
      {
        name: "Travel1Km",
        type: "float",
        useNull: !0,
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      { name: "Travel1PriceKm", type: "float", useNull: !0 },
      {
        name: "Travel2Km",
        type: "float",
        useNull: !0,
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "Travel3Km",
        type: "float",
        useNull: !0,
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      { name: "Travel3Driver", type: "int", useNull: !0 },
      { name: "Travel3IsDriver", type: "boolean" },
      { name: "Travel4", type: "bool", useNull: !0, defaultValue: !1 },
      { name: "Invoiced", type: "bool", defaultValue: !1 },
      { name: "InvoiceId", type: "int", useNull: !0 },
      {
        name: "SalaryTransferDate",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d",
      },
      { name: "Locked", type: "bool", useNull: !0 },
      { name: "Approved", type: "bool", useNull: !0, defaultValue: !1 },
      {
        name: "Approved2",
        type: "bool",
        useNull: !0,
        defaultValue: !1,
        persist: !1,
      },
      {
        name: "Addition",
        type: "bool",
        useNull: !0,
        defaultValue: !1,
        persist: !1,
      },
      { name: "CarPooling", type: "bool", useNull: !0 },
      { name: "InfoNoteId", type: "int", useNull: !0, persist: !1 },
      {
        name: "AllowanceQty",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      { name: "MoveAll", type: "boolean", meType: "meBool", defaultValue: !1 },
      { name: "PieceWork", type: "bool", useNull: !0, defaultValue: !1 },
      { name: "CustomerId", type: "int", useNull: !0, persist: !1 },
      {
        name: "DisplayTitle",
        convert: function (d, a) {
          var b = getSetting("MEM.TimeRowFormat");
          if (!b) {
            b = "{p} - {pn}";
          }
          var c = Ext.getStore("MyCloneProfessionItemStore").getById(
            a.get("ProfessionItemId")
          );
          b = Me.templateRender(b, {
            p: a.get("ProjectNo"),
            pn: a.get("ProjectName"),
            w: a.get("WOAWONo"),
            wn: a.get("WorkOrderName"),
            r: a.get("ProfessionCode"),
            a: a.get("Addition"),
            rn: c ? c.get("ProfessionDescription") : "",
          });
          return b;
        },
      },
      {
        name: "Hours_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Hours");
        },
      },
      {
        name: "StartTime_fmt",
        type: "string",
        persist: !1,
        convert: function (c, b) {
          var a = b.get("StartTime");
          if (a instanceof Date) {
            return Ext.util.Format.date(a, "H:i");
          }
        },
      },
      {
        name: "StopTime_fmt",
        type: "string",
        persist: !1,
        convert: function (c, b) {
          var a = b.get("StopTime");
          if (a instanceof Date) {
            return Ext.util.Format.date(a, "H:i");
          }
        },
      },
      {
        name: "BreakTime_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "BreakTime");
        },
      },
      {
        name: "Travel1Km_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Travel1Km");
        },
      },
      {
        name: "Travel2Km_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Travel2Km");
        },
      },
      {
        name: "Travel3Km_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Travel3Km");
        },
      },
      {
        name: "AllowanceQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "AllowanceQty");
        },
      },
    ],
  },
});*/
@Suppress("unused")
data class TimeStore (
    val Absence : String = "", //bool
    val AbsenceProjectId : String? = null, //int
    val Addition : String? = null, //bool
    val AllowanceQty : String = "", //float
    val AllowanceQty_fmt : String = "", //string
    val Approved : String? = null, //bool
    val Approved2 : String? = null, //bool
    val BreakTime : String = "", //float
    val BreakTime_fmt : String = "", //string
    val CarPooling : String? = null, //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String? = null, //int
    val Debit : String = "", //boolean
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val Hours : String = "", //float
    val Hours_fmt : String = "", //string
    val Id : String = "", //int
    val InfoNoteId : String? = null, //int
    val InvoiceId : String? = null, //int
    val Invoiced : String = "", //bool
    val Locked : String? = null, //bool
    val MoveAll : String = "", //boolean
    val PieceWork : String? = null, //bool
    val ProfessionAccountNo : String = "", //string
    val ProfessionCode : String = "", //string
    val ProfessionItemId : String = "", //int
    val Project : String = "", //string
    val ProjectId : String = "", //int
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //string
    val ProjectStatus : String = "", //string
    val RegDate : String = "", //string
    val SalaryTransferDate : String? = null, //date
    val StartTime_fmt : String = "", //string
    val StopTime_fmt : String = "", //string
    val TotalCost : String = "", //float
    val Travel1Km : String? = null, //float
    val Travel1Km_fmt : String = "", //string
    val Travel1PriceKm : String? = null, //float
    val Travel2Km : String? = null, //float
    val Travel2Km_fmt : String = "", //string
    val Travel3Driver : String? = null, //int
    val Travel3IsDriver : String = "", //boolean
    val Travel3Km : String? = null, //float
    val Travel3Km_fmt : String = "", //string
    val Travel4 : String? = null, //bool
    val Unit : String = "", //string
    val UserId : String = "", //int
    val WOAWONo : String = "", //string
    val WorkOrderId : String? = null, //int
    val WorkOrderName : String = "", //string
    val WorkOrderNo : String? = null, //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class TimeStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<TimeStore> = ArrayList()
)

/*
Ext.define("MEM.model.User", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FullName", type: "string" },
      { name: "UserLogin", type: "string" },
      { name: "PersonalNo", type: "string" },
      { name: "Languagecode", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class UserStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val Id : String = "", //int
    val Languagecode : String = "", //string
    val PersonalNo : String = "", //string
    val UserLogin : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserAccess", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "ObjectRightId", type: "int" },
      { name: "ObjectRightName", type: "string", max: 50 },
      { name: "ObjectName", type: "string", max: 50 },
      { name: "IsProjectRight", type: "bool" },
      { name: "AccessRight", type: "int" },
      { name: "WriteRight", type: "int" },
      { name: "ReadRight", type: "int" },
      { name: "OwnRight", type: "int" },
    ],
  },
});*/
@Suppress("unused")
data class UserAccessStore (
    val AccessRight : String = "", //int
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val IsProjectRight : String = "", //bool
    val ObjectName : String = "", //string
    val ObjectRightId : String = "", //int
    val ObjectRightName : String = "", //string
    val OwnRight : String = "", //int
    val ReadRight : String = "", //int
    val UserId : String = "", //int
    val WriteRight : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserAccessStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserAccessStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserFavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "UserId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
});*/
@Suppress("unused")
data class UserFavoriteArticleStore (
    val AccountNo : String = "", //string
    val ArticleId : String = "", //int
    val ArticleNo : String = "", //string
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Chargeable : String = "", //bool
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val FavoriteListId : String = "", //int
    val FullDescription : String = "", //string
    val Id : String = "", //int
    val ItemUnitId : String = "", //int
    val Payoff : String = "", //bool
    val UserId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserFavoriteArticleStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserFavoriteArticleStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserFavoriteList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "Name", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class UserFavoriteListStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val FavoriteListId : String = "", //int
    val Id : String = "", //int
    val Name : String = "", //string
    val UserId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserFavoriteListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserFavoriteListStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FullName", type: "string" },
      { name: "Signature", type: "string" },
      { name: "EmployeeNo", type: "string" },
      { name: "PersonalNo", type: "string" },
      { name: "ProfessionCode", type: "string" },
      { name: "ProfessionItemId", type: "int" },
      { name: "OrganizationalProjectId", type: "int" },
      { name: "PartnerSupplier", type: "bool" },
    ],
  },
});*/
@Suppress("unused")
data class UserListStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val EmployeeNo : String = "", //string
    val FullName : String = "", //string
    val Id : String = "", //int
    val OrganizationalProjectId : String = "", //int
    val PartnerSupplier : String = "", //bool
    val PersonalNo : String = "", //string
    val ProfessionCode : String = "", //string
    val ProfessionItemId : String = "", //int
    val Signature : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserListStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserPoolWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "ProjectNo", type: "string", max: 50 },
      {
        name: "Project",
        type: "string",
        max: 100,
        convert: function (b, a) {
          return a.get("ProjectNo") + ", " + a.get("ProjectName");
        },
      },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "ProductionStart",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "ProductionEnd",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      { name: "HaveDocument", type: "bool", defaultValue: !1 },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "ProductionStartDateDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartDateDisplay(b, a);
        },
      },
      {
        name: "ProductionStartWeekDay",
        type: "string",
        convert: function (b, a) {
          return Ext.String.capitalize(a.convertProductionStartWeekDay(b, a));
        },
      },
      {
        name: "ProductionStartTimeDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartTimeDisplay(b, a);
        },
      },
      { name: "CustomerName", type: "string", max: 50 },
      { name: "CustomerFavoritePriceList", type: "boolean", persist: !1 },
      { name: "CustomerFavoriteArticlePrice", type: "boolean", persist: !1 },
      { name: "ProjectFavorite", type: "boolean", persist: !1 },
    ],
  },
});*/
@Suppress("unused")
data class UserPoolWorkOrderListStore (
    val Addition : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerFavoriteArticlePrice : String = "", //boolean
    val CustomerFavoritePriceList : String = "", //boolean
    val CustomerName : String = "", //string
    val Disabled : String = "", //boolean
    val HaveDocument : String = "", //bool
    val Id : String = "", //int
    val Name : String = "", //string
    val ProductionEnd : String? = null, //date
    val ProductionStart : String? = null, //date
    val ProductionStartDateDisplay : String = "", //string
    val ProductionStartTimeDisplay : String = "", //string
    val ProductionStartWeekDay : String = "", //string
    val Project : String = "", //string
    val ProjectFavorite : String = "", //boolean
    val ProjectId : String = "", //int
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //string
    val ProjectStatusCode : String = "", //int
    val ResponsibleForemanId : String = "", //int
    val ResponsibleServiceId : String = "", //int
    val WorkOrderId : String = "", //int
    val WorkOrderNo : String = "", //int
    val WorkOrderStatusCode : String = "", //int
    val WorkOrderStatusId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserPoolWorkOrderListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserPoolWorkOrderListStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserProjectWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "WorkPoolId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      {
        name: "BasicScope",
        type: "bool",
        readOnly: !0,
        convert: function (b, a) {
          if (a.get("WorkOrderNo") == 1) {
            return !0;
          }
          return !1;
        },
      },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
      { name: "CustomerId", type: "int", persist: !1 },
      { name: "CustomerFavoritePriceList", type: "boolean", persist: !1 },
      { name: "CustomerFavoriteArticlePrice", type: "boolean", persist: !1 },
      { name: "ProjectFavorite", type: "boolean", persist: !1 },
    ],
  },
});*/
@Suppress("unused")
data class UserProjectWorkOrderListStore (
    val Addition : String = "", //bool
    val BasicScope : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerFavoriteArticlePrice : String = "", //boolean
    val CustomerFavoritePriceList : String = "", //boolean
    val CustomerId : String = "", //int
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val Id : String = "", //int
    val Name : String = "", //string
    val ProjectFavorite : String = "", //boolean
    val ProjectId : String = "", //int
    val ProjectName : String = "", //string
    val ResponsibleServiceId : String = "", //int
    val WorkOrderNo : String = "", //int
    val WorkOrderStatusId : String = "", //int
    val WorkPoolId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserProjectWorkOrderListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserProjectWorkOrderListStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserRight", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "ObjectRightId", type: "int" },
      { name: "ObjectRightName", type: "string", max: 50 },
      { name: "ObjectName", type: "string", max: 50 },
      { name: "WebClient", type: "bool" },
      { name: "MobileClient", type: "bool" },
      { name: "ApiClient", type: "bool" },
      { name: "AdminClient", type: "bool" },
    ],
  },
});*/
@Suppress("unused")
data class UserRightStore (
    val AdminClient : String = "", //bool
    val ApiClient : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val MobileClient : String = "", //bool
    val ObjectName : String = "", //string
    val ObjectRightId : String = "", //int
    val ObjectRightName : String = "", //string
    val UserId : String = "", //int
    val WebClient : String = "", //bool
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserRightStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserRightStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserSession", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "SessionId", type: "string", max: 128 },
      { name: "SessionUserId", type: "int" },
      { name: "ImpersonatedUserId", type: "int" },
      { name: "Languagecode", type: "string" },
      {
        name: "FullName",
        type: "string",
        max: 50,
        convert: function (d, b) {
          var c = Ext.getStore("MyUserListStore"),
            a;
          a = c.findRecord("Id", b.get("ImpersonatedUserId"), 0, !1, !0, !0);
          if (a) {
            return a.get("FullName");
          }
          return "";
        },
      },
    ],
  },
});*/
@Suppress("unused")
data class UserSessionStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val Id : String = "", //int
    val ImpersonatedUserId : String = "", //int
    val Languagecode : String = "", //string
    val SessionId : String = "", //string
    val SessionUserId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserSessionStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserSessionStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserSetting", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "SettingKey", type: "string", max: 50 },
      { name: "SettingValue", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class UserSettingStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val SettingKey : String = "", //string
    val SettingValue : String = "", //string
    val UserId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserSettingStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserSettingStore> = ArrayList()
)

/*
Ext.define("MEM.model.UserWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "ProjectNo", type: "string", max: 50 },
      {
        name: "Project",
        type: "string",
        max: 100,
        convert: function (b, a) {
          return a.get("ProjectNo") + ", " + a.get("ProjectName");
        },
      },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "ProductionStart",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "ProductionStartDateDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartDateDisplay(b, a);
        },
      },
      {
        name: "ProductionStartWeekDay",
        type: "string",
        convert: function (b, a) {
          return Ext.String.capitalize(a.convertProductionStartWeekDay(b, a));
        },
      },
      {
        name: "ProductionStartTimeDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartTimeDisplay(b, a);
        },
      },
      {
        name: "ProductionEnd",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
      { name: "HaveDocument", type: "bool", defaultValue: !1 },
      { name: "CustomerName", type: "string", max: 50 },
    ],
  },
});*/
@Suppress("unused")
data class UserWorkOrderListStore (
    val Addition : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerName : String = "", //string
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val HaveDocument : String = "", //bool
    val Id : String = "", //int
    val Name : String = "", //string
    val ProductionEnd : String? = null, //date
    val ProductionStart : String? = null, //date
    val ProductionStartDateDisplay : String = "", //string
    val ProductionStartTimeDisplay : String = "", //string
    val ProductionStartWeekDay : String = "", //string
    val Project : String = "", //string
    val ProjectId : String = "", //int
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //string
    val ProjectStatusCode : String = "", //int
    val ResponsibleForemanId : String = "", //int
    val ResponsibleServiceId : String = "", //int
    val WorkOrderId : String = "", //int
    val WorkOrderNo : String = "", //int
    val WorkOrderStatusCode : String = "", //int
    val WorkOrderStatusId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class UserWorkOrderListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<UserWorkOrderListStore> = ArrayList()
)

/*
Ext.define("MEM.model.Vat", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "VatPercent",
        type: "float",
        meType: "mePercent",
        useNull: !0,
        display: T("VAT factor"),
      },
      {
        name: "Description",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Description"),
      },
    ],
  },
});*/
@Suppress("unused")
data class VatStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Description : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val VatPercent : String? = null, //float
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class VatStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<VatStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrder", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool" },
      { name: "Name", type: "string", max: 100, defaultValue: "" },
      { name: "WorkDescription", type: "string", defaultValue: "" },
      { name: "WorkFeedback", type: "string", defaultValue: "" },
      { name: "WorkplaceAddress", type: "string", defaultValue: "" },
      { name: "GpsX", type: "int", persist: !1, useNull: !0 },
      { name: "GpsY", type: "int", persist: !1, useNull: !0 },
      { name: "District", type: "string", persist: !1, max: 50 },
      { name: "ResponsibleServiceId", type: "int", useNull: !0 },
      { name: "WorkPoolId", type: "int", useNull: !0 },
      { name: "ResponsibleForemanId", type: "int", useNull: !0 },
      { name: "CreditRisk", type: "boolean" },
      { name: "CustomerId", type: "int" },
      { name: "CustomerName", type: "string" },
      { name: "CustomerAgentId", type: "int", useNull: !0 },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerRefNo", type: "string", max: 1024, defaultValue: "" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ExternalWorkOrderStatusId", type: "int", useNull: !0 },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        persist: !1,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "ProductionStart",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        useNull: !0,
      },
      {
        name: "ProductionEnd",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        useNull: !0,
      },
      {
        name: "ProductionStartClockXX",
        type: "string",
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "ProductionEndClockXX",
        type: "string",
        dateFormat: "time",
        useNull: !0,
      },
      { name: "OrderDate", type: "date", dateFormat: "Y-m-d" },
      { name: "ReportSign", type: "string", persist: !1, max: 50 },
      { name: "ReportTimestamp", type: "string", persist: !1 },
      { name: "Invoiced", type: "bool", persist: !1, defaultValue: !1 },
      { name: "InvoiceDate", type: "date", persist: !1, useNull: !0 },
      { name: "InvoiceId", type: "int", persist: !1, useNull: !0 },
      { name: "CachedWorkCost", type: "float", persist: !1, useNull: !0 },
      { name: "CachedWorkRevenue", type: "float", persist: !1, useNull: !0 },
      { name: "AdditionStatusId", type: "int" },
      { name: "ConstructionTypeId", type: "int" },
      { name: "BudgetLevelId", type: "int", persist: !1 },
      { name: "MarkupModelId", type: "int", persist: !1 },
      { name: "OrderAmount", type: "float", persist: !1, useNull: !0 },
      { name: "FixedPrice", type: "bool", defaultValue: !0 },
      { name: "CostProjectId", type: "int" },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
      { name: "ServiceCategoryId", type: "int", useNull: !0 },
      { name: "GpsX", type: "int", useNull: !0 },
      { name: "GpsY", type: "int", useNull: !0 },
      { name: "SignOnSite", type: "bool", defaultValue: !1 },
      { name: "WorkOrderDocumentId", type: "int" },
      {
        name: "ExternalStatusName",
        type: "string",
        persist: !1,
        defaultValue: "",
      },
      { name: "ExternalStatusComment", type: "string", persist: !1 },
      { name: "UpdatePrices", type: "bool", defaultValue: !1 },
      { name: "KPIRuleId", type: "int", useNull: !0 },
      { name: "KPIName", type: "string", persist: !1 },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderStore (
    val Addition : String = "", //bool
    val AdditionStatusId : String = "", //int
    val BudgetLevelId : String = "", //int
    val CachedWorkCost : String? = null, //float
    val CachedWorkRevenue : String? = null, //float
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ConstructionTypeId : String = "", //int
    val ContactName : String = "", //string
    val CostProjectId : String = "", //int
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditRisk : String = "", //boolean
    val CustomerAgentId : String? = null, //int
    val CustomerId : String = "", //int
    val CustomerName : String = "", //string
    val CustomerRefNo : String = "", //string
    val Disabled : String = "", //boolean
    val District : String = "", //string
    val ExternalStatusComment : String = "", //string
    val ExternalStatusName : String = "", //string
    val ExternalWorkOrderStatusId : String? = null, //int
    val FixedPrice : String = "", //bool
    val FrameworkContractId : String? = null, //int
    val GpsX : String? = null, //int
    val GpsY : String? = null, //int
    val Id : String = "", //int
    val InvoiceDate : String? = null, //date
    val InvoiceId : String? = null, //int
    val Invoiced : String = "", //bool
    val KPIName : String = "", //string
    val KPIRuleId : String? = null, //int
    val MarkupModelId : String = "", //int
    val Name : String = "", //string
    val OrderAmount : String? = null, //float
    val OrderDate : String = "", //date
    val ProductionEnd : String? = null, //date
    val ProductionEndClockXX : String? = null, //string
    val ProductionStart : String? = null, //date
    val ProductionStartClockXX : String? = null, //string
    val ProjectId : String = "", //int
    val ReportSign : String = "", //string
    val ReportTimestamp : String = "", //string
    val ResponsibleForemanId : String? = null, //int
    val ResponsibleServiceId : String? = null, //int
    val ServiceCategoryId : String? = null, //int
    val SignOnSite : String = "", //bool
    val UpdatePrices : String = "", //bool
    val WorkDescription : String = "", //string
    val WorkFeedback : String = "", //string
    val WorkOrderDocumentId : String = "", //int
    val WorkOrderNo : String = "", //int
    val WorkOrderStatusCode : String = "", //int
    val WorkOrderStatusId : String = "", //int
    val WorkPoolId : String? = null, //int
    val WorkplaceAddress : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrderAssignedLocation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", useNull: !0 },
      { name: "WorkOrderNo", type: "int", max: 10 },
      {
        name: "WOAWONo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
        convert: function (b, a) {
          if (a.get("Addition") == 1) {
            return (
              getSetting("System.Prefix.VariationNo") +
              Ext.String.leftPad(a.get("WorkOrderNo"), 3, "0")
            );
          } else {
            return a.get("WorkOrderNo");
          }
        },
      },
      { name: "Name", type: "string", meType: "meLongText", max: 100 },
      { name: "CustomerName", type: "string", meType: "meLongText", max: 100 },
      { name: "WorkplaceAddress", type: "string", meType: "meMediumText" },
      { name: "WorkOrderStatusId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderStatusCode", type: "int", meType: "meMediumText" },
      { name: "GpsX", type: "int", meType: "meShortText", useNull: !0 },
      { name: "GpsY", type: "int", meType: "meShortText", useNull: !0 },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ProjectStatusId", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderAssignedLocationStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerName : String = "", //string
    val Disabled : String = "", //boolean
    val GpsX : String? = null, //int
    val GpsY : String? = null, //int
    val Id : String = "", //int
    val Name : String = "", //string
    val ProjectId : String? = null, //int
    val ProjectStatusCode : String = "", //int
    val ProjectStatusId : String = "", //int
    val ResponsibleServiceId : String = "", //int
    val WOAWONo : String? = null, //int
    val WorkOrderNo : String = "", //int
    val WorkOrderStatusCode : String = "", //int
    val WorkOrderStatusId : String = "", //int
    val WorkplaceAddress : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderAssignedLocationStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderAssignedLocationStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrderContact", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "CustomerAgentId", type: "int" },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Email", type: "string", max: 50 },
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerName", type: "string", max: 50 },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderContactStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val ContactName : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerAgentId : String = "", //int
    val CustomerId : String = "", //int
    val CustomerName : String = "", //string
    val Disabled : String = "", //boolean
    val Email : String = "", //string
    val Id : String = "", //int
    val Mobile : String = "", //string
    val Phone : String = "", //string
    val WorkOrderId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderContactStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderContactStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrderDocument", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderId", type: "int", meType: "meMediumText" },
      { name: "DiaryId", type: "int", meType: "meMediumText" },
      { name: "DocumentDescription", type: "string", meType: "meLongText" },
      { name: "Url", type: "string", meType: "meMediumText", max: 255 },
      { name: "Title", type: "string", meType: "meMediumText", max: 255 },
      { name: "Filename", type: "string", meType: "meMediumText", max: 255 },
      {
        name: "DocumentMimeType",
        type: "string",
        meType: "meMediumText",
        max: 255,
      },
      { name: "DocumentSize", type: "int", meType: "meMediumText" },
      { name: "DocumentData", type: "string" },
      {
        name: "ThumbnailMimeType",
        type: "string",
        meType: "meMediumText",
        max: 255,
      },
      { name: "ThumbnailData", type: "string", meType: "meLongText" },
      { name: "ImageWidth", type: "int", meType: "meInt" },
      { name: "ImageHeight", type: "int", meType: "meInt" },
      { name: "HideInPDA", type: "bool", persist: !1 },
      { name: "EnlargeInReports", type: "bool" },
      { name: "IncludeInReport", type: "bool" },
      { name: "ShowInPortal", type: "bool" },
      { name: "RegDate", type: "string" },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderDocumentStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val DiaryId : String = "", //int
    val Disabled : String = "", //boolean
    val DocumentData : String = "", //string
    val DocumentDescription : String = "", //string
    val DocumentMimeType : String = "", //string
    val DocumentSize : String = "", //int
    val EnlargeInReports : String = "", //bool
    val Filename : String = "", //string
    val HideInPDA : String = "", //bool
    val Id : String = "", //int
    val ImageHeight : String = "", //int
    val ImageWidth : String = "", //int
    val IncludeInReport : String = "", //bool
    val ProjectId : String = "", //int
    val RegDate : String = "", //string
    val ShowInPortal : String = "", //bool
    val ThumbnailData : String = "", //string
    val ThumbnailMimeType : String = "", //string
    val Title : String = "", //string
    val Url : String = "", //string
    val WorkOrderId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderDocumentStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderDocumentStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "ProjectId", type: "int" },
      {
        name: "WorkOrderId",
        type: "int",
        convert: function (a, b) {
          if (a) {
            return a;
          }
          return b.get("Id");
        },
      },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "WorkPoolId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectNo", type: "string", max: 50 },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      {
        name: "BasicScope",
        type: "bool",
        readOnly: !0,
        convert: function (b, a) {
          if (a.get("WorkOrderNo") == 1) {
            return !0;
          }
          return !1;
        },
      },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderListStore (
    val Addition : String = "", //bool
    val BasicScope : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerId : String = "", //int
    val Disabled : String = "", //boolean
    val FullName : String = "", //string
    val Id : String = "", //int
    val Name : String = "", //string
    val ProjectId : String = "", //int
    val ProjectName : String = "", //string
    val ProjectNo : String = "", //string
    val ResponsibleForemanId : String = "", //int
    val ResponsibleServiceId : String = "", //int
    val WorkOrderId : String = "", //int
    val WorkOrderNo : String = "", //int
    val WorkOrderStatusId : String = "", //int
    val WorkPoolId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderListStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderListStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrderLocation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", useNull: !0 },
      { name: "WorkOrderNo", type: "int", max: 10 },
      {
        name: "WOAWONo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
        convert: function (b, a) {
          if (a.get("Addition") == 1) {
            return (
              getSetting("System.Prefix.VariationNo") +
              Ext.String.leftPad(a.get("WorkOrderNo"), 3, "0")
            );
          } else {
            return a.get("WorkOrderNo");
          }
        },
      },
      { name: "Name", type: "string", meType: "meLongText", max: 100 },
      { name: "CustomerName", type: "string", meType: "meLongText", max: 100 },
      { name: "WorkplaceAddress", type: "string", meType: "meMediumText" },
      { name: "WorkOrderStatusId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderStatusCode", type: "int", meType: "meMediumText" },
      { name: "GpsX", type: "int", meType: "meShortText", useNull: !0 },
      { name: "GpsY", type: "int", meType: "meShortText", useNull: !0 },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderLocationStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CustomerName : String = "", //string
    val Disabled : String = "", //boolean
    val GpsX : String? = null, //int
    val GpsY : String? = null, //int
    val Id : String = "", //int
    val Name : String = "", //string
    val ProjectId : String? = null, //int
    val WOAWONo : String? = null, //int
    val WorkOrderNo : String = "", //int
    val WorkOrderStatusCode : String = "", //int
    val WorkOrderStatusId : String = "", //int
    val WorkplaceAddress : String = "", //string
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderLocationStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderLocationStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrderRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "RowType", type: "string", max: 1, defaultValue: "" },
      { name: "ArticleId", type: "int" },
      { name: "BasePriceUsed", type: "bool" },
      { name: "CostUnitPricelist", type: "string", max: 50, defaultValue: "" },
      { name: "PriceUnitPricelist", type: "string", max: 50, defaultValue: "" },
      {
        name: "PayoffUnitPricelist",
        type: "string",
        max: 50,
        defaultValue: "",
      },
      { name: "CodeNo", type: "string", max: 10, defaultValue: "" },
      { name: "Title", type: "string", max: 128000, defaultValue: "" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "PlannedQty", type: "float" },
      { name: "Days", type: "float" },
      { name: "StartQty", type: "float" },
      { name: "EndQty", type: "float" },
      { name: "UsedQty", type: "float" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "Amount", type: "float", defaultValue: 1 },
      { name: "DeliveryDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "ReturnDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "PerformedDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "PerformedUserId", type: "int", useNull: !0 },
      { name: "Comment", type: "string", defaultValue: "" },
      { name: "RowFormat", type: "string", max: 3 },
      { name: "RowStatus", type: "string", max: 1 },
      { name: "DiaryId", type: "int" },
      { name: "TimeId", type: "int", useNull: !0 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
      { name: "Invoiced", type: "bool", defaultValue: !1, persist: !1 },
      { name: "IsPaidOff", type: "bool", defaultValue: !1, persist: !1 },
      { name: "ParentIsReadOnly", type: "bool", defaultValue: !1, persist: !1 },
      {
        name: "Locked",
        type: "bool",
        convert: function (b, a) {
          return (
            a.get("Invoiced") || a.get("IsPaidOff") || a.get("ParentIsReadOnly")
          );
        },
      },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ResourceId", type: "int", useNull: !0 },
      { name: "FactoryPricelistId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      {
        name: "PlannedQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "PlannedQty");
        },
      },
      {
        name: "Days_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Days");
        },
      },
      {
        name: "UsedQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "UsedQty");
        },
      },
      { name: "KPIValue", type: "float", allowNull: !0, persist: !1 },
      {
        name: "KPIValue_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "KPIValue", 1, this);
        },
      },
      { name: "RelatedWorkOrderRowId", type: "int" },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderRowStore (
    val AccountNo : String = "", //string
    val Amount : String = "", //float
    val ArticleCategoryId : String? = null, //int
    val ArticleId : String = "", //int
    val BasePriceUsed : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Chargeable : String = "", //bool
    val CodeNo : String = "", //string
    val Comment : String = "", //string
    val CostUnit : String = "", //float
    val CostUnitPricelist : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val CreditProjectId : String? = null, //int
    val Days : String = "", //float
    val Days_fmt : String = "", //string
    val DeliveryDate : String? = null, //date
    val DiaryId : String = "", //int
    val Disabled : String = "", //boolean
    val EndQty : String = "", //float
    val FactoryPricelistId : String? = null, //int
    val Id : String = "", //int
    val Invoiced : String = "", //bool
    val IsPaidOff : String = "", //bool
    val ItemUnitId : String = "", //int
    val KPIValue : String = "", //float
    val KPIValue_fmt : String = "", //string
    val Locked : String = "", //bool
    val ParentIsReadOnly : String = "", //bool
    val Payoff : String = "", //bool
    val PayoffUnitPricelist : String = "", //string
    val PerformedDate : String? = null, //date
    val PerformedUserId : String? = null, //int
    val PlannedQty : String = "", //float
    val PlannedQty_fmt : String = "", //string
    val PriceUnit : String = "", //float
    val PriceUnitPricelist : String = "", //string
    val RelatedWorkOrderRowId : String = "", //int
    val ResourceId : String? = null, //int
    val ReturnDate : String? = null, //date
    val RowFormat : String = "", //string
    val RowStatus : String = "", //string
    val RowType : String = "", //string
    val StartQty : String = "", //float
    val TimeId : String? = null, //int
    val Title : String = "", //string
    val UsedQty : String = "", //float
    val UsedQty_fmt : String = "", //string
    val WorkOrderId : String = "", //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderRowStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderRowStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int", sortable: !0, sortType: "asInt" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "TempRec", type: "bool", persist: !1, defaultValue: !1 },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderStatusStore (
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val Id : String = "", //int
    val StatusCode : String = "", //int
    val StatusColor : String = "", //string
    val StatusName : String = "", //string
    val TempRec : String = "", //bool
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderStatusStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderStatusStore> = ArrayList()
)

/*
Ext.define("MEM.model.WorkOrderStatusRelations", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderStatusId", type: "int", useNull: !0 },
      { name: "ExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "AllowExternal", type: "bool", defaultValue: !1 },
      { name: "RequireExternal", type: "bool", defaultValue: !1 },
    ],
  },
});*/
@Suppress("unused")
data class WorkOrderStatusRelationsStore (
    val AllowExternal : String = "", //bool
    val Changed : String = "", //date
    val ChangedId : String = "", //string
    val Created : String = "", //date
    val CreatedId : String = "", //string
    val CreatedName : String = "", //string
    val Disabled : String = "", //boolean
    val ExternalWorkOrderStatusId : String? = null, //int
    val Id : String = "", //int
    val RequireExternal : String = "", //bool
    val WorkOrderStatusId : String? = null, //int
    val isField : String = "", //boolean
    val isTmpRec : String = "", //boolean
)

@Suppress("unused")
data class WorkOrderStatusRelationsStoreResponse (
	val success: Boolean = false,
	val errors: String? = null,
	val error_code: Integer? = null, 
	val rows: ArrayList<WorkOrderStatusRelationsStore> = ArrayList()
)

