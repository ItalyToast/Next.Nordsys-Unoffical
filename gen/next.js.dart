/* MIT License

Copyright (c) 2022 ItalyToast

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */

// This file is generated by the project found in gen/ 

// Available tables:
// -AdditionalWorkOrderStore
// -AdditionalWorkOrderRowStore
// -AdditionalWorkOrderStatusStore
// -ArticleStore
// -ArticleCustomerStore
// -ChecklistRowStore
// -ConstructionTypeStore
// -CostStore
// -CurrencyStore
// -CustomerStore
// -CustomerContactStore
// -CustomerContactListStore
// -CustomerFavoriteArticleStore
// -CustomerListStore
// -CustomerPricelistItemStore
// -CustomerTypeStore
// -DiaryStore
// -ExternalWorkOrderStatusStore
// -FactoryArticleItemStore
// -FactoryPricelistStore
// -FavoriteArticleStore
// -FavoriteListStore
// -FormValidationStore
// -FrameworkArticleItemStore
// -FrameworkContractStore
// -GroupStore
// -HourlyRateStore
// -InfoMessageStore
// -InfoNoteStore
// -InvoiceStore
// -InvoiceRowStore
// -ItemUnitStore
// -MainMenuStore
// -MarkupModelStore
// -MarkupModelItemStore
// -OfficeCompanyStore
// -OptionValueStore
// -PhraseStore
// -PriceTypeStore
// -ProfessionItemStore
// -ProjectStore
// -ProjectEconomyStore
// -ProjectEconomyBudgetStore
// -ProjectLimitedStore
// -ProjectListStore
// -ProjectOverviewStore
// -ProjectPricelistStore
// -ProjectPricelistItemStore
// -ProjectStatusStore
// -ProjectStatusHistoryStore
// -ProjectTreeStore
// -ProjectTypeStore
// -ResourceStore
// -RevenueStore
// -ServiceCategoryStore
// -SettingStore
// -StaffListStore
// -StaffLogStore
// -StaffPreviousDayStore
// -SupplierStore
// -TagStore
// -TimeStore
// -UserStore
// -UserAccessStore
// -UserFavoriteArticleStore
// -UserFavoriteListStore
// -UserListStore
// -UserPoolWorkOrderListStore
// -UserProjectWorkOrderListStore
// -UserRightStore
// -UserSessionStore
// -UserSettingStore
// -UserWorkOrderListStore
// -VatStore
// -WorkOrderStore
// -WorkOrderAssignedLocationStore
// -WorkOrderContactStore
// -WorkOrderDocumentStore
// -WorkOrderListStore
// -WorkOrderLocationStore
// -WorkOrderRowStore
// -WorkOrderStatusStore
// -WorkOrderStatusRelationsStore

// ignore_for_file: non_constant_identifier_names

/*
Ext.define("MEM.model.AdditionalWorkOrder", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      {
        name: "WorkOrderNo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      { name: "Addition", type: "bool", meType: "meBool" },
      { name: "Name", type: "string", meType: "meMediumText", max: 50 },
      { name: "WorkDescription", type: "string", meType: "meLongText" },
      { name: "WorkFeedback", type: "string", meType: "meMediumText" },
      {
        name: "WorkplaceAddress",
        type: "string",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "GpsX",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "GpsY",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "District",
        type: "string",
        meType: "meMediumText",
        persist: !1,
        max: 50,
      },
      {
        name: "ResponsibleServiceId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      {
        name: "ResponsibleForemanId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      { name: "CreditRisk", type: "boolean" },
      { name: "CustomerId", type: "int", meType: "meMediumText", useNull: !0 },
      { name: "CustomerName", type: "string" },
      {
        name: "CustomerAgentId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      { name: "ContactName", type: "string", max: 50, persist: !1 },
      {
        name: "CustomerRefNo",
        type: "string",
        meType: "meMediumText",
        persist: !1,
        max: 50,
      },
      {
        name: "WorkOrderStatusId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "ProductionStart",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "ProductionEnd",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "ProductionStartClock",
        type: "date",
        meType: "meTime",
        persist: !1,
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "ProductionEndClock",
        type: "date",
        meType: "meTime",
        persist: !1,
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "OrderDate",
        type: "date",
        meType: "medate",
        dateFormat: "Y-m-d",
      },
      {
        name: "ReportSign",
        type: "string",
        meType: "meShortText",
        persist: !1,
        max: 50,
      },
      {
        name: "ReportTimestamp",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
      },
      {
        name: "Invoiced",
        type: "bool",
        meType: "meBool",
        persist: !1,
        defaultValue: !1,
      },
      {
        name: "InvoiceDate",
        type: "date",
        meType: "meDate",
        persist: !1,
        useNull: !0,
      },
      {
        name: "InvoiceId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        persist: !1,
      },
      {
        name: "CachedWorkCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        persist: !1,
        readOnly: !0,
      },
      {
        name: "CachedWorkRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        persist: !1,
        readOnly: !0,
      },
      { name: "AdditionStatusId", type: "int", meType: "meMediumText" },
      {
        name: "AdditionStatusCode",
        type: "int",
        sortable: !0,
        persist: !1,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyAdditionalWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("AdditionStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "AdditionStatus",
        type: "string",
        sortable: !0,
        persist: !1,
        sortType: "asString",
        convert: function (d, b) {
          var c = Ext.getStore("MyAdditionalWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("AdditionStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusName");
          }
          return "";
        },
      },
      {
        name: "ConstructionTypeId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      {
        name: "BudgetLevelId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
      },
      {
        name: "MarkupModelId",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "OrderAmount",
        type: "float",
        meType: "meMoney",
        persist: !1,
        useNull: !0,
      },
      { name: "FixedPrice", type: "bool", meType: "meBool", defaultValue: !0 },
      {
        name: "CostProjectId",
        type: "int",
        meType: "meMediumText",
        persist: !1,
        useNull: !0,
      },
      {
        name: "MarkUpTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "TenderTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "BookedCostTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      {
        name: "BookedHoursTotal",
        type: "float",
        meType: "meMoney",
        persist: !1,
        readOnly: !0,
        useNull: !0,
      },
      { name: "PriceTypeId", type: "int", meType: "meMediumText", useNull: !0 },
    ],
  },
});*/

class AdditionalWorkOrderStore {
  static String name = 'AdditionalWorkOrderStore';

    final String Addition; //bool
    final String AdditionStatus; //string
    final String AdditionStatusCode; //int
    final String AdditionStatusId; //int
    final String? BookedCostTotal; //float
    final String? BookedHoursTotal; //float
    final String BudgetLevelId; //int
    final String? CachedWorkCost; //float
    final String? CachedWorkRevenue; //float
    final String Changed; //date
    final String ChangedId; //string
    final String? ConstructionTypeId; //int
    final String ContactName; //string
    final String? CostProjectId; //int
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CreditRisk; //boolean
    final String? CustomerAgentId; //int
    final String? CustomerId; //int
    final String CustomerName; //string
    final String CustomerRefNo; //string
    final String Disabled; //boolean
    final String District; //string
    final String FixedPrice; //bool
    final String? GpsX; //int
    final String? GpsY; //int
    final String Id; //int
    final String? InvoiceDate; //date
    final String? InvoiceId; //int
    final String Invoiced; //bool
    final String? MarkUpTotal; //float
    final String? MarkupModelId; //int
    final String Name; //string
    final String? OrderAmount; //float
    final String OrderDate; //date
    final String? PriceTypeId; //int
    final String? ProductionEnd; //date
    final String? ProductionEndClock; //date
    final String? ProductionStart; //date
    final String? ProductionStartClock; //date
    final String ProjectId; //int
    final String ReportSign; //string
    final String ReportTimestamp; //string
    final String? ResponsibleForemanId; //int
    final String? ResponsibleServiceId; //int
    final String? TenderTotal; //float
    final String WorkDescription; //string
    final String WorkFeedback; //string
    final String? WorkOrderNo; //int
    final String WorkOrderStatusId; //int
    final String WorkplaceAddress; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  AdditionalWorkOrderStore(
    this.Addition,
    this.AdditionStatus,
    this.AdditionStatusCode,
    this.AdditionStatusId,
    this.BookedCostTotal,
    this.BookedHoursTotal,
    this.BudgetLevelId,
    this.CachedWorkCost,
    this.CachedWorkRevenue,
    this.Changed,
    this.ChangedId,
    this.ConstructionTypeId,
    this.ContactName,
    this.CostProjectId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditRisk,
    this.CustomerAgentId,
    this.CustomerId,
    this.CustomerName,
    this.CustomerRefNo,
    this.Disabled,
    this.District,
    this.FixedPrice,
    this.GpsX,
    this.GpsY,
    this.Id,
    this.InvoiceDate,
    this.InvoiceId,
    this.Invoiced,
    this.MarkUpTotal,
    this.MarkupModelId,
    this.Name,
    this.OrderAmount,
    this.OrderDate,
    this.PriceTypeId,
    this.ProductionEnd,
    this.ProductionEndClock,
    this.ProductionStart,
    this.ProductionStartClock,
    this.ProjectId,
    this.ReportSign,
    this.ReportTimestamp,
    this.ResponsibleForemanId,
    this.ResponsibleServiceId,
    this.TenderTotal,
    this.WorkDescription,
    this.WorkFeedback,
    this.WorkOrderNo,
    this.WorkOrderStatusId,
    this.WorkplaceAddress,
    this.isField,
    this.isTmpRec,
  );

  AdditionalWorkOrderStore.fromJson(Map<String, dynamic> json) : 
    Addition = json['Addition'] ?? '',
    AdditionStatus = json['AdditionStatus'] ?? '',
    AdditionStatusCode = json['AdditionStatusCode'] ?? '',
    AdditionStatusId = json['AdditionStatusId'] ?? '',
    BookedCostTotal = json['BookedCostTotal'] ?? '',
    BookedHoursTotal = json['BookedHoursTotal'] ?? '',
    BudgetLevelId = json['BudgetLevelId'] ?? '',
    CachedWorkCost = json['CachedWorkCost'] ?? '',
    CachedWorkRevenue = json['CachedWorkRevenue'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ConstructionTypeId = json['ConstructionTypeId'] ?? '',
    ContactName = json['ContactName'] ?? '',
    CostProjectId = json['CostProjectId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditRisk = json['CreditRisk'] ?? '',
    CustomerAgentId = json['CustomerAgentId'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    CustomerRefNo = json['CustomerRefNo'] ?? '',
    Disabled = json['Disabled'] ?? '',
    District = json['District'] ?? '',
    FixedPrice = json['FixedPrice'] ?? '',
    GpsX = json['GpsX'] ?? '',
    GpsY = json['GpsY'] ?? '',
    Id = json['Id'] ?? '',
    InvoiceDate = json['InvoiceDate'] ?? '',
    InvoiceId = json['InvoiceId'] ?? '',
    Invoiced = json['Invoiced'] ?? '',
    MarkUpTotal = json['MarkUpTotal'] ?? '',
    MarkupModelId = json['MarkupModelId'] ?? '',
    Name = json['Name'] ?? '',
    OrderAmount = json['OrderAmount'] ?? '',
    OrderDate = json['OrderDate'] ?? '',
    PriceTypeId = json['PriceTypeId'] ?? '',
    ProductionEnd = json['ProductionEnd'] ?? '',
    ProductionEndClock = json['ProductionEndClock'] ?? '',
    ProductionStart = json['ProductionStart'] ?? '',
    ProductionStartClock = json['ProductionStartClock'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ReportSign = json['ReportSign'] ?? '',
    ReportTimestamp = json['ReportTimestamp'] ?? '',
    ResponsibleForemanId = json['ResponsibleForemanId'] ?? '',
    ResponsibleServiceId = json['ResponsibleServiceId'] ?? '',
    TenderTotal = json['TenderTotal'] ?? '',
    WorkDescription = json['WorkDescription'] ?? '',
    WorkFeedback = json['WorkFeedback'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    WorkplaceAddress = json['WorkplaceAddress'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Addition' : Addition,
    'AdditionStatus' : AdditionStatus,
    'AdditionStatusCode' : AdditionStatusCode,
    'AdditionStatusId' : AdditionStatusId,
    'BookedCostTotal' : BookedCostTotal,
    'BookedHoursTotal' : BookedHoursTotal,
    'BudgetLevelId' : BudgetLevelId,
    'CachedWorkCost' : CachedWorkCost,
    'CachedWorkRevenue' : CachedWorkRevenue,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ConstructionTypeId' : ConstructionTypeId,
    'ContactName' : ContactName,
    'CostProjectId' : CostProjectId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditRisk' : CreditRisk,
    'CustomerAgentId' : CustomerAgentId,
    'CustomerId' : CustomerId,
    'CustomerName' : CustomerName,
    'CustomerRefNo' : CustomerRefNo,
    'Disabled' : Disabled,
    'District' : District,
    'FixedPrice' : FixedPrice,
    'GpsX' : GpsX,
    'GpsY' : GpsY,
    'Id' : Id,
    'InvoiceDate' : InvoiceDate,
    'InvoiceId' : InvoiceId,
    'Invoiced' : Invoiced,
    'MarkUpTotal' : MarkUpTotal,
    'MarkupModelId' : MarkupModelId,
    'Name' : Name,
    'OrderAmount' : OrderAmount,
    'OrderDate' : OrderDate,
    'PriceTypeId' : PriceTypeId,
    'ProductionEnd' : ProductionEnd,
    'ProductionEndClock' : ProductionEndClock,
    'ProductionStart' : ProductionStart,
    'ProductionStartClock' : ProductionStartClock,
    'ProjectId' : ProjectId,
    'ReportSign' : ReportSign,
    'ReportTimestamp' : ReportTimestamp,
    'ResponsibleForemanId' : ResponsibleForemanId,
    'ResponsibleServiceId' : ResponsibleServiceId,
    'TenderTotal' : TenderTotal,
    'WorkDescription' : WorkDescription,
    'WorkFeedback' : WorkFeedback,
    'WorkOrderNo' : WorkOrderNo,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'WorkplaceAddress' : WorkplaceAddress,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.AdditionalWorkOrderRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Title", type: "string", max: 50 },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "PlannedQty", type: "float" },
      { name: "UsedQty", type: "float" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "Amount", type: "float", defaultValue: 1 },
      { name: "DeliveryDate", type: "date", useNull: !0, persist: !1 },
      { name: "ReturnDate", type: "date", useNull: !0, persist: !1 },
      { name: "PerformedDate", type: "date", useNull: !0, persist: !1 },
      { name: "PerformedUserId", type: "int", useNull: !0, persist: !1 },
      { name: "Comment", type: "string" },
      { name: "RowFormat", type: "string", max: 3, persist: !1 },
      { name: "RowStatus", type: "string", max: 1, persist: !1 },
      { name: "DiaryId", type: "int", persist: !1 },
      { name: "TimeId", type: "int", persist: !1 },
      { name: "Invoiced", type: "bool", persist: !1 },
    ],
  },
});*/

class AdditionalWorkOrderRowStore {
  static String name = 'AdditionalWorkOrderRowStore';

    final String AccountNo; //string
    final String Amount; //float
    final String Changed; //date
    final String ChangedId; //string
    final String CodeNo; //string
    final String Comment; //string
    final String CostUnit; //float
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? DeliveryDate; //date
    final String DiaryId; //int
    final String Disabled; //boolean
    final String Id; //int
    final String Invoiced; //bool
    final String ItemUnitId; //int
    final String? PerformedDate; //date
    final String? PerformedUserId; //int
    final String PlannedQty; //float
    final String PriceUnit; //float
    final String? ReturnDate; //date
    final String RowFormat; //string
    final String RowStatus; //string
    final String RowType; //string
    final String TimeId; //int
    final String Title; //string
    final String UsedQty; //float
    final String WorkOrderId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  AdditionalWorkOrderRowStore(
    this.AccountNo,
    this.Amount,
    this.Changed,
    this.ChangedId,
    this.CodeNo,
    this.Comment,
    this.CostUnit,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.DeliveryDate,
    this.DiaryId,
    this.Disabled,
    this.Id,
    this.Invoiced,
    this.ItemUnitId,
    this.PerformedDate,
    this.PerformedUserId,
    this.PlannedQty,
    this.PriceUnit,
    this.ReturnDate,
    this.RowFormat,
    this.RowStatus,
    this.RowType,
    this.TimeId,
    this.Title,
    this.UsedQty,
    this.WorkOrderId,
    this.isField,
    this.isTmpRec,
  );

  AdditionalWorkOrderRowStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    Amount = json['Amount'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CodeNo = json['CodeNo'] ?? '',
    Comment = json['Comment'] ?? '',
    CostUnit = json['CostUnit'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    DeliveryDate = json['DeliveryDate'] ?? '',
    DiaryId = json['DiaryId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    Invoiced = json['Invoiced'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    PerformedDate = json['PerformedDate'] ?? '',
    PerformedUserId = json['PerformedUserId'] ?? '',
    PlannedQty = json['PlannedQty'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    ReturnDate = json['ReturnDate'] ?? '',
    RowFormat = json['RowFormat'] ?? '',
    RowStatus = json['RowStatus'] ?? '',
    RowType = json['RowType'] ?? '',
    TimeId = json['TimeId'] ?? '',
    Title = json['Title'] ?? '',
    UsedQty = json['UsedQty'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'Amount' : Amount,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CodeNo' : CodeNo,
    'Comment' : Comment,
    'CostUnit' : CostUnit,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'DeliveryDate' : DeliveryDate,
    'DiaryId' : DiaryId,
    'Disabled' : Disabled,
    'Id' : Id,
    'Invoiced' : Invoiced,
    'ItemUnitId' : ItemUnitId,
    'PerformedDate' : PerformedDate,
    'PerformedUserId' : PerformedUserId,
    'PlannedQty' : PlannedQty,
    'PriceUnit' : PriceUnit,
    'ReturnDate' : ReturnDate,
    'RowFormat' : RowFormat,
    'RowStatus' : RowStatus,
    'RowType' : RowType,
    'TimeId' : TimeId,
    'Title' : Title,
    'UsedQty' : UsedQty,
    'WorkOrderId' : WorkOrderId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.AdditionalWorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
    ],
  },
});*/

class AdditionalWorkOrderStatusStore {
  static String name = 'AdditionalWorkOrderStatusStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String StatusCode; //int
    final String StatusColor; //string
    final String StatusName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  AdditionalWorkOrderStatusStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.StatusCode,
    this.StatusColor,
    this.StatusName,
    this.isField,
    this.isTmpRec,
  );

  AdditionalWorkOrderStatusStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    StatusCode = json['StatusCode'] ?? '',
    StatusColor = json['StatusColor'] ?? '',
    StatusName = json['StatusName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'StatusCode' : StatusCode,
    'StatusColor' : StatusColor,
    'StatusName' : StatusName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Article", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").getById(a.get("ItemUnitId"));
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      { name: "WorkOrderProjectId", type: "int", useNull: !0 },
      { name: "HasKPIRelation", type: "bool", defaultValue: !1 },
      { name: "IsKPIRecord", type: "bool", defaultValue: !1 },
    ],
  },
  get: function (a) {
    switch (a) {
      case "ArticleId":
        return this.get("Id");
        break;
      default:
        return this.callParent(arguments);
        break;
    }
  },
});
Ext.define("MEM.store.MyArticleStore", {
  extend: MEM.ux.data.MyBaseStore,
  alias: "store.myarticlestorealias",
  config: {
    model: "MEM.model.Article",
    storeId: "MyArticleStore",
    autoLoad: !1,
    autoSync: !1,
    remoteFilter: !1,
    sorters: [{ property: "Description", direction: "ASC" }],
    proxy: { type: "myproxy", url: Me.STORE_URL + "ArticleStore" },
  },
});
Ext.define("MEM.model.ChecklistDiary", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "DiaryId", type: "int", meType: "meMediumText" },
      {
        name: "ItemNo",
        type: "string",
        meType: "meShortText",
        max: 50,
        useNull: !0,
      },
      {
        name: "ItemDescription",
        type: "string",
        meType: "meLongText",
        max: 255,
      },
      { name: "Checked", type: "bool", meType: "meBool" },
      {
        name: "CheckDate",
        type: "date",
        meType: "meDate",
        readOnly: !0,
        dateFormat: "Y-m-d",
      },
      {
        name: "CheckedById",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CheckNote",
        type: "string",
        meType: "meLongText",
        max: 255,
        convert: function (a, b) {
          if (null == a) {
            return "";
          } else {
            return a;
          }
        },
      },
    ],
    validations: [
      { type: "presence", field: "ItemNo" },
      { type: "presence", field: "ItemDescription" },
    ],
  },
});*/

class ArticleStore {
  static String name = 'ArticleStore';

    final String AccountNo; //string
    final String? ArticleCategoryId; //int
    final String ArticleNo; //string
    final String Changed; //date
    final String ChangedId; //string
    final String Chargeable; //bool
    final String CheckDate; //date
    final String CheckNote; //string
    final String Checked; //bool
    final String? CheckedById; //int
    final String CostUnit; //float
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? CreditProjectId; //int
    final String Description; //string
    final String DiaryId; //int
    final String Disabled; //boolean
    final String FullDescription; //string
    final String HasKPIRelation; //bool
    final String Id; //int
    final String IsKPIRecord; //bool
    final String ItemDescription; //string
    final String? ItemNo; //string
    final String ItemUnitId; //int
    final String Payoff; //bool
    final String PriceUnit; //float
    final String? WorkOrderId; //int
    final String? WorkOrderProjectId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  ArticleStore(
    this.AccountNo,
    this.ArticleCategoryId,
    this.ArticleNo,
    this.Changed,
    this.ChangedId,
    this.Chargeable,
    this.CheckDate,
    this.CheckNote,
    this.Checked,
    this.CheckedById,
    this.CostUnit,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditProjectId,
    this.Description,
    this.DiaryId,
    this.Disabled,
    this.FullDescription,
    this.HasKPIRelation,
    this.Id,
    this.IsKPIRecord,
    this.ItemDescription,
    this.ItemNo,
    this.ItemUnitId,
    this.Payoff,
    this.PriceUnit,
    this.WorkOrderId,
    this.WorkOrderProjectId,
    this.isField,
    this.isTmpRec,
  );

  ArticleStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ArticleCategoryId = json['ArticleCategoryId'] ?? '',
    ArticleNo = json['ArticleNo'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Chargeable = json['Chargeable'] ?? '',
    CheckDate = json['CheckDate'] ?? '',
    CheckNote = json['CheckNote'] ?? '',
    Checked = json['Checked'] ?? '',
    CheckedById = json['CheckedById'] ?? '',
    CostUnit = json['CostUnit'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditProjectId = json['CreditProjectId'] ?? '',
    Description = json['Description'] ?? '',
    DiaryId = json['DiaryId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullDescription = json['FullDescription'] ?? '',
    HasKPIRelation = json['HasKPIRelation'] ?? '',
    Id = json['Id'] ?? '',
    IsKPIRecord = json['IsKPIRecord'] ?? '',
    ItemDescription = json['ItemDescription'] ?? '',
    ItemNo = json['ItemNo'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    Payoff = json['Payoff'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    WorkOrderProjectId = json['WorkOrderProjectId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ArticleCategoryId' : ArticleCategoryId,
    'ArticleNo' : ArticleNo,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Chargeable' : Chargeable,
    'CheckDate' : CheckDate,
    'CheckNote' : CheckNote,
    'Checked' : Checked,
    'CheckedById' : CheckedById,
    'CostUnit' : CostUnit,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditProjectId' : CreditProjectId,
    'Description' : Description,
    'DiaryId' : DiaryId,
    'Disabled' : Disabled,
    'FullDescription' : FullDescription,
    'HasKPIRelation' : HasKPIRelation,
    'Id' : Id,
    'IsKPIRecord' : IsKPIRecord,
    'ItemDescription' : ItemDescription,
    'ItemNo' : ItemNo,
    'ItemUnitId' : ItemUnitId,
    'Payoff' : Payoff,
    'PriceUnit' : PriceUnit,
    'WorkOrderId' : WorkOrderId,
    'WorkOrderProjectId' : WorkOrderProjectId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ArticleCustomer", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore");
          var b;
          b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return a.get("Description") + " (" + b.get("Description") + ")";
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "CustomerId", type: "int" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
  get: function (a) {
    switch (a) {
      case "ArticleId":
        return this.get("Id");
        break;
      default:
        return this.callParent(arguments);
        break;
    }
  },
});
Ext.define("MEM.store.MyArticleCustomerStore", {
  extend: MEM.ux.data.MyBaseStore,
  config: {
    model: "MEM.model.ArticleCustomer",
    storeId: "MyArticleCustomerStore",
    autoLoad: !1,
    autoSync: !1,
    remoteFilter: !1,
    sorters: [{ property: "Description", direction: "ASC" }],
    proxy: { type: "myproxy", url: Me.STORE_URL + "ArticleCustomerStore" },
  },
});
Ext.define("MEM.model.ArticleCategory", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }] },
});*/

class ArticleCustomerStore {
  static String name = 'ArticleCustomerStore';

    final String AccountNo; //string
    final String ArticleNo; //string
    final String Changed; //date
    final String ChangedId; //string
    final String Chargeable; //bool
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerId; //int
    final String Description; //string
    final String Disabled; //boolean
    final String FullDescription; //string
    final String Id; //int
    final String ItemUnitId; //int
    final String Name; //string
    final String Payoff; //bool
    final String isField; //boolean
    final String isTmpRec; //boolean

  ArticleCustomerStore(
    this.AccountNo,
    this.ArticleNo,
    this.Changed,
    this.ChangedId,
    this.Chargeable,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.Description,
    this.Disabled,
    this.FullDescription,
    this.Id,
    this.ItemUnitId,
    this.Name,
    this.Payoff,
    this.isField,
    this.isTmpRec,
  );

  ArticleCustomerStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ArticleNo = json['ArticleNo'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Chargeable = json['Chargeable'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullDescription = json['FullDescription'] ?? '',
    Id = json['Id'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    Name = json['Name'] ?? '',
    Payoff = json['Payoff'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ArticleNo' : ArticleNo,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Chargeable' : Chargeable,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'Description' : Description,
    'Disabled' : Disabled,
    'FullDescription' : FullDescription,
    'Id' : Id,
    'ItemUnitId' : ItemUnitId,
    'Name' : Name,
    'Payoff' : Payoff,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ChecklistRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int", meType: "meMediumText" },
      {
        name: "ItemNo",
        type: "string",
        meType: "meShortText",
        max: 50,
        useNull: !0,
      },
      {
        name: "ItemDescription",
        type: "string",
        meType: "meLongText",
        max: 255,
      },
      { name: "Checked", type: "bool", meType: "meBool" },
      {
        name: "CheckDate",
        type: "date",
        meType: "meDate",
        readOnly: !0,
        dateFormat: "Y-m-d",
      },
      {
        name: "CheckedById",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CheckNote",
        type: "string",
        meType: "meLongText",
        max: 255,
        convert: function (a, b) {
          if (null == a) {
            return "";
          } else {
            return a;
          }
        },
      },
    ],
    validations: [
      { type: "presence", field: "ItemNo" },
      { type: "presence", field: "ItemDescription" },
    ],
  },
});*/

class ChecklistRowStore {
  static String name = 'ChecklistRowStore';

    final String Changed; //date
    final String ChangedId; //string
    final String CheckDate; //date
    final String CheckNote; //string
    final String Checked; //bool
    final String? CheckedById; //int
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String ItemDescription; //string
    final String? ItemNo; //string
    final String WorkOrderId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  ChecklistRowStore(
    this.Changed,
    this.ChangedId,
    this.CheckDate,
    this.CheckNote,
    this.Checked,
    this.CheckedById,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.ItemDescription,
    this.ItemNo,
    this.WorkOrderId,
    this.isField,
    this.isTmpRec,
  );

  ChecklistRowStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CheckDate = json['CheckDate'] ?? '',
    CheckNote = json['CheckNote'] ?? '',
    Checked = json['Checked'] ?? '',
    CheckedById = json['CheckedById'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    ItemDescription = json['ItemDescription'] ?? '',
    ItemNo = json['ItemNo'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CheckDate' : CheckDate,
    'CheckNote' : CheckNote,
    'Checked' : Checked,
    'CheckedById' : CheckedById,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'ItemDescription' : ItemDescription,
    'ItemNo' : ItemNo,
    'WorkOrderId' : WorkOrderId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ConstructionType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }] },
});*/

class ConstructionTypeStore {
  static String name = 'ConstructionTypeStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String TypeName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ConstructionTypeStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.TypeName,
    this.isField,
    this.isTmpRec,
  );

  ConstructionTypeStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    TypeName = json['TypeName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'TypeName' : TypeName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Cost", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "VerificationNo", type: "string", max: 50 },
      { name: "TransactionNote", type: "string", max: 255 },
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            if (a.get("Addition")) {
              return AWOpad(a.get("WorkOrderNo"), 3);
            } else {
              return a.get("WorkOrderNo");
            }
          }
          return "";
        },
      },
      {
        name: "WorkOrderName",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            return a.get("Name");
          }
          return "";
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "Invoiceable", type: "bool" },
      { name: "LedgerDate", type: "date" },
      {
        name: "InvoiceAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      {
        name: "CustomerPrice",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      { name: "MarkupAmount", type: "float" },
      { name: "CustomerNo", type: "string", max: 50, useNull: !0 },
      { name: "RevenueTransaction", type: "bool" },
      { name: "Invoiced", type: "bool" },
      { name: "InvoiceId", type: "int", useNull: !0 },
      { name: "TransactionType", type: "string", max: 1 },
      { name: "ExtInvoiceNo", type: "string", max: 20, useNull: !0 },
      { name: "IsScanned", type: "bool" },
      {
        name: "ScannedUrl",
        type: "string",
        max: 255,
        useNull: !0,
        convert: function (b, a) {
          return a.getScannedUrl();
        },
      },
      { name: "SupplierInvoiceId", type: "int", allowNull: !0 },
      { name: "ApprovedByProduction", type: "bool" },
      { name: "Locked", type: "bool" },
      { name: "ExtVerificationId", type: "string", max: 50, useNull: !0 },
      { name: "Notes", type: "string", max: 255, useNull: !0 },
      { name: "Mark1", type: "string", max: 255, useNull: !0 },
      { name: "Mark2", type: "string", max: 255, useNull: !0 },
      {
        name: "VatAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
    ],
  },
});*/

class CostStore {
  static String name = 'CostStore';

    final String AccountNo; //string
    final String ApprovedByProduction; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? CustomerNo; //string
    final String CustomerPrice; //float
    final String Disabled; //boolean
    final String? ExtInvoiceNo; //string
    final String? ExtVerificationId; //string
    final String Id; //int
    final String InvoiceAmount; //float
    final String? InvoiceId; //int
    final String Invoiceable; //bool
    final String Invoiced; //bool
    final String IsScanned; //bool
    final String LedgerDate; //date
    final String Locked; //bool
    final String? Mark1; //string
    final String? Mark2; //string
    final String MarkupAmount; //float
    final String? Notes; //string
    final String ProjectId; //int
    final String RevenueTransaction; //bool
    final String? ScannedUrl; //string
    final String SupplierInvoiceId; //int
    final String TransactionNote; //string
    final String TransactionType; //string
    final String VatAmount; //float
    final String VerificationNo; //string
    final String? WorkOrderId; //int
    final String? WorkOrderName; //int
    final String? WorkOrderNo; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  CostStore(
    this.AccountNo,
    this.ApprovedByProduction,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerNo,
    this.CustomerPrice,
    this.Disabled,
    this.ExtInvoiceNo,
    this.ExtVerificationId,
    this.Id,
    this.InvoiceAmount,
    this.InvoiceId,
    this.Invoiceable,
    this.Invoiced,
    this.IsScanned,
    this.LedgerDate,
    this.Locked,
    this.Mark1,
    this.Mark2,
    this.MarkupAmount,
    this.Notes,
    this.ProjectId,
    this.RevenueTransaction,
    this.ScannedUrl,
    this.SupplierInvoiceId,
    this.TransactionNote,
    this.TransactionType,
    this.VatAmount,
    this.VerificationNo,
    this.WorkOrderId,
    this.WorkOrderName,
    this.WorkOrderNo,
    this.isField,
    this.isTmpRec,
  );

  CostStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ApprovedByProduction = json['ApprovedByProduction'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerNo = json['CustomerNo'] ?? '',
    CustomerPrice = json['CustomerPrice'] ?? '',
    Disabled = json['Disabled'] ?? '',
    ExtInvoiceNo = json['ExtInvoiceNo'] ?? '',
    ExtVerificationId = json['ExtVerificationId'] ?? '',
    Id = json['Id'] ?? '',
    InvoiceAmount = json['InvoiceAmount'] ?? '',
    InvoiceId = json['InvoiceId'] ?? '',
    Invoiceable = json['Invoiceable'] ?? '',
    Invoiced = json['Invoiced'] ?? '',
    IsScanned = json['IsScanned'] ?? '',
    LedgerDate = json['LedgerDate'] ?? '',
    Locked = json['Locked'] ?? '',
    Mark1 = json['Mark1'] ?? '',
    Mark2 = json['Mark2'] ?? '',
    MarkupAmount = json['MarkupAmount'] ?? '',
    Notes = json['Notes'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    RevenueTransaction = json['RevenueTransaction'] ?? '',
    ScannedUrl = json['ScannedUrl'] ?? '',
    SupplierInvoiceId = json['SupplierInvoiceId'] ?? '',
    TransactionNote = json['TransactionNote'] ?? '',
    TransactionType = json['TransactionType'] ?? '',
    VatAmount = json['VatAmount'] ?? '',
    VerificationNo = json['VerificationNo'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    WorkOrderName = json['WorkOrderName'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ApprovedByProduction' : ApprovedByProduction,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerNo' : CustomerNo,
    'CustomerPrice' : CustomerPrice,
    'Disabled' : Disabled,
    'ExtInvoiceNo' : ExtInvoiceNo,
    'ExtVerificationId' : ExtVerificationId,
    'Id' : Id,
    'InvoiceAmount' : InvoiceAmount,
    'InvoiceId' : InvoiceId,
    'Invoiceable' : Invoiceable,
    'Invoiced' : Invoiced,
    'IsScanned' : IsScanned,
    'LedgerDate' : LedgerDate,
    'Locked' : Locked,
    'Mark1' : Mark1,
    'Mark2' : Mark2,
    'MarkupAmount' : MarkupAmount,
    'Notes' : Notes,
    'ProjectId' : ProjectId,
    'RevenueTransaction' : RevenueTransaction,
    'ScannedUrl' : ScannedUrl,
    'SupplierInvoiceId' : SupplierInvoiceId,
    'TransactionNote' : TransactionNote,
    'TransactionType' : TransactionType,
    'VatAmount' : VatAmount,
    'VerificationNo' : VerificationNo,
    'WorkOrderId' : WorkOrderId,
    'WorkOrderName' : WorkOrderName,
    'WorkOrderNo' : WorkOrderNo,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Currency", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CurrencyCode", type: "string", max: 3 },
      { name: "Currency", type: "string", max: 50 },
      { name: "Xrate", type: "float" },
      { name: "Base", type: "boolean" },
    ],
  },
});*/

class CurrencyStore {
  static String name = 'CurrencyStore';

    final String Base; //boolean
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Currency; //string
    final String CurrencyCode; //string
    final String Disabled; //boolean
    final String Id; //int
    final String Xrate; //float
    final String isField; //boolean
    final String isTmpRec; //boolean

  CurrencyStore(
    this.Base,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Currency,
    this.CurrencyCode,
    this.Disabled,
    this.Id,
    this.Xrate,
    this.isField,
    this.isTmpRec,
  );

  CurrencyStore.fromJson(Map<String, dynamic> json) : 
    Base = json['Base'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Currency = json['Currency'] ?? '',
    CurrencyCode = json['CurrencyCode'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    Xrate = json['Xrate'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Base' : Base,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Currency' : Currency,
    'CurrencyCode' : CurrencyCode,
    'Disabled' : Disabled,
    'Id' : Id,
    'Xrate' : Xrate,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Customer", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "OrganizationNo", type: "string", max: 15 },
      { name: "BillAddress1", type: "string", max: 50 },
      { name: "BillAddress2", type: "string", max: 50 },
      { name: "BillAddress3", type: "string", max: 50 },
      { name: "BillAddress4", type: "string", max: 50 },
      { name: "BillAddress5", type: "string", max: 50 },
      { name: "BillAddress6", type: "string", max: 50 },
      { name: "Email", type: "string", max: 255 },
      { name: "WebAddress", type: "string", max: 255 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Fax", type: "string", max: 30 },
      { name: "EdiAddress", type: "string", max: 255 },
      { name: "CustomerNote", type: "string" },
      { name: "CustomerName2", type: "string", max: 50 },
      { name: "OrganizationNo2", type: "string", max: 15 },
      { name: "ConstructionCompany", type: "boolean" },
      { name: "SupplierNo", type: "string", max: 50 },
      { name: "CustomerTypeId", type: "int" },
      { name: "CurrencyId", type: "int" },
      { name: "PaymentTermsCode", type: "string", max: 10 },
      { name: "Iban", type: "string", max: 34 },
      { name: "SwiftBic", type: "string", max: 11 },
      { name: "BankName", type: "string", max: 50 },
      { name: "BankAccountNo", type: "string", max: 50 },
      { name: "ClearingNo", type: "string", max: 4 },
      { name: "EanCode", type: "string", max: 50 },
      { name: "VatNo", type: "string", max: 20 },
      { name: "CountryCode", type: "string", max: 2 },
      { name: "PropertyName", type: "string", max: 50 },
      { name: "HousingCooperativeOrgNo", type: "string", max: 15 },
      { name: "ApartmentNo", type: "string", max: 10 },
      { name: "InfoNoteId", type: "int", useNull: !0, persist: !1 },
      { name: "CreditRisk", type: "boolean" },
      { name: "DefaultExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "HasFavorites", type: "boolean" },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
    ],
  },
});*/

class CustomerStore {
  static String name = 'CustomerStore';

    final String ApartmentNo; //string
    final String BankAccountNo; //string
    final String BankName; //string
    final String BillAddress1; //string
    final String BillAddress2; //string
    final String BillAddress3; //string
    final String BillAddress4; //string
    final String BillAddress5; //string
    final String BillAddress6; //string
    final String Changed; //date
    final String ChangedId; //string
    final String ClearingNo; //string
    final String ConstructionCompany; //boolean
    final String CountryCode; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CreditRisk; //boolean
    final String CurrencyId; //int
    final String CustomerName; //string
    final String CustomerName2; //string
    final String CustomerNo; //string
    final String CustomerNote; //string
    final String CustomerTypeId; //int
    final String? DefaultExternalWorkOrderStatusId; //int
    final String Disabled; //boolean
    final String EanCode; //string
    final String EdiAddress; //string
    final String Email; //string
    final String Fax; //string
    final String? FrameworkContractId; //int
    final String HasFavorites; //boolean
    final String HousingCooperativeOrgNo; //string
    final String Iban; //string
    final String Id; //int
    final String? InfoNoteId; //int
    final String Mobile; //string
    final String OrganizationNo; //string
    final String OrganizationNo2; //string
    final String PaymentTermsCode; //string
    final String Phone; //string
    final String PropertyName; //string
    final String SupplierNo; //string
    final String SwiftBic; //string
    final String VatNo; //string
    final String WebAddress; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  CustomerStore(
    this.ApartmentNo,
    this.BankAccountNo,
    this.BankName,
    this.BillAddress1,
    this.BillAddress2,
    this.BillAddress3,
    this.BillAddress4,
    this.BillAddress5,
    this.BillAddress6,
    this.Changed,
    this.ChangedId,
    this.ClearingNo,
    this.ConstructionCompany,
    this.CountryCode,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditRisk,
    this.CurrencyId,
    this.CustomerName,
    this.CustomerName2,
    this.CustomerNo,
    this.CustomerNote,
    this.CustomerTypeId,
    this.DefaultExternalWorkOrderStatusId,
    this.Disabled,
    this.EanCode,
    this.EdiAddress,
    this.Email,
    this.Fax,
    this.FrameworkContractId,
    this.HasFavorites,
    this.HousingCooperativeOrgNo,
    this.Iban,
    this.Id,
    this.InfoNoteId,
    this.Mobile,
    this.OrganizationNo,
    this.OrganizationNo2,
    this.PaymentTermsCode,
    this.Phone,
    this.PropertyName,
    this.SupplierNo,
    this.SwiftBic,
    this.VatNo,
    this.WebAddress,
    this.isField,
    this.isTmpRec,
  );

  CustomerStore.fromJson(Map<String, dynamic> json) : 
    ApartmentNo = json['ApartmentNo'] ?? '',
    BankAccountNo = json['BankAccountNo'] ?? '',
    BankName = json['BankName'] ?? '',
    BillAddress1 = json['BillAddress1'] ?? '',
    BillAddress2 = json['BillAddress2'] ?? '',
    BillAddress3 = json['BillAddress3'] ?? '',
    BillAddress4 = json['BillAddress4'] ?? '',
    BillAddress5 = json['BillAddress5'] ?? '',
    BillAddress6 = json['BillAddress6'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ClearingNo = json['ClearingNo'] ?? '',
    ConstructionCompany = json['ConstructionCompany'] ?? '',
    CountryCode = json['CountryCode'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditRisk = json['CreditRisk'] ?? '',
    CurrencyId = json['CurrencyId'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    CustomerName2 = json['CustomerName2'] ?? '',
    CustomerNo = json['CustomerNo'] ?? '',
    CustomerNote = json['CustomerNote'] ?? '',
    CustomerTypeId = json['CustomerTypeId'] ?? '',
    DefaultExternalWorkOrderStatusId = json['DefaultExternalWorkOrderStatusId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    EanCode = json['EanCode'] ?? '',
    EdiAddress = json['EdiAddress'] ?? '',
    Email = json['Email'] ?? '',
    Fax = json['Fax'] ?? '',
    FrameworkContractId = json['FrameworkContractId'] ?? '',
    HasFavorites = json['HasFavorites'] ?? '',
    HousingCooperativeOrgNo = json['HousingCooperativeOrgNo'] ?? '',
    Iban = json['Iban'] ?? '',
    Id = json['Id'] ?? '',
    InfoNoteId = json['InfoNoteId'] ?? '',
    Mobile = json['Mobile'] ?? '',
    OrganizationNo = json['OrganizationNo'] ?? '',
    OrganizationNo2 = json['OrganizationNo2'] ?? '',
    PaymentTermsCode = json['PaymentTermsCode'] ?? '',
    Phone = json['Phone'] ?? '',
    PropertyName = json['PropertyName'] ?? '',
    SupplierNo = json['SupplierNo'] ?? '',
    SwiftBic = json['SwiftBic'] ?? '',
    VatNo = json['VatNo'] ?? '',
    WebAddress = json['WebAddress'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'ApartmentNo' : ApartmentNo,
    'BankAccountNo' : BankAccountNo,
    'BankName' : BankName,
    'BillAddress1' : BillAddress1,
    'BillAddress2' : BillAddress2,
    'BillAddress3' : BillAddress3,
    'BillAddress4' : BillAddress4,
    'BillAddress5' : BillAddress5,
    'BillAddress6' : BillAddress6,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ClearingNo' : ClearingNo,
    'ConstructionCompany' : ConstructionCompany,
    'CountryCode' : CountryCode,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditRisk' : CreditRisk,
    'CurrencyId' : CurrencyId,
    'CustomerName' : CustomerName,
    'CustomerName2' : CustomerName2,
    'CustomerNo' : CustomerNo,
    'CustomerNote' : CustomerNote,
    'CustomerTypeId' : CustomerTypeId,
    'DefaultExternalWorkOrderStatusId' : DefaultExternalWorkOrderStatusId,
    'Disabled' : Disabled,
    'EanCode' : EanCode,
    'EdiAddress' : EdiAddress,
    'Email' : Email,
    'Fax' : Fax,
    'FrameworkContractId' : FrameworkContractId,
    'HasFavorites' : HasFavorites,
    'HousingCooperativeOrgNo' : HousingCooperativeOrgNo,
    'Iban' : Iban,
    'Id' : Id,
    'InfoNoteId' : InfoNoteId,
    'Mobile' : Mobile,
    'OrganizationNo' : OrganizationNo,
    'OrganizationNo2' : OrganizationNo2,
    'PaymentTermsCode' : PaymentTermsCode,
    'Phone' : Phone,
    'PropertyName' : PropertyName,
    'SupplierNo' : SupplierNo,
    'SwiftBic' : SwiftBic,
    'VatNo' : VatNo,
    'WebAddress' : WebAddress,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.CustomerContact", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Email", type: "string", max: 50 },
      { name: "OrganizationNo", type: "string", max: 12 },
      { name: "CustomerRef", type: "string", max: 50 },
      { name: "DefaultExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "isSelected", type: "bool", persist: !1, defaultValue: !1 },
    ],
    validations: [{ type: "email", field: "Email" }],
  },
});*/

class CustomerContactStore {
  static String name = 'CustomerContactStore';

    final String Changed; //date
    final String ChangedId; //string
    final String ContactName; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerId; //int
    final String CustomerRef; //string
    final String? DefaultExternalWorkOrderStatusId; //int
    final String Disabled; //boolean
    final String Email; //string
    final String Id; //int
    final String Mobile; //string
    final String OrganizationNo; //string
    final String Phone; //string
    final String isField; //boolean
    final String isSelected; //bool
    final String isTmpRec; //boolean

  CustomerContactStore(
    this.Changed,
    this.ChangedId,
    this.ContactName,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.CustomerRef,
    this.DefaultExternalWorkOrderStatusId,
    this.Disabled,
    this.Email,
    this.Id,
    this.Mobile,
    this.OrganizationNo,
    this.Phone,
    this.isField,
    this.isSelected,
    this.isTmpRec,
  );

  CustomerContactStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ContactName = json['ContactName'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerRef = json['CustomerRef'] ?? '',
    DefaultExternalWorkOrderStatusId = json['DefaultExternalWorkOrderStatusId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Email = json['Email'] ?? '',
    Id = json['Id'] ?? '',
    Mobile = json['Mobile'] ?? '',
    OrganizationNo = json['OrganizationNo'] ?? '',
    Phone = json['Phone'] ?? '',
    isField = json['isField'] ?? '',
    isSelected = json['isSelected'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ContactName' : ContactName,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'CustomerRef' : CustomerRef,
    'DefaultExternalWorkOrderStatusId' : DefaultExternalWorkOrderStatusId,
    'Disabled' : Disabled,
    'Email' : Email,
    'Id' : Id,
    'Mobile' : Mobile,
    'OrganizationNo' : OrganizationNo,
    'Phone' : Phone,
    'isField' : isField,
    'isSelected' : isSelected,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.CustomerContactList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerRef", type: "string", max: 50 },
    ],
  },
});*/

class CustomerContactListStore {
  static String name = 'CustomerContactListStore';

    final String Changed; //date
    final String ChangedId; //string
    final String ContactName; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerId; //int
    final String CustomerRef; //string
    final String Disabled; //boolean
    final String Id; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  CustomerContactListStore(
    this.Changed,
    this.ChangedId,
    this.ContactName,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.CustomerRef,
    this.Disabled,
    this.Id,
    this.isField,
    this.isTmpRec,
  );

  CustomerContactListStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ContactName = json['ContactName'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerRef = json['CustomerRef'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ContactName' : ContactName,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'CustomerRef' : CustomerRef,
    'Disabled' : Disabled,
    'Id' : Id,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.CustomerFavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
});*/

class CustomerFavoriteArticleStore {
  static String name = 'CustomerFavoriteArticleStore';

    final String AccountNo; //string
    final String ArticleId; //int
    final String ArticleNo; //string
    final String Changed; //date
    final String ChangedId; //string
    final String Chargeable; //bool
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerId; //int
    final String Description; //string
    final String Disabled; //boolean
    final String FavoriteListId; //int
    final String FullDescription; //string
    final String Id; //int
    final String ItemUnitId; //int
    final String Payoff; //bool
    final String isField; //boolean
    final String isTmpRec; //boolean

  CustomerFavoriteArticleStore(
    this.AccountNo,
    this.ArticleId,
    this.ArticleNo,
    this.Changed,
    this.ChangedId,
    this.Chargeable,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.Description,
    this.Disabled,
    this.FavoriteListId,
    this.FullDescription,
    this.Id,
    this.ItemUnitId,
    this.Payoff,
    this.isField,
    this.isTmpRec,
  );

  CustomerFavoriteArticleStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ArticleId = json['ArticleId'] ?? '',
    ArticleNo = json['ArticleNo'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Chargeable = json['Chargeable'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FavoriteListId = json['FavoriteListId'] ?? '',
    FullDescription = json['FullDescription'] ?? '',
    Id = json['Id'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    Payoff = json['Payoff'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ArticleId' : ArticleId,
    'ArticleNo' : ArticleNo,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Chargeable' : Chargeable,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'Description' : Description,
    'Disabled' : Disabled,
    'FavoriteListId' : FavoriteListId,
    'FullDescription' : FullDescription,
    'Id' : Id,
    'ItemUnitId' : ItemUnitId,
    'Payoff' : Payoff,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.CustomerList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "CreditRisk", type: "boolean" },
      {
        name: "CustomerId",
        type: "int",
        persist: !1,
        convert: function (b, a) {
          return a.get("Id");
        },
      },
    ],
  },
});*/

class CustomerListStore {
  static String name = 'CustomerListStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CreditRisk; //boolean
    final String CustomerId; //int
    final String CustomerName; //string
    final String CustomerNo; //string
    final String Disabled; //boolean
    final String Id; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  CustomerListStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditRisk,
    this.CustomerId,
    this.CustomerName,
    this.CustomerNo,
    this.Disabled,
    this.Id,
    this.isField,
    this.isTmpRec,
  );

  CustomerListStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditRisk = json['CreditRisk'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    CustomerNo = json['CustomerNo'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditRisk' : CreditRisk,
    'CustomerId' : CustomerId,
    'CustomerName' : CustomerName,
    'CustomerNo' : CustomerNo,
    'Disabled' : Disabled,
    'Id' : Id,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.CustomerPricelistItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CustomerId", type: "int", meType: "meMediumText", useNull: !0 },
      {
        name: "ProfessionItemId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      { name: "PriceUnit", type: "float", meType: "meMoney" },
    ],
  },
});*/

class CustomerPricelistItemStore {
  static String name = 'CustomerPricelistItemStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? CustomerId; //int
    final String Disabled; //boolean
    final String Id; //int
    final String PriceUnit; //float
    final String? ProfessionItemId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  CustomerPricelistItemStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.Disabled,
    this.Id,
    this.PriceUnit,
    this.ProfessionItemId,
    this.isField,
    this.isTmpRec,
  );

  CustomerPricelistItemStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    ProfessionItemId = json['ProfessionItemId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'Disabled' : Disabled,
    'Id' : Id,
    'PriceUnit' : PriceUnit,
    'ProfessionItemId' : ProfessionItemId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.CustomerType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }] },
});*/

class CustomerTypeStore {
  static String name = 'CustomerTypeStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String TypeName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  CustomerTypeStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.TypeName,
    this.isField,
    this.isTmpRec,
  );

  CustomerTypeStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    TypeName = json['TypeName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'TypeName' : TypeName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Diary", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "RegDate", type: "string", meType: "meDate" },
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      { name: "CurrentWork", type: "string", meType: "meMediumText" },
      { name: "FinishedWork", type: "string", meType: "meMediumText" },
      { name: "WorkProblems", type: "string", meType: "meMediumText" },
      { name: "ChangeAdditionNotes", type: "string", meType: "meMediumText" },
      {
        name: "Time1",
        type: "date",
        meType: "meTimeStamp",
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "Time1Display",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
        convert: function (b, a) {
          return a.timeDisplay(b, a, "Time1");
        },
      },
      { name: "Temperature1", type: "float", meType: "meQty" },
      { name: "Precipitation1", type: "string", meType: "meMediumText" },
      {
        name: "Time2",
        type: "date",
        meType: "meTimeStamp",
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "Time2Display",
        type: "string",
        meType: "meTimeStamp",
        persist: !1,
        convert: function (b, a) {
          return a.timeDisplay(b, a, "Time2");
        },
      },
      { name: "Temperature2", type: "float", meType: "meQty" },
      { name: "Precipitation2", type: "string", meType: "meMediumText" },
      { name: "WorkforceCount", type: "int", meType: "meInt" },
      { name: "WorkforceNotes", type: "string", meType: "meMediumText" },
      { name: "HasStaffLog", type: "boolean" },
      { name: "UserId", type: "int", useNull: !0 },
      { name: "KPIName", type: "string" },
      { name: "MaterialTemp1", type: "float", meType: "meQty", useNull: !0 },
      { name: "MaterialTemp2", type: "float", meType: "meQty", useNull: !0 },
    ],
  },
});*/

class DiaryStore {
  static String name = 'DiaryStore';

    final String ChangeAdditionNotes; //string
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CurrentWork; //string
    final String Disabled; //boolean
    final String FinishedWork; //string
    final String HasStaffLog; //boolean
    final String Id; //int
    final String KPIName; //string
    final String? MaterialTemp1; //float
    final String? MaterialTemp2; //float
    final String Precipitation1; //string
    final String Precipitation2; //string
    final String ProjectId; //int
    final String RegDate; //string
    final String Temperature1; //float
    final String Temperature2; //float
    final String Time1; //date
    final String Time1Display; //string
    final String Time2; //date
    final String Time2Display; //string
    final String? UserId; //int
    final String WorkProblems; //string
    final String WorkforceCount; //int
    final String WorkforceNotes; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  DiaryStore(
    this.ChangeAdditionNotes,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CurrentWork,
    this.Disabled,
    this.FinishedWork,
    this.HasStaffLog,
    this.Id,
    this.KPIName,
    this.MaterialTemp1,
    this.MaterialTemp2,
    this.Precipitation1,
    this.Precipitation2,
    this.ProjectId,
    this.RegDate,
    this.Temperature1,
    this.Temperature2,
    this.Time1,
    this.Time1Display,
    this.Time2,
    this.Time2Display,
    this.UserId,
    this.WorkProblems,
    this.WorkforceCount,
    this.WorkforceNotes,
    this.isField,
    this.isTmpRec,
  );

  DiaryStore.fromJson(Map<String, dynamic> json) : 
    ChangeAdditionNotes = json['ChangeAdditionNotes'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CurrentWork = json['CurrentWork'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FinishedWork = json['FinishedWork'] ?? '',
    HasStaffLog = json['HasStaffLog'] ?? '',
    Id = json['Id'] ?? '',
    KPIName = json['KPIName'] ?? '',
    MaterialTemp1 = json['MaterialTemp1'] ?? '',
    MaterialTemp2 = json['MaterialTemp2'] ?? '',
    Precipitation1 = json['Precipitation1'] ?? '',
    Precipitation2 = json['Precipitation2'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    RegDate = json['RegDate'] ?? '',
    Temperature1 = json['Temperature1'] ?? '',
    Temperature2 = json['Temperature2'] ?? '',
    Time1 = json['Time1'] ?? '',
    Time1Display = json['Time1Display'] ?? '',
    Time2 = json['Time2'] ?? '',
    Time2Display = json['Time2Display'] ?? '',
    UserId = json['UserId'] ?? '',
    WorkProblems = json['WorkProblems'] ?? '',
    WorkforceCount = json['WorkforceCount'] ?? '',
    WorkforceNotes = json['WorkforceNotes'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'ChangeAdditionNotes' : ChangeAdditionNotes,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CurrentWork' : CurrentWork,
    'Disabled' : Disabled,
    'FinishedWork' : FinishedWork,
    'HasStaffLog' : HasStaffLog,
    'Id' : Id,
    'KPIName' : KPIName,
    'MaterialTemp1' : MaterialTemp1,
    'MaterialTemp2' : MaterialTemp2,
    'Precipitation1' : Precipitation1,
    'Precipitation2' : Precipitation2,
    'ProjectId' : ProjectId,
    'RegDate' : RegDate,
    'Temperature1' : Temperature1,
    'Temperature2' : Temperature2,
    'Time1' : Time1,
    'Time1Display' : Time1Display,
    'Time2' : Time2,
    'Time2Display' : Time2Display,
    'UserId' : UserId,
    'WorkProblems' : WorkProblems,
    'WorkforceCount' : WorkforceCount,
    'WorkforceNotes' : WorkforceNotes,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ExternalWorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "IsDefaultStatus", type: "bool", defaultValue: !1 },
      { name: "IsSignatureStatus", type: "bool", defaultValue: !1 },
    ],
  },
});*/

class ExternalWorkOrderStatusStore {
  static String name = 'ExternalWorkOrderStatusStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String IsDefaultStatus; //bool
    final String IsSignatureStatus; //bool
    final String StatusCode; //int
    final String StatusColor; //string
    final String StatusName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ExternalWorkOrderStatusStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.IsDefaultStatus,
    this.IsSignatureStatus,
    this.StatusCode,
    this.StatusColor,
    this.StatusName,
    this.isField,
    this.isTmpRec,
  );

  ExternalWorkOrderStatusStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    IsDefaultStatus = json['IsDefaultStatus'] ?? '',
    IsSignatureStatus = json['IsSignatureStatus'] ?? '',
    StatusCode = json['StatusCode'] ?? '',
    StatusColor = json['StatusColor'] ?? '',
    StatusName = json['StatusName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'IsDefaultStatus' : IsDefaultStatus,
    'IsSignatureStatus' : IsSignatureStatus,
    'StatusCode' : StatusCode,
    'StatusColor' : StatusColor,
    'StatusName' : StatusName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.FactoryArticleItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FactoryPricelistId", type: "int" },
      { name: "ArticleId", type: "int", useNull: !0 },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").findRecord(
            "Id",
            a.get("ItemUnitId")
          );
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
    ],
  },
});*/

class FactoryArticleItemStore {
  static String name = 'FactoryArticleItemStore';

    final String AccountNo; //string
    final String? ArticleId; //int
    final String ArticleNo; //string
    final String Changed; //date
    final String ChangedId; //string
    final String CostUnit; //float
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Description; //string
    final String Disabled; //boolean
    final String FactoryPricelistId; //int
    final String FullDescription; //string
    final String Id; //int
    final String ItemUnitId; //int
    final String PriceUnit; //float
    final String isField; //boolean
    final String isTmpRec; //boolean

  FactoryArticleItemStore(
    this.AccountNo,
    this.ArticleId,
    this.ArticleNo,
    this.Changed,
    this.ChangedId,
    this.CostUnit,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Description,
    this.Disabled,
    this.FactoryPricelistId,
    this.FullDescription,
    this.Id,
    this.ItemUnitId,
    this.PriceUnit,
    this.isField,
    this.isTmpRec,
  );

  FactoryArticleItemStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ArticleId = json['ArticleId'] ?? '',
    ArticleNo = json['ArticleNo'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CostUnit = json['CostUnit'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FactoryPricelistId = json['FactoryPricelistId'] ?? '',
    FullDescription = json['FullDescription'] ?? '',
    Id = json['Id'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ArticleId' : ArticleId,
    'ArticleNo' : ArticleNo,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CostUnit' : CostUnit,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Description' : Description,
    'Disabled' : Disabled,
    'FactoryPricelistId' : FactoryPricelistId,
    'FullDescription' : FullDescription,
    'Id' : Id,
    'ItemUnitId' : ItemUnitId,
    'PriceUnit' : PriceUnit,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.FactoryPricelist", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }] },
});*/

class FactoryPricelistStore {
  static String name = 'FactoryPricelistStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String Name; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  FactoryPricelistStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.Name,
    this.isField,
    this.isTmpRec,
  );

  FactoryPricelistStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'Name' : Name,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.FavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
});*/

class FavoriteArticleStore {
  static String name = 'FavoriteArticleStore';

    final String AccountNo; //string
    final String ArticleId; //int
    final String ArticleNo; //string
    final String Changed; //date
    final String ChangedId; //string
    final String Chargeable; //bool
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Description; //string
    final String Disabled; //boolean
    final String FavoriteListId; //int
    final String FullDescription; //string
    final String Id; //int
    final String ItemUnitId; //int
    final String Payoff; //bool
    final String isField; //boolean
    final String isTmpRec; //boolean

  FavoriteArticleStore(
    this.AccountNo,
    this.ArticleId,
    this.ArticleNo,
    this.Changed,
    this.ChangedId,
    this.Chargeable,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Description,
    this.Disabled,
    this.FavoriteListId,
    this.FullDescription,
    this.Id,
    this.ItemUnitId,
    this.Payoff,
    this.isField,
    this.isTmpRec,
  );

  FavoriteArticleStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ArticleId = json['ArticleId'] ?? '',
    ArticleNo = json['ArticleNo'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Chargeable = json['Chargeable'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FavoriteListId = json['FavoriteListId'] ?? '',
    FullDescription = json['FullDescription'] ?? '',
    Id = json['Id'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    Payoff = json['Payoff'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ArticleId' : ArticleId,
    'ArticleNo' : ArticleNo,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Chargeable' : Chargeable,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Description' : Description,
    'Disabled' : Disabled,
    'FavoriteListId' : FavoriteListId,
    'FullDescription' : FullDescription,
    'Id' : Id,
    'ItemUnitId' : ItemUnitId,
    'Payoff' : Payoff,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.FavoriteList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string" },
      { name: "IsCustomerList", type: "bool" },
      { name: "IsGlobal", type: "bool" },
    ],
  },
});*/

class FavoriteListStore {
  static String name = 'FavoriteListStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String IsCustomerList; //bool
    final String IsGlobal; //bool
    final String Name; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  FavoriteListStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.IsCustomerList,
    this.IsGlobal,
    this.Name,
    this.isField,
    this.isTmpRec,
  );

  FavoriteListStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    IsCustomerList = json['IsCustomerList'] ?? '',
    IsGlobal = json['IsGlobal'] ?? '',
    Name = json['Name'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'IsCustomerList' : IsCustomerList,
    'IsGlobal' : IsGlobal,
    'Name' : Name,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.FormValidation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StoreName", type: "string", max: 50 },
      { name: "FieldName", type: "string", max: 50 },
      { name: "AllowBlank", type: "boolean" },
      { name: "ValidationType", type: "string", max: 50 },
      { name: "RegEx", type: "string", max: 1000 },
      { name: "Hidden", type: "boolean" },
    ],
  },
});*/

class FormValidationStore {
  static String name = 'FormValidationStore';

    final String AllowBlank; //boolean
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String FieldName; //string
    final String Hidden; //boolean
    final String Id; //int
    final String RegEx; //string
    final String StoreName; //string
    final String ValidationType; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  FormValidationStore(
    this.AllowBlank,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.FieldName,
    this.Hidden,
    this.Id,
    this.RegEx,
    this.StoreName,
    this.ValidationType,
    this.isField,
    this.isTmpRec,
  );

  FormValidationStore.fromJson(Map<String, dynamic> json) : 
    AllowBlank = json['AllowBlank'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FieldName = json['FieldName'] ?? '',
    Hidden = json['Hidden'] ?? '',
    Id = json['Id'] ?? '',
    RegEx = json['RegEx'] ?? '',
    StoreName = json['StoreName'] ?? '',
    ValidationType = json['ValidationType'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AllowBlank' : AllowBlank,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'FieldName' : FieldName,
    'Hidden' : Hidden,
    'Id' : Id,
    'RegEx' : RegEx,
    'StoreName' : StoreName,
    'ValidationType' : ValidationType,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.FrameworkArticleItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FrameworkContractId", type: "int" },
      { name: "ArticleId", type: "int", useNull: !0 },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (c, a) {
          var b = Ext.getStore("MyItemUnitStore").getById(a.get("ItemUnitId"));
          return (
            a.get("Description") + (b ? " (" + b.get("UnitName") + ")" : "")
          );
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
});*/

class FrameworkArticleItemStore {
  static String name = 'FrameworkArticleItemStore';

    final String AccountNo; //string
    final String? ArticleCategoryId; //int
    final String? ArticleId; //int
    final String ArticleNo; //string
    final String Changed; //date
    final String ChangedId; //string
    final String Chargeable; //bool
    final String CostUnit; //float
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? CreditProjectId; //int
    final String Description; //string
    final String Disabled; //boolean
    final String FrameworkContractId; //int
    final String FullDescription; //string
    final String Id; //int
    final String ItemUnitId; //int
    final String Payoff; //bool
    final String PriceUnit; //float
    final String isField; //boolean
    final String isTmpRec; //boolean

  FrameworkArticleItemStore(
    this.AccountNo,
    this.ArticleCategoryId,
    this.ArticleId,
    this.ArticleNo,
    this.Changed,
    this.ChangedId,
    this.Chargeable,
    this.CostUnit,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditProjectId,
    this.Description,
    this.Disabled,
    this.FrameworkContractId,
    this.FullDescription,
    this.Id,
    this.ItemUnitId,
    this.Payoff,
    this.PriceUnit,
    this.isField,
    this.isTmpRec,
  );

  FrameworkArticleItemStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ArticleCategoryId = json['ArticleCategoryId'] ?? '',
    ArticleId = json['ArticleId'] ?? '',
    ArticleNo = json['ArticleNo'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Chargeable = json['Chargeable'] ?? '',
    CostUnit = json['CostUnit'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditProjectId = json['CreditProjectId'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FrameworkContractId = json['FrameworkContractId'] ?? '',
    FullDescription = json['FullDescription'] ?? '',
    Id = json['Id'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    Payoff = json['Payoff'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ArticleCategoryId' : ArticleCategoryId,
    'ArticleId' : ArticleId,
    'ArticleNo' : ArticleNo,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Chargeable' : Chargeable,
    'CostUnit' : CostUnit,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditProjectId' : CreditProjectId,
    'Description' : Description,
    'Disabled' : Disabled,
    'FrameworkContractId' : FrameworkContractId,
    'FullDescription' : FullDescription,
    'Id' : Id,
    'ItemUnitId' : ItemUnitId,
    'Payoff' : Payoff,
    'PriceUnit' : PriceUnit,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.FrameworkContract", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string", max: 50 },
      { name: "CustomerId", type: "int" },
      { name: "LimitArticles", type: "bool" },
    ],
  },
});*/

class FrameworkContractStore {
  static String name = 'FrameworkContractStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerId; //int
    final String Disabled; //boolean
    final String Id; //int
    final String LimitArticles; //bool
    final String Name; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  FrameworkContractStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.Disabled,
    this.Id,
    this.LimitArticles,
    this.Name,
    this.isField,
    this.isTmpRec,
  );

  FrameworkContractStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    LimitArticles = json['LimitArticles'] ?? '',
    Name = json['Name'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'Disabled' : Disabled,
    'Id' : Id,
    'LimitArticles' : LimitArticles,
    'Name' : Name,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Group", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "GroupName", type: "string", max: 50 }] },
});*/

class GroupStore {
  static String name = 'GroupStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String GroupName; //string
    final String Id; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  GroupStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.GroupName,
    this.Id,
    this.isField,
    this.isTmpRec,
  );

  GroupStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    GroupName = json['GroupName'] ?? '',
    Id = json['Id'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'GroupName' : GroupName,
    'Id' : Id,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.HourlyRate", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProfessionItemId", type: "int" },
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionDescription", type: "string", max: 50 },
      { name: "PriceUnit", type: "float" },
      { name: "UnitName", type: "string", max: 50 },
      { name: "CustomerPrice", type: "float" },
      { name: "ProjectPrice", type: "float" },
    ],
  },
});*/

class HourlyRateStore {
  static String name = 'HourlyRateStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerPrice; //float
    final String Disabled; //boolean
    final String Id; //int
    final String PriceUnit; //float
    final String ProfessionCode; //string
    final String ProfessionDescription; //string
    final String ProfessionItemId; //int
    final String ProjectPrice; //float
    final String UnitName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  HourlyRateStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerPrice,
    this.Disabled,
    this.Id,
    this.PriceUnit,
    this.ProfessionCode,
    this.ProfessionDescription,
    this.ProfessionItemId,
    this.ProjectPrice,
    this.UnitName,
    this.isField,
    this.isTmpRec,
  );

  HourlyRateStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerPrice = json['CustomerPrice'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    ProfessionCode = json['ProfessionCode'] ?? '',
    ProfessionDescription = json['ProfessionDescription'] ?? '',
    ProfessionItemId = json['ProfessionItemId'] ?? '',
    ProjectPrice = json['ProjectPrice'] ?? '',
    UnitName = json['UnitName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerPrice' : CustomerPrice,
    'Disabled' : Disabled,
    'Id' : Id,
    'PriceUnit' : PriceUnit,
    'ProfessionCode' : ProfessionCode,
    'ProfessionDescription' : ProfessionDescription,
    'ProfessionItemId' : ProfessionItemId,
    'ProjectPrice' : ProjectPrice,
    'UnitName' : UnitName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.InfoMessage", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Date",
        type: "string",
        convert: function (b, a) {
          return Ext.Date.format(a.get("Created"), "Y-m-d");
        },
      },
      { name: "Message", type: "string" },
      { name: "ShowInMobile", type: "bool" },
      { name: "GroupId", type: "int" },
    ],
  },
});*/

class InfoMessageStore {
  static String name = 'InfoMessageStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Date; //string
    final String Disabled; //boolean
    final String GroupId; //int
    final String Id; //int
    final String Message; //string
    final String ShowInMobile; //bool
    final String isField; //boolean
    final String isTmpRec; //boolean

  InfoMessageStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Date,
    this.Disabled,
    this.GroupId,
    this.Id,
    this.Message,
    this.ShowInMobile,
    this.isField,
    this.isTmpRec,
  );

  InfoMessageStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Date = json['Date'] ?? '',
    Disabled = json['Disabled'] ?? '',
    GroupId = json['GroupId'] ?? '',
    Id = json['Id'] ?? '',
    Message = json['Message'] ?? '',
    ShowInMobile = json['ShowInMobile'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Date' : Date,
    'Disabled' : Disabled,
    'GroupId' : GroupId,
    'Id' : Id,
    'Message' : Message,
    'ShowInMobile' : ShowInMobile,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.InfoNote", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "TableName", type: "string", max: 50 },
      { name: "TableId", type: "int" },
      { name: "UserId", type: "int" },
      { name: "Note", type: "string" },
    ],
  },
});*/

class InfoNoteStore {
  static String name = 'InfoNoteStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String Note; //string
    final String TableId; //int
    final String TableName; //string
    final String UserId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  InfoNoteStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.Note,
    this.TableId,
    this.TableName,
    this.UserId,
    this.isField,
    this.isTmpRec,
  );

  InfoNoteStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    Note = json['Note'] ?? '',
    TableId = json['TableId'] ?? '',
    TableName = json['TableName'] ?? '',
    UserId = json['UserId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'Note' : Note,
    'TableId' : TableId,
    'TableName' : TableName,
    'UserId' : UserId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Invoice", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "InvoiceId", type: "int" },
      { name: "RowNo", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      { name: "Unit", type: "string", max: 5 },
      { name: "Amount", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "Markup", type: "int" },
      {
        name: "TotalPrice",
        type: "float",
        persist: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("Amount") * a.get("PriceUnit");
        },
      },
      { name: "RowFormat", type: "string" },
    ],
    validations: [
      {
        type: "custom",
        field: "InvoiceTotal",
        validate: function (b, a) {
          return a.get("TaxReductionAmount") <= b;
        },
        message:
          "Tax Reduction Amount should be less or equeal to Invoice Total value.",
      },
    ],
  },
});*/

class InvoiceStore {
  static String name = 'InvoiceStore';

    final String Amount; //int
    final String Changed; //date
    final String ChangedId; //string
    final String CodeNo; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Description; //string
    final String Disabled; //boolean
    final String Id; //int
    final String InvoiceId; //int
    final String Markup; //int
    final String PriceUnit; //float
    final String RowFormat; //string
    final String RowNo; //int
    final String RowType; //string
    final String TotalPrice; //float
    final String Unit; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  InvoiceStore(
    this.Amount,
    this.Changed,
    this.ChangedId,
    this.CodeNo,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Description,
    this.Disabled,
    this.Id,
    this.InvoiceId,
    this.Markup,
    this.PriceUnit,
    this.RowFormat,
    this.RowNo,
    this.RowType,
    this.TotalPrice,
    this.Unit,
    this.isField,
    this.isTmpRec,
  );

  InvoiceStore.fromJson(Map<String, dynamic> json) : 
    Amount = json['Amount'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CodeNo = json['CodeNo'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    InvoiceId = json['InvoiceId'] ?? '',
    Markup = json['Markup'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    RowFormat = json['RowFormat'] ?? '',
    RowNo = json['RowNo'] ?? '',
    RowType = json['RowType'] ?? '',
    TotalPrice = json['TotalPrice'] ?? '',
    Unit = json['Unit'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Amount' : Amount,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CodeNo' : CodeNo,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Description' : Description,
    'Disabled' : Disabled,
    'Id' : Id,
    'InvoiceId' : InvoiceId,
    'Markup' : Markup,
    'PriceUnit' : PriceUnit,
    'RowFormat' : RowFormat,
    'RowNo' : RowNo,
    'RowType' : RowType,
    'TotalPrice' : TotalPrice,
    'Unit' : Unit,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.InvoiceRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "InvoiceId", type: "int" },
      { name: "RowNo", type: "int" },
      { name: "RowType", type: "string", max: 1 },
      { name: "CodeNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      { name: "Unit", type: "string", max: 5 },
      { name: "Amount", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "Markup", type: "int" },
      {
        name: "TotalPrice",
        type: "float",
        persist: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("Amount") * a.get("PriceUnit");
        },
      },
      { name: "RowFormat", type: "string" },
    ],
  },
});*/

class InvoiceRowStore {
  static String name = 'InvoiceRowStore';

    final String Amount; //int
    final String Changed; //date
    final String ChangedId; //string
    final String CodeNo; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Description; //string
    final String Disabled; //boolean
    final String Id; //int
    final String InvoiceId; //int
    final String Markup; //int
    final String PriceUnit; //float
    final String RowFormat; //string
    final String RowNo; //int
    final String RowType; //string
    final String TotalPrice; //float
    final String Unit; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  InvoiceRowStore(
    this.Amount,
    this.Changed,
    this.ChangedId,
    this.CodeNo,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Description,
    this.Disabled,
    this.Id,
    this.InvoiceId,
    this.Markup,
    this.PriceUnit,
    this.RowFormat,
    this.RowNo,
    this.RowType,
    this.TotalPrice,
    this.Unit,
    this.isField,
    this.isTmpRec,
  );

  InvoiceRowStore.fromJson(Map<String, dynamic> json) : 
    Amount = json['Amount'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CodeNo = json['CodeNo'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    InvoiceId = json['InvoiceId'] ?? '',
    Markup = json['Markup'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    RowFormat = json['RowFormat'] ?? '',
    RowNo = json['RowNo'] ?? '',
    RowType = json['RowType'] ?? '',
    TotalPrice = json['TotalPrice'] ?? '',
    Unit = json['Unit'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Amount' : Amount,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CodeNo' : CodeNo,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Description' : Description,
    'Disabled' : Disabled,
    'Id' : Id,
    'InvoiceId' : InvoiceId,
    'Markup' : Markup,
    'PriceUnit' : PriceUnit,
    'RowFormat' : RowFormat,
    'RowNo' : RowNo,
    'RowType' : RowType,
    'TotalPrice' : TotalPrice,
    'Unit' : Unit,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ItemUnit", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UnitName", type: "string", max: 10 },
      { name: "Description", type: "string", max: 10 },
    ],
  },
});*/

class ItemUnitStore {
  static String name = 'ItemUnitStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Description; //string
    final String Disabled; //boolean
    final String Id; //int
    final String UnitName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ItemUnitStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Description,
    this.Disabled,
    this.Id,
    this.UnitName,
    this.isField,
    this.isTmpRec,
  );

  ItemUnitStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    UnitName = json['UnitName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Description' : Description,
    'Disabled' : Disabled,
    'Id' : Id,
    'UnitName' : UnitName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.MainMenu", {
  extend: Ext.data.Model,
  config: {
    fields: [
      { name: "MenuText" },
      { name: "ShortMenuText" },
      { name: "View" },
      { name: "Store" },
      { name: "Active" },
      { name: "Picto" },
      { name: "Title" },
    ],
  },
});*/

class MainMenuStore {
  static String name = 'MainMenuStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  MainMenuStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.isField,
    this.isTmpRec,
  );

  MainMenuStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.MarkupModel", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Name", type: "string", max: 50 },
      { name: "Code", type: "string", max: 10 },
    ],
  },
});*/

class MarkupModelStore {
  static String name = 'MarkupModelStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Code; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String Name; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  MarkupModelStore(
    this.Changed,
    this.ChangedId,
    this.Code,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.Name,
    this.isField,
    this.isTmpRec,
  );

  MarkupModelStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Code = json['Code'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Code' : Code,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'Name' : Name,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.MarkupModelItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "MarkupModelId", type: "int" },
      { name: "ResourceAccount", type: "string", max: 5 },
      { name: "Description", type: "string", max: 50 },
      { name: "MarkupCF", type: "int" },
    ],
  },
});*/

class MarkupModelItemStore {
  static String name = 'MarkupModelItemStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Description; //string
    final String Disabled; //boolean
    final String Id; //int
    final String MarkupCF; //int
    final String MarkupModelId; //int
    final String ResourceAccount; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  MarkupModelItemStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Description,
    this.Disabled,
    this.Id,
    this.MarkupCF,
    this.MarkupModelId,
    this.ResourceAccount,
    this.isField,
    this.isTmpRec,
  );

  MarkupModelItemStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    MarkupCF = json['MarkupCF'] ?? '',
    MarkupModelId = json['MarkupModelId'] ?? '',
    ResourceAccount = json['ResourceAccount'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Description' : Description,
    'Disabled' : Disabled,
    'Id' : Id,
    'MarkupCF' : MarkupCF,
    'MarkupModelId' : MarkupModelId,
    'ResourceAccount' : ResourceAccount,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.OfficeCompany", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "CompanyName", type: "string" },
      { name: "AbsenceProjectId", type: "int" },
    ],
  },
});*/

class OfficeCompanyStore {
  static String name = 'OfficeCompanyStore';

    final String AbsenceProjectId; //int
    final String Changed; //date
    final String ChangedId; //string
    final String CompanyName; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  OfficeCompanyStore(
    this.AbsenceProjectId,
    this.Changed,
    this.ChangedId,
    this.CompanyName,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.isField,
    this.isTmpRec,
  );

  OfficeCompanyStore.fromJson(Map<String, dynamic> json) : 
    AbsenceProjectId = json['AbsenceProjectId'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CompanyName = json['CompanyName'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AbsenceProjectId' : AbsenceProjectId,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CompanyName' : CompanyName,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.OptionValue", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "SettingKey", type: "string", max: 50 },
      { name: "SettingValue", type: "string" },
      { name: "SettingDescription", type: "string" },
    ],
  },
});*/

class OptionValueStore {
  static String name = 'OptionValueStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String SettingDescription; //string
    final String SettingKey; //string
    final String SettingValue; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  OptionValueStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.SettingDescription,
    this.SettingKey,
    this.SettingValue,
    this.isField,
    this.isTmpRec,
  );

  OptionValueStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    SettingDescription = json['SettingDescription'] ?? '',
    SettingKey = json['SettingKey'] ?? '',
    SettingValue = json['SettingValue'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'SettingDescription' : SettingDescription,
    'SettingKey' : SettingKey,
    'SettingValue' : SettingValue,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Phrase", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Phrase",
        type: "string",
        meType: "meMediumText",
        display: T("Phrasetext"),
      },
    ],
  },
});*/

class PhraseStore {
  static String name = 'PhraseStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String Phrase; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  PhraseStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.Phrase,
    this.isField,
    this.isTmpRec,
  );

  PhraseStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    Phrase = json['Phrase'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'Phrase' : Phrase,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.PriceType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }] },
});*/

class PriceTypeStore {
  static String name = 'PriceTypeStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String TypeName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  PriceTypeStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.TypeName,
    this.isField,
    this.isTmpRec,
  );

  PriceTypeStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    TypeName = json['TypeName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'TypeName' : TypeName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProfessionItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionDescription", type: "string", max: 50 },
      { name: "ItemUnitId", type: "int" },
      { name: "PriceUnit", type: "float" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "SalaryNo", type: "string", max: 10 },
      { name: "CostUnit", type: "float" },
      { name: "ProfessionGroup", type: "string", max: 50 },
      { name: "Chargeable", type: "bool" },
    ],
  },
});*/

class ProfessionItemStore {
  static String name = 'ProfessionItemStore';

    final String AccountNo; //string
    final String Changed; //date
    final String ChangedId; //string
    final String Chargeable; //bool
    final String CostUnit; //float
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String ItemUnitId; //int
    final String PriceUnit; //float
    final String ProfessionCode; //string
    final String ProfessionDescription; //string
    final String ProfessionGroup; //string
    final String SalaryNo; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProfessionItemStore(
    this.AccountNo,
    this.Changed,
    this.ChangedId,
    this.Chargeable,
    this.CostUnit,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.ItemUnitId,
    this.PriceUnit,
    this.ProfessionCode,
    this.ProfessionDescription,
    this.ProfessionGroup,
    this.SalaryNo,
    this.isField,
    this.isTmpRec,
  );

  ProfessionItemStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Chargeable = json['Chargeable'] ?? '',
    CostUnit = json['CostUnit'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    ProfessionCode = json['ProfessionCode'] ?? '',
    ProfessionDescription = json['ProfessionDescription'] ?? '',
    ProfessionGroup = json['ProfessionGroup'] ?? '',
    SalaryNo = json['SalaryNo'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Chargeable' : Chargeable,
    'CostUnit' : CostUnit,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'ItemUnitId' : ItemUnitId,
    'PriceUnit' : PriceUnit,
    'ProfessionCode' : ProfessionCode,
    'ProfessionDescription' : ProfessionDescription,
    'ProfessionGroup' : ProfessionGroup,
    'SalaryNo' : SalaryNo,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Project", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ParentProjectId", type: "int", allowBlank: !1, useNull: !0 },
      { name: "ProjectNo", type: "int", persist: !1, sortType: "asInt" },
      { name: "ProjectStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50, allowBlank: !1 },
      { name: "PriceTypeId", type: "int" },
      { name: "ProjectTypeId", type: "int" },
      { name: "ProjectManagerId", type: "int" },
      { name: "WorkLeaderId", type: "int" },
      { name: "TagField1Id", type: "int", useNull: !0 },
      { name: "TagField2Id", type: "int", useNull: !0 },
      { name: "ProjectNote", type: "string", useNull: !0 },
      { name: "CustomerId", type: "int", useNull: !0 },
      { name: "CustomerName", type: "string" },
      { name: "CreditRisk", type: "boolean" },
      { name: "ContactName", type: "string" },
      { name: "CustomerAgentId", type: "int", useNull: !0 },
      { name: "CustomerRef", type: "string", max: 50 },
      { name: "ProjectStart", type: "date", dateFormat: "Y-m-d" },
      { name: "ProjectEnd", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "MarkupModelId", type: "int", allowBlank: !1 },
      { name: "WorkplaceAddress1", type: "string", max: 50 },
      { name: "WorkplaceAddress2", type: "string", max: 50 },
      { name: "WorkplaceZipcode", type: "string", max: 50 },
      { name: "WorkplaceCity", type: "string", max: 50 },
      { name: "WorkplaceDistance", type: "int" },
      { name: "FinalInspectionDate", type: "date", dateFormat: "Y-m-d" },
      { name: "GuaranteeTime", type: "int" },
      { name: "GuaranteeInspectionDate", type: "date", dateFormat: "Y-m-d" },
      { name: "WOFavorite", type: "boolean", persist: !1 },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
    ],
  },
});*/

class ProjectStore {
  static String name = 'ProjectStore';

    final String Changed; //date
    final String ChangedId; //string
    final String ContactName; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CreditRisk; //boolean
    final String? CustomerAgentId; //int
    final String? CustomerId; //int
    final String CustomerName; //string
    final String CustomerRef; //string
    final String Disabled; //boolean
    final String FinalInspectionDate; //date
    final String? FrameworkContractId; //int
    final String GuaranteeInspectionDate; //date
    final String GuaranteeTime; //int
    final String Id; //int
    final String MarkupModelId; //int
    final String? ParentProjectId; //int
    final String PriceTypeId; //int
    final String? ProjectEnd; //date
    final String ProjectManagerId; //int
    final String ProjectName; //string
    final String ProjectNo; //int
    final String? ProjectNote; //string
    final String ProjectStart; //date
    final String ProjectStatusId; //int
    final String ProjectTypeId; //int
    final String? TagField1Id; //int
    final String? TagField2Id; //int
    final String WOFavorite; //boolean
    final String WorkLeaderId; //int
    final String WorkplaceAddress1; //string
    final String WorkplaceAddress2; //string
    final String WorkplaceCity; //string
    final String WorkplaceDistance; //int
    final String WorkplaceZipcode; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectStore(
    this.Changed,
    this.ChangedId,
    this.ContactName,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditRisk,
    this.CustomerAgentId,
    this.CustomerId,
    this.CustomerName,
    this.CustomerRef,
    this.Disabled,
    this.FinalInspectionDate,
    this.FrameworkContractId,
    this.GuaranteeInspectionDate,
    this.GuaranteeTime,
    this.Id,
    this.MarkupModelId,
    this.ParentProjectId,
    this.PriceTypeId,
    this.ProjectEnd,
    this.ProjectManagerId,
    this.ProjectName,
    this.ProjectNo,
    this.ProjectNote,
    this.ProjectStart,
    this.ProjectStatusId,
    this.ProjectTypeId,
    this.TagField1Id,
    this.TagField2Id,
    this.WOFavorite,
    this.WorkLeaderId,
    this.WorkplaceAddress1,
    this.WorkplaceAddress2,
    this.WorkplaceCity,
    this.WorkplaceDistance,
    this.WorkplaceZipcode,
    this.isField,
    this.isTmpRec,
  );

  ProjectStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ContactName = json['ContactName'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditRisk = json['CreditRisk'] ?? '',
    CustomerAgentId = json['CustomerAgentId'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    CustomerRef = json['CustomerRef'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FinalInspectionDate = json['FinalInspectionDate'] ?? '',
    FrameworkContractId = json['FrameworkContractId'] ?? '',
    GuaranteeInspectionDate = json['GuaranteeInspectionDate'] ?? '',
    GuaranteeTime = json['GuaranteeTime'] ?? '',
    Id = json['Id'] ?? '',
    MarkupModelId = json['MarkupModelId'] ?? '',
    ParentProjectId = json['ParentProjectId'] ?? '',
    PriceTypeId = json['PriceTypeId'] ?? '',
    ProjectEnd = json['ProjectEnd'] ?? '',
    ProjectManagerId = json['ProjectManagerId'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ProjectNote = json['ProjectNote'] ?? '',
    ProjectStart = json['ProjectStart'] ?? '',
    ProjectStatusId = json['ProjectStatusId'] ?? '',
    ProjectTypeId = json['ProjectTypeId'] ?? '',
    TagField1Id = json['TagField1Id'] ?? '',
    TagField2Id = json['TagField2Id'] ?? '',
    WOFavorite = json['WOFavorite'] ?? '',
    WorkLeaderId = json['WorkLeaderId'] ?? '',
    WorkplaceAddress1 = json['WorkplaceAddress1'] ?? '',
    WorkplaceAddress2 = json['WorkplaceAddress2'] ?? '',
    WorkplaceCity = json['WorkplaceCity'] ?? '',
    WorkplaceDistance = json['WorkplaceDistance'] ?? '',
    WorkplaceZipcode = json['WorkplaceZipcode'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ContactName' : ContactName,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditRisk' : CreditRisk,
    'CustomerAgentId' : CustomerAgentId,
    'CustomerId' : CustomerId,
    'CustomerName' : CustomerName,
    'CustomerRef' : CustomerRef,
    'Disabled' : Disabled,
    'FinalInspectionDate' : FinalInspectionDate,
    'FrameworkContractId' : FrameworkContractId,
    'GuaranteeInspectionDate' : GuaranteeInspectionDate,
    'GuaranteeTime' : GuaranteeTime,
    'Id' : Id,
    'MarkupModelId' : MarkupModelId,
    'ParentProjectId' : ParentProjectId,
    'PriceTypeId' : PriceTypeId,
    'ProjectEnd' : ProjectEnd,
    'ProjectManagerId' : ProjectManagerId,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ProjectNote' : ProjectNote,
    'ProjectStart' : ProjectStart,
    'ProjectStatusId' : ProjectStatusId,
    'ProjectTypeId' : ProjectTypeId,
    'TagField1Id' : TagField1Id,
    'TagField2Id' : TagField2Id,
    'WOFavorite' : WOFavorite,
    'WorkLeaderId' : WorkLeaderId,
    'WorkplaceAddress1' : WorkplaceAddress1,
    'WorkplaceAddress2' : WorkplaceAddress2,
    'WorkplaceCity' : WorkplaceCity,
    'WorkplaceDistance' : WorkplaceDistance,
    'WorkplaceZipcode' : WorkplaceZipcode,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectEconomy", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "LineType", type: "int" },
      { name: "Cost", type: "float" },
      { name: "Revenue", type: "float" },
      { name: "ContributionMargin", type: "float" },
      { name: "ContributionMarginPercent", type: "float" },
    ],
  },
});*/

class ProjectEconomyStore {
  static String name = 'ProjectEconomyStore';

    final String Changed; //date
    final String ChangedId; //string
    final String ContributionMargin; //float
    final String ContributionMarginPercent; //float
    final String Cost; //float
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String LineType; //int
    final String ProjectId; //int
    final String Revenue; //float
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectEconomyStore(
    this.Changed,
    this.ChangedId,
    this.ContributionMargin,
    this.ContributionMarginPercent,
    this.Cost,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.LineType,
    this.ProjectId,
    this.Revenue,
    this.isField,
    this.isTmpRec,
  );

  ProjectEconomyStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ContributionMargin = json['ContributionMargin'] ?? '',
    ContributionMarginPercent = json['ContributionMarginPercent'] ?? '',
    Cost = json['Cost'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    LineType = json['LineType'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    Revenue = json['Revenue'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ContributionMargin' : ContributionMargin,
    'ContributionMarginPercent' : ContributionMarginPercent,
    'Cost' : Cost,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'LineType' : LineType,
    'ProjectId' : ProjectId,
    'Revenue' : Revenue,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectEconomyBudget", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "BudgetCost", type: "float" },
      { name: "BudgetRevenue", type: "float" },
    ],
  },
});*/

class ProjectEconomyBudgetStore {
  static String name = 'ProjectEconomyBudgetStore';

    final String BudgetCost; //float
    final String BudgetRevenue; //float
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String ProjectId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectEconomyBudgetStore(
    this.BudgetCost,
    this.BudgetRevenue,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.ProjectId,
    this.isField,
    this.isTmpRec,
  );

  ProjectEconomyBudgetStore.fromJson(Map<String, dynamic> json) : 
    BudgetCost = json['BudgetCost'] ?? '',
    BudgetRevenue = json['BudgetRevenue'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'BudgetCost' : BudgetCost,
    'BudgetRevenue' : BudgetRevenue,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'ProjectId' : ProjectId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectLimited", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "Project",
        type: "string",
        convert: function (b, a) {
          return a.data.ProjectNo + ", " + a.data.ProjectName;
        },
      },
      {
        name: "ParentProjectId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Parent Project No"),
      },
      {
        name: "ProjectNo",
        type: "string",
        meType: "meShortText",
        max: 10,
        persist: !0,
        display: T("Project No"),
      },
      {
        name: "ProjectStatusId",
        type: "int",
        meType: "meMediumText",
        display: T("Project status") + T("Code"),
      },
      {
        name: "ProjectStatusCode",
        type: "int",
        meType: "meMediumText",
        display: T("Project status") + T("Code"),
      },
      {
        name: "ProjectName",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Project Name"),
      },
      {
        name: "PriceTypeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Pricetype") + T("Code"),
      },
      {
        name: "ProjectTypeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Project type") + T("Code"),
      },
      {
        name: "ProjectManagerId",
        type: "int",
        meType: "meMediumText",
        display: T("Project manager") + " " + T("Username"),
      },
      {
        name: "WorkLeaderId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Work leader") + " " + T("Username"),
      },
      {
        name: "TagField1Id",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Tag field 1"),
      },
      {
        name: "TagField2Id",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Tag field 2"),
      },
      {
        name: "CustomerId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Customer no"),
      },
      {
        name: "CustomerAgentId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Customer Contact"),
      },
      {
        name: "CustomerRef",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Customer ref."),
      },
      {
        name: "MarkupModelId",
        type: "int",
        meType: "meShortText",
        display: T("Markup model"),
      },
      {
        name: "CostCenterId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Costcenter"),
      },
      {
        name: "SellerId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Seller") + " " + T("Username"),
      },
      {
        name: "FrameworkContractId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Framework contract"),
        translate: T("FrameworkContract"),
      },
      {
        name: "PartnerSupplierId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("Partner supplier"),
      },
      {
        name: "ProjectResourceGroupId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("ProjectResourceGroupProject"),
      },
      {
        name: "WorkplaceId",
        type: "string",
        meType: "meMediumText",
        max: 50,
        allowNull: !0,
        display: T("WorkplaceId"),
      },
      {
        name: "BasicScopeId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
      },
      {
        name: "KPIRuleId",
        type: "int",
        meType: "meMediumText",
        allowNull: !0,
        display: T("KPI rule"),
      },
      { name: "WOFavorite", type: "boolean", persist: !1 },
    ],
  },
});*/

class ProjectLimitedStore {
  static String name = 'ProjectLimitedStore';

    final String BasicScopeId; //int
    final String Changed; //date
    final String ChangedId; //string
    final String CostCenterId; //int
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerAgentId; //int
    final String CustomerId; //int
    final String CustomerRef; //string
    final String Disabled; //boolean
    final String FrameworkContractId; //int
    final String Id; //int
    final String KPIRuleId; //int
    final String MarkupModelId; //int
    final String ParentProjectId; //int
    final String PartnerSupplierId; //int
    final String PriceTypeId; //int
    final String Project; //string
    final String ProjectManagerId; //int
    final String ProjectName; //string
    final String ProjectNo; //string
    final String ProjectResourceGroupId; //int
    final String ProjectStatusCode; //int
    final String ProjectStatusId; //int
    final String ProjectTypeId; //int
    final String SellerId; //int
    final String TagField1Id; //int
    final String TagField2Id; //int
    final String WOFavorite; //boolean
    final String WorkLeaderId; //int
    final String WorkplaceId; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectLimitedStore(
    this.BasicScopeId,
    this.Changed,
    this.ChangedId,
    this.CostCenterId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerAgentId,
    this.CustomerId,
    this.CustomerRef,
    this.Disabled,
    this.FrameworkContractId,
    this.Id,
    this.KPIRuleId,
    this.MarkupModelId,
    this.ParentProjectId,
    this.PartnerSupplierId,
    this.PriceTypeId,
    this.Project,
    this.ProjectManagerId,
    this.ProjectName,
    this.ProjectNo,
    this.ProjectResourceGroupId,
    this.ProjectStatusCode,
    this.ProjectStatusId,
    this.ProjectTypeId,
    this.SellerId,
    this.TagField1Id,
    this.TagField2Id,
    this.WOFavorite,
    this.WorkLeaderId,
    this.WorkplaceId,
    this.isField,
    this.isTmpRec,
  );

  ProjectLimitedStore.fromJson(Map<String, dynamic> json) : 
    BasicScopeId = json['BasicScopeId'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CostCenterId = json['CostCenterId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerAgentId = json['CustomerAgentId'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerRef = json['CustomerRef'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FrameworkContractId = json['FrameworkContractId'] ?? '',
    Id = json['Id'] ?? '',
    KPIRuleId = json['KPIRuleId'] ?? '',
    MarkupModelId = json['MarkupModelId'] ?? '',
    ParentProjectId = json['ParentProjectId'] ?? '',
    PartnerSupplierId = json['PartnerSupplierId'] ?? '',
    PriceTypeId = json['PriceTypeId'] ?? '',
    Project = json['Project'] ?? '',
    ProjectManagerId = json['ProjectManagerId'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ProjectResourceGroupId = json['ProjectResourceGroupId'] ?? '',
    ProjectStatusCode = json['ProjectStatusCode'] ?? '',
    ProjectStatusId = json['ProjectStatusId'] ?? '',
    ProjectTypeId = json['ProjectTypeId'] ?? '',
    SellerId = json['SellerId'] ?? '',
    TagField1Id = json['TagField1Id'] ?? '',
    TagField2Id = json['TagField2Id'] ?? '',
    WOFavorite = json['WOFavorite'] ?? '',
    WorkLeaderId = json['WorkLeaderId'] ?? '',
    WorkplaceId = json['WorkplaceId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'BasicScopeId' : BasicScopeId,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CostCenterId' : CostCenterId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerAgentId' : CustomerAgentId,
    'CustomerId' : CustomerId,
    'CustomerRef' : CustomerRef,
    'Disabled' : Disabled,
    'FrameworkContractId' : FrameworkContractId,
    'Id' : Id,
    'KPIRuleId' : KPIRuleId,
    'MarkupModelId' : MarkupModelId,
    'ParentProjectId' : ParentProjectId,
    'PartnerSupplierId' : PartnerSupplierId,
    'PriceTypeId' : PriceTypeId,
    'Project' : Project,
    'ProjectManagerId' : ProjectManagerId,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ProjectResourceGroupId' : ProjectResourceGroupId,
    'ProjectStatusCode' : ProjectStatusCode,
    'ProjectStatusId' : ProjectStatusId,
    'ProjectTypeId' : ProjectTypeId,
    'SellerId' : SellerId,
    'TagField1Id' : TagField1Id,
    'TagField2Id' : TagField2Id,
    'WOFavorite' : WOFavorite,
    'WorkLeaderId' : WorkLeaderId,
    'WorkplaceId' : WorkplaceId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusId", type: "int" },
      {
        name: "ProjectStatus",
        type: "string",
        sortable: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyProjectStatusStore"),
            a;
          a = c.findRecord("Id", b.get("ProjectStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusName");
          }
          return "";
        },
      },
      { name: "CustomerId", type: "int" },
      { name: "WorkplaceId", type: "string" },
      { name: "StatusCode", type: "string", sortType: "asInt" },
      { name: "ProjectName", type: "string" },
      { name: "ProjectNo", type: "string", sortType: "asInt" },
      {
        name: "Project",
        type: "string",
        convert: function (b, a) {
          return a.data.ProjectNo + ", " + a.data.ProjectName;
        },
      },
      { name: "SecReadOnly", type: "bool", persist: !1 },
      { name: "Piecework", type: "bool", persist: !1 },
      { name: "KPIRuleId", type: "int", useNull: !0 },
    ],
  },
});*/

class ProjectListStore {
  static String name = 'ProjectListStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerId; //int
    final String Disabled; //boolean
    final String Id; //int
    final String? KPIRuleId; //int
    final String Piecework; //bool
    final String Project; //string
    final String ProjectName; //string
    final String ProjectNo; //string
    final String ProjectStatus; //string
    final String ProjectStatusId; //int
    final String SecReadOnly; //bool
    final String StatusCode; //string
    final String WorkplaceId; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectListStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.Disabled,
    this.Id,
    this.KPIRuleId,
    this.Piecework,
    this.Project,
    this.ProjectName,
    this.ProjectNo,
    this.ProjectStatus,
    this.ProjectStatusId,
    this.SecReadOnly,
    this.StatusCode,
    this.WorkplaceId,
    this.isField,
    this.isTmpRec,
  );

  ProjectListStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    KPIRuleId = json['KPIRuleId'] ?? '',
    Piecework = json['Piecework'] ?? '',
    Project = json['Project'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ProjectStatus = json['ProjectStatus'] ?? '',
    ProjectStatusId = json['ProjectStatusId'] ?? '',
    SecReadOnly = json['SecReadOnly'] ?? '',
    StatusCode = json['StatusCode'] ?? '',
    WorkplaceId = json['WorkplaceId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'Disabled' : Disabled,
    'Id' : Id,
    'KPIRuleId' : KPIRuleId,
    'Piecework' : Piecework,
    'Project' : Project,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ProjectStatus' : ProjectStatus,
    'ProjectStatusId' : ProjectStatusId,
    'SecReadOnly' : SecReadOnly,
    'StatusCode' : StatusCode,
    'WorkplaceId' : WorkplaceId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectOverview", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "ProjectId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectNo",
        type: "string",
        meType: "meShortText",
        max: 10,
        readOnly: !0,
      },
      {
        name: "ProjectName",
        type: "string",
        meType: "meMediumText",
        max: 50,
        readOnly: !0,
      },
      {
        name: "TagField1Id",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "TagField2Id",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectManagerId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectStart",
        type: "date",
        meType: "meDate",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectEnd",
        type: "date",
        meType: "meDate",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "CustomerId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ProjectStatusId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "BudgetRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "BookedCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BookedRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "BudgetRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "ContributionMarginAmount",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginPercent",
        type: "int",
        meType: "mePercent",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BudgetHours",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "BookedHours",
        type: "int",
        meType: "meInt",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkOrderCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkOrderRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginWO",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "SLPCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "SLPRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginAmountSLP",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "ContributionMarginPercentSLP",
        type: "int",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkCost",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
      },
      {
        name: "WorkCostWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !0,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("WorkCost") * Me.Moms;
        },
      },
      {
        name: "MaterialCost",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "MaterialCost",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("MaterialCost") * Me.Moms;
        },
      },
      {
        name: "EarnedRevenue",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "EarnedRevenueWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        convert: function (b, a) {
          return a.get("EarnedRevenue") * Me.Moms;
        },
      },
      {
        name: "EarnedRevenueNotInvoiced",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (a, b) {
          return Number(a) ? a : "";
        },
      },
      {
        name: "EarnedRevenueNotInvoicedWithTax",
        type: "float",
        meType: "meMoney",
        useNull: !1,
        readOnly: !0,
        convert: function (b, a) {
          return a.get("EarnedRevenueNotInvoiced") * Me.Moms;
        },
      },
    ],
  },
});*/

class ProjectOverviewStore {
  static String name = 'ProjectOverviewStore';

    final String? BookedCost; //float
    final String? BookedHours; //int
    final String? BookedRevenue; //float
    final String? BudgetCost; //float
    final String? BudgetHours; //int
    final String? BudgetRevenue; //float
    final String? BudgetRevenueWithTax; //float
    final String Changed; //date
    final String ChangedId; //string
    final String? ContributionMarginAmount; //float
    final String? ContributionMarginAmountSLP; //float
    final String? ContributionMarginPercent; //int
    final String? ContributionMarginPercentSLP; //int
    final String? ContributionMarginWO; //float
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? CustomerId; //int
    final String Disabled; //boolean
    final String? EarnedRevenue; //float
    final String? EarnedRevenueNotInvoiced; //float
    final String? EarnedRevenueNotInvoicedWithTax; //float
    final String? EarnedRevenueWithTax; //float
    final String Id; //int
    final String? MaterialCost; //float
    final String? ProjectEnd; //date
    final String? ProjectId; //int
    final String? ProjectManagerId; //int
    final String ProjectName; //string
    final String ProjectNo; //string
    final String? ProjectStart; //date
    final String? ProjectStatusId; //int
    final String? SLPCost; //float
    final String? SLPRevenue; //float
    final String? TagField1Id; //int
    final String? TagField2Id; //int
    final String? WorkCost; //float
    final String? WorkCostWithTax; //float
    final String? WorkOrderCost; //float
    final String? WorkOrderRevenue; //float
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectOverviewStore(
    this.BookedCost,
    this.BookedHours,
    this.BookedRevenue,
    this.BudgetCost,
    this.BudgetHours,
    this.BudgetRevenue,
    this.BudgetRevenueWithTax,
    this.Changed,
    this.ChangedId,
    this.ContributionMarginAmount,
    this.ContributionMarginAmountSLP,
    this.ContributionMarginPercent,
    this.ContributionMarginPercentSLP,
    this.ContributionMarginWO,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.Disabled,
    this.EarnedRevenue,
    this.EarnedRevenueNotInvoiced,
    this.EarnedRevenueNotInvoicedWithTax,
    this.EarnedRevenueWithTax,
    this.Id,
    this.MaterialCost,
    this.ProjectEnd,
    this.ProjectId,
    this.ProjectManagerId,
    this.ProjectName,
    this.ProjectNo,
    this.ProjectStart,
    this.ProjectStatusId,
    this.SLPCost,
    this.SLPRevenue,
    this.TagField1Id,
    this.TagField2Id,
    this.WorkCost,
    this.WorkCostWithTax,
    this.WorkOrderCost,
    this.WorkOrderRevenue,
    this.isField,
    this.isTmpRec,
  );

  ProjectOverviewStore.fromJson(Map<String, dynamic> json) : 
    BookedCost = json['BookedCost'] ?? '',
    BookedHours = json['BookedHours'] ?? '',
    BookedRevenue = json['BookedRevenue'] ?? '',
    BudgetCost = json['BudgetCost'] ?? '',
    BudgetHours = json['BudgetHours'] ?? '',
    BudgetRevenue = json['BudgetRevenue'] ?? '',
    BudgetRevenueWithTax = json['BudgetRevenueWithTax'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ContributionMarginAmount = json['ContributionMarginAmount'] ?? '',
    ContributionMarginAmountSLP = json['ContributionMarginAmountSLP'] ?? '',
    ContributionMarginPercent = json['ContributionMarginPercent'] ?? '',
    ContributionMarginPercentSLP = json['ContributionMarginPercentSLP'] ?? '',
    ContributionMarginWO = json['ContributionMarginWO'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    EarnedRevenue = json['EarnedRevenue'] ?? '',
    EarnedRevenueNotInvoiced = json['EarnedRevenueNotInvoiced'] ?? '',
    EarnedRevenueNotInvoicedWithTax = json['EarnedRevenueNotInvoicedWithTax'] ?? '',
    EarnedRevenueWithTax = json['EarnedRevenueWithTax'] ?? '',
    Id = json['Id'] ?? '',
    MaterialCost = json['MaterialCost'] ?? '',
    ProjectEnd = json['ProjectEnd'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectManagerId = json['ProjectManagerId'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ProjectStart = json['ProjectStart'] ?? '',
    ProjectStatusId = json['ProjectStatusId'] ?? '',
    SLPCost = json['SLPCost'] ?? '',
    SLPRevenue = json['SLPRevenue'] ?? '',
    TagField1Id = json['TagField1Id'] ?? '',
    TagField2Id = json['TagField2Id'] ?? '',
    WorkCost = json['WorkCost'] ?? '',
    WorkCostWithTax = json['WorkCostWithTax'] ?? '',
    WorkOrderCost = json['WorkOrderCost'] ?? '',
    WorkOrderRevenue = json['WorkOrderRevenue'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'BookedCost' : BookedCost,
    'BookedHours' : BookedHours,
    'BookedRevenue' : BookedRevenue,
    'BudgetCost' : BudgetCost,
    'BudgetHours' : BudgetHours,
    'BudgetRevenue' : BudgetRevenue,
    'BudgetRevenueWithTax' : BudgetRevenueWithTax,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ContributionMarginAmount' : ContributionMarginAmount,
    'ContributionMarginAmountSLP' : ContributionMarginAmountSLP,
    'ContributionMarginPercent' : ContributionMarginPercent,
    'ContributionMarginPercentSLP' : ContributionMarginPercentSLP,
    'ContributionMarginWO' : ContributionMarginWO,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'Disabled' : Disabled,
    'EarnedRevenue' : EarnedRevenue,
    'EarnedRevenueNotInvoiced' : EarnedRevenueNotInvoiced,
    'EarnedRevenueNotInvoicedWithTax' : EarnedRevenueNotInvoicedWithTax,
    'EarnedRevenueWithTax' : EarnedRevenueWithTax,
    'Id' : Id,
    'MaterialCost' : MaterialCost,
    'ProjectEnd' : ProjectEnd,
    'ProjectId' : ProjectId,
    'ProjectManagerId' : ProjectManagerId,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ProjectStart' : ProjectStart,
    'ProjectStatusId' : ProjectStatusId,
    'SLPCost' : SLPCost,
    'SLPRevenue' : SLPRevenue,
    'TagField1Id' : TagField1Id,
    'TagField2Id' : TagField2Id,
    'WorkCost' : WorkCost,
    'WorkCostWithTax' : WorkCostWithTax,
    'WorkOrderCost' : WorkOrderCost,
    'WorkOrderRevenue' : WorkOrderRevenue,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectPricelist", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ServiceCarPriceDay", type: "float" },
      { name: "ServiceCarPriceKm", type: "float" },
    ],
  },
});*/

class ProjectPricelistStore {
  static String name = 'ProjectPricelistStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String ProjectId; //int
    final String ServiceCarPriceDay; //float
    final String ServiceCarPriceKm; //float
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectPricelistStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.ProjectId,
    this.ServiceCarPriceDay,
    this.ServiceCarPriceKm,
    this.isField,
    this.isTmpRec,
  );

  ProjectPricelistStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ServiceCarPriceDay = json['ServiceCarPriceDay'] ?? '',
    ServiceCarPriceKm = json['ServiceCarPriceKm'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'ProjectId' : ProjectId,
    'ServiceCarPriceDay' : ServiceCarPriceDay,
    'ServiceCarPriceKm' : ServiceCarPriceKm,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectPricelistItem", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText", useNull: !0 },
      {
        name: "ProfessionItemId",
        type: "int",
        meType: "meMediumText",
        useNull: !0,
      },
      { name: "PriceUnit", type: "float", meType: "meMoney" },
    ],
  },
});*/

class ProjectPricelistItemStore {
  static String name = 'ProjectPricelistItemStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String PriceUnit; //float
    final String? ProfessionItemId; //int
    final String? ProjectId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectPricelistItemStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.PriceUnit,
    this.ProfessionItemId,
    this.ProjectId,
    this.isField,
    this.isTmpRec,
  );

  ProjectPricelistItemStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    ProfessionItemId = json['ProfessionItemId'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'PriceUnit' : PriceUnit,
    'ProfessionItemId' : ProfessionItemId,
    'ProjectId' : ProjectId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
    ],
  },
});*/

class ProjectStatusStore {
  static String name = 'ProjectStatusStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String StatusCode; //int
    final String StatusColor; //string
    final String StatusName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectStatusStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.StatusCode,
    this.StatusColor,
    this.StatusName,
    this.isField,
    this.isTmpRec,
  );

  ProjectStatusStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    StatusCode = json['StatusCode'] ?? '',
    StatusColor = json['StatusColor'] ?? '',
    StatusName = json['StatusName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'StatusCode' : StatusCode,
    'StatusColor' : StatusColor,
    'StatusName' : StatusName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectStatusHistory", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusHistoryId", type: "int" },
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "FullName", type: "string", max: 50 },
    ],
  },
});*/

class ProjectStatusHistoryStore {
  static String name = 'ProjectStatusHistoryStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String FullName; //string
    final String Id; //int
    final String ProjectId; //int
    final String ProjectStatusHistoryId; //int
    final String StatusCode; //int
    final String StatusColor; //string
    final String StatusName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectStatusHistoryStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.FullName,
    this.Id,
    this.ProjectId,
    this.ProjectStatusHistoryId,
    this.StatusCode,
    this.StatusColor,
    this.StatusName,
    this.isField,
    this.isTmpRec,
  );

  ProjectStatusHistoryStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    Id = json['Id'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectStatusHistoryId = json['ProjectStatusHistoryId'] ?? '',
    StatusCode = json['StatusCode'] ?? '',
    StatusColor = json['StatusColor'] ?? '',
    StatusName = json['StatusName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'Id' : Id,
    'ProjectId' : ProjectId,
    'ProjectStatusHistoryId' : ProjectStatusHistoryId,
    'StatusCode' : StatusCode,
    'StatusColor' : StatusColor,
    'StatusName' : StatusName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectTree", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusId", type: "int" },
      { name: "ProjectName", type: "string" },
      { name: "ProjectNo", type: "string" },
    ],
  },
});*/

class ProjectTreeStore {
  static String name = 'ProjectTreeStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String ProjectName; //string
    final String ProjectNo; //string
    final String ProjectStatusId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectTreeStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.ProjectName,
    this.ProjectNo,
    this.ProjectStatusId,
    this.isField,
    this.isTmpRec,
  );

  ProjectTreeStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ProjectStatusId = json['ProjectStatusId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ProjectStatusId' : ProjectStatusId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ProjectType", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "TypeName", type: "string", max: 50 }] },
});*/

class ProjectTypeStore {
  static String name = 'ProjectTypeStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String TypeName; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ProjectTypeStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.TypeName,
    this.isField,
    this.isTmpRec,
  );

  ProjectTypeStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    TypeName = json['TypeName'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'TypeName' : TypeName,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Resource", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ResourceNo", type: "string", max: 20 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (b, a) {
          return a.get("ResourceNo") + " " + a.get("Description");
        },
      },
      { name: "CreditProjectId", type: "int" },
      { name: "CreditProjectNo", type: "string" },
      { name: "CreditProjectName", type: "string" },
    ],
  },
});*/

class ResourceStore {
  static String name = 'ResourceStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CreditProjectId; //int
    final String CreditProjectName; //string
    final String CreditProjectNo; //string
    final String Description; //string
    final String Disabled; //boolean
    final String FullDescription; //string
    final String Id; //int
    final String ResourceNo; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ResourceStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditProjectId,
    this.CreditProjectName,
    this.CreditProjectNo,
    this.Description,
    this.Disabled,
    this.FullDescription,
    this.Id,
    this.ResourceNo,
    this.isField,
    this.isTmpRec,
  );

  ResourceStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditProjectId = json['CreditProjectId'] ?? '',
    CreditProjectName = json['CreditProjectName'] ?? '',
    CreditProjectNo = json['CreditProjectNo'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullDescription = json['FullDescription'] ?? '',
    Id = json['Id'] ?? '',
    ResourceNo = json['ResourceNo'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditProjectId' : CreditProjectId,
    'CreditProjectName' : CreditProjectName,
    'CreditProjectNo' : CreditProjectNo,
    'Description' : Description,
    'Disabled' : Disabled,
    'FullDescription' : FullDescription,
    'Id' : Id,
    'ResourceNo' : ResourceNo,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Revenue", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "VerificationNo", type: "string", max: 50, readOnly: !0 },
      { name: "TransactionNote", type: "string", max: 255 },
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            if (a.get("Addition")) {
              return AWOpad(a.get("WorkOrderNo"), 3);
            } else {
              return a.get("WorkOrderNo");
            }
          }
          return "";
        },
      },
      {
        name: "WorkOrderName",
        type: "int",
        useNull: !0,
        convert: function (d, b) {
          var c = Ext.getStore("MyWorkOrderListStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderId"), 0, !1, !0, !0);
          if (a) {
            return a.get("Name");
          }
          return "";
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "Invoiceable", type: "bool" },
      { name: "LedgerDate", type: "date" },
      {
        name: "InvoiceAmount",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      {
        name: "CustomerPrice",
        type: "float",
        convert: function (a, b) {
          return Math.round(a == null ? 0 : a);
        },
      },
      { name: "MarkupAmount", type: "float" },
      { name: "CustomerNo", type: "string", max: 50, useNull: !0 },
      { name: "RevenueTransaction", type: "bool" },
      { name: "Invoiced", type: "bool" },
      { name: "InvoiceId", type: "int", useNull: !0 },
      { name: "TransactionType", type: "string", max: 1 },
      { name: "ExtInvoiceNo", type: "string", max: 20, useNull: !0 },
      { name: "IsScanned", type: "bool" },
      {
        name: "ScannedUrl",
        type: "string",
        max: 255,
        useNull: !0,
        convert: function (b, a) {
          return a.getScannedUrl();
        },
      },
      { name: "SupplierInvoiceId", type: "int", allowNull: !0 },
      { name: "ApprovedByProduction", type: "bool" },
      { name: "Locked", type: "bool" },
      { name: "ExtVerificationId", type: "string", max: 50, useNull: !0 },
      { name: "Notes", type: "string", max: 255, useNull: !0 },
      { name: "Mark1", type: "string", max: 255, useNull: !0 },
      { name: "Mark2", type: "string", max: 255, useNull: !0 },
    ],
  },
});*/

class RevenueStore {
  static String name = 'RevenueStore';

    final String AccountNo; //string
    final String ApprovedByProduction; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? CustomerNo; //string
    final String CustomerPrice; //float
    final String Disabled; //boolean
    final String? ExtInvoiceNo; //string
    final String? ExtVerificationId; //string
    final String Id; //int
    final String InvoiceAmount; //float
    final String? InvoiceId; //int
    final String Invoiceable; //bool
    final String Invoiced; //bool
    final String IsScanned; //bool
    final String LedgerDate; //date
    final String Locked; //bool
    final String? Mark1; //string
    final String? Mark2; //string
    final String MarkupAmount; //float
    final String? Notes; //string
    final String ProjectId; //int
    final String RevenueTransaction; //bool
    final String? ScannedUrl; //string
    final String SupplierInvoiceId; //int
    final String TransactionNote; //string
    final String TransactionType; //string
    final String VerificationNo; //string
    final String? WorkOrderId; //int
    final String? WorkOrderName; //int
    final String? WorkOrderNo; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  RevenueStore(
    this.AccountNo,
    this.ApprovedByProduction,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerNo,
    this.CustomerPrice,
    this.Disabled,
    this.ExtInvoiceNo,
    this.ExtVerificationId,
    this.Id,
    this.InvoiceAmount,
    this.InvoiceId,
    this.Invoiceable,
    this.Invoiced,
    this.IsScanned,
    this.LedgerDate,
    this.Locked,
    this.Mark1,
    this.Mark2,
    this.MarkupAmount,
    this.Notes,
    this.ProjectId,
    this.RevenueTransaction,
    this.ScannedUrl,
    this.SupplierInvoiceId,
    this.TransactionNote,
    this.TransactionType,
    this.VerificationNo,
    this.WorkOrderId,
    this.WorkOrderName,
    this.WorkOrderNo,
    this.isField,
    this.isTmpRec,
  );

  RevenueStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ApprovedByProduction = json['ApprovedByProduction'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerNo = json['CustomerNo'] ?? '',
    CustomerPrice = json['CustomerPrice'] ?? '',
    Disabled = json['Disabled'] ?? '',
    ExtInvoiceNo = json['ExtInvoiceNo'] ?? '',
    ExtVerificationId = json['ExtVerificationId'] ?? '',
    Id = json['Id'] ?? '',
    InvoiceAmount = json['InvoiceAmount'] ?? '',
    InvoiceId = json['InvoiceId'] ?? '',
    Invoiceable = json['Invoiceable'] ?? '',
    Invoiced = json['Invoiced'] ?? '',
    IsScanned = json['IsScanned'] ?? '',
    LedgerDate = json['LedgerDate'] ?? '',
    Locked = json['Locked'] ?? '',
    Mark1 = json['Mark1'] ?? '',
    Mark2 = json['Mark2'] ?? '',
    MarkupAmount = json['MarkupAmount'] ?? '',
    Notes = json['Notes'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    RevenueTransaction = json['RevenueTransaction'] ?? '',
    ScannedUrl = json['ScannedUrl'] ?? '',
    SupplierInvoiceId = json['SupplierInvoiceId'] ?? '',
    TransactionNote = json['TransactionNote'] ?? '',
    TransactionType = json['TransactionType'] ?? '',
    VerificationNo = json['VerificationNo'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    WorkOrderName = json['WorkOrderName'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ApprovedByProduction' : ApprovedByProduction,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerNo' : CustomerNo,
    'CustomerPrice' : CustomerPrice,
    'Disabled' : Disabled,
    'ExtInvoiceNo' : ExtInvoiceNo,
    'ExtVerificationId' : ExtVerificationId,
    'Id' : Id,
    'InvoiceAmount' : InvoiceAmount,
    'InvoiceId' : InvoiceId,
    'Invoiceable' : Invoiceable,
    'Invoiced' : Invoiced,
    'IsScanned' : IsScanned,
    'LedgerDate' : LedgerDate,
    'Locked' : Locked,
    'Mark1' : Mark1,
    'Mark2' : Mark2,
    'MarkupAmount' : MarkupAmount,
    'Notes' : Notes,
    'ProjectId' : ProjectId,
    'RevenueTransaction' : RevenueTransaction,
    'ScannedUrl' : ScannedUrl,
    'SupplierInvoiceId' : SupplierInvoiceId,
    'TransactionNote' : TransactionNote,
    'TransactionType' : TransactionType,
    'VerificationNo' : VerificationNo,
    'WorkOrderId' : WorkOrderId,
    'WorkOrderName' : WorkOrderName,
    'WorkOrderNo' : WorkOrderNo,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.ServiceCategory", {
  extend: MEM.model.Base,
  config: { fields: [{ name: "Name", type: "string", max: 50 }] },
});*/

class ServiceCategoryStore {
  static String name = 'ServiceCategoryStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String Name; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  ServiceCategoryStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.Name,
    this.isField,
    this.isTmpRec,
  );

  ServiceCategoryStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'Name' : Name,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Setting", {
  extend: Ext.data.Model,
  config: { fields: [{ name: "Name" }, { name: "Value" }] },
});*/

class SettingStore {
  static String name = 'SettingStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  SettingStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.isField,
    this.isTmpRec,
  );

  SettingStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.StaffList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "DiaryId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "CustomerName", type: "string" },
      { name: "FullName", type: "string" },
      { name: "IdNo", type: "string" },
      { name: "Origin", type: "string", useNull: !0 },
      { name: "OriginId", type: "int" },
      { name: "isEmployee", type: "bool" },
      { name: "LogId", type: "int" },
      { name: "CheckedIn", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedInTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedIn");
        },
      },
      { name: "CheckedOut", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedOutTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedOut");
        },
      },
      {
        name: "Present",
        type: "string",
        convert: function (b, a) {
          if (a.data.CheckedIn == null || a.data.CheckedOut != null) {
            return "red";
          } else {
            return "green";
          }
        },
      },
    ],
  },
  set: function (a, b) {
    this.callParent(arguments);
    switch (a) {
      case "CheckedIn":
        this.set("CheckedInTime", "");
        this.set("Present", "");
        break;
      case "CheckedOut":
        this.set("CheckedOutTime", "");
        this.set("Present", "");
        break;
    }
  },
});
Ext.define("MEM.store.MyStaffListStore", {
  extend: MEM.ux.data.MyBaseStore,
  alias: "store.mystaffliststorealias",
  config: {
    model: "MEM.model.StaffList",
    storeId: "MyStaffListStore",
    autoLoad: !1,
    sorters: [
      { property: "isEmployee" },
      { property: "CustomerName" },
      { property: "FullName" },
    ],
    grouper: {
      groupFn: function (a) {
        if (a.get("isEmployee") == !0) {
          return T("Own Staff");
        } else {
          return a.get("CustomerName");
        }
      },
      sortProperty: "isEmployee",
      direction: "DESC",
    },
    proxy: { type: "myproxy", url: Me.STORE_URL + "StaffListStore" },
  },
});
Ext.define("MEM.model.StatusHistory", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectStatusHistoryId", type: "int" },
      { name: "StatusName", type: "string", max: 50 },
      { name: "FullName", type: "string", max: 50 },
      { name: "Changed", type: "data" },
    ],
  },
});*/

class StaffListStore {
  static String name = 'StaffListStore';

    final String Changed; //data
    final String ChangedId; //string
    final String CheckedIn; //date
    final String CheckedInTime; //string
    final String CheckedOut; //date
    final String CheckedOutTime; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerId; //int
    final String CustomerName; //string
    final String DiaryId; //int
    final String Disabled; //boolean
    final String FullName; //string
    final String Id; //int
    final String IdNo; //string
    final String LogId; //int
    final String? Origin; //string
    final String OriginId; //int
    final String Present; //string
    final String ProjectId; //int
    final String ProjectStatusHistoryId; //int
    final String StatusName; //string
    final String isEmployee; //bool
    final String isField; //boolean
    final String isTmpRec; //boolean

  StaffListStore(
    this.Changed,
    this.ChangedId,
    this.CheckedIn,
    this.CheckedInTime,
    this.CheckedOut,
    this.CheckedOutTime,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.CustomerName,
    this.DiaryId,
    this.Disabled,
    this.FullName,
    this.Id,
    this.IdNo,
    this.LogId,
    this.Origin,
    this.OriginId,
    this.Present,
    this.ProjectId,
    this.ProjectStatusHistoryId,
    this.StatusName,
    this.isEmployee,
    this.isField,
    this.isTmpRec,
  );

  StaffListStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CheckedIn = json['CheckedIn'] ?? '',
    CheckedInTime = json['CheckedInTime'] ?? '',
    CheckedOut = json['CheckedOut'] ?? '',
    CheckedOutTime = json['CheckedOutTime'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    DiaryId = json['DiaryId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    Id = json['Id'] ?? '',
    IdNo = json['IdNo'] ?? '',
    LogId = json['LogId'] ?? '',
    Origin = json['Origin'] ?? '',
    OriginId = json['OriginId'] ?? '',
    Present = json['Present'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectStatusHistoryId = json['ProjectStatusHistoryId'] ?? '',
    StatusName = json['StatusName'] ?? '',
    isEmployee = json['isEmployee'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CheckedIn' : CheckedIn,
    'CheckedInTime' : CheckedInTime,
    'CheckedOut' : CheckedOut,
    'CheckedOutTime' : CheckedOutTime,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'CustomerName' : CustomerName,
    'DiaryId' : DiaryId,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'Id' : Id,
    'IdNo' : IdNo,
    'LogId' : LogId,
    'Origin' : Origin,
    'OriginId' : OriginId,
    'Present' : Present,
    'ProjectId' : ProjectId,
    'ProjectStatusHistoryId' : ProjectStatusHistoryId,
    'StatusName' : StatusName,
    'isEmployee' : isEmployee,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.StaffLog", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "Created", type: "string", dateFormat: "time" },
      { name: "CreatedId", type: "int" },
      { name: "Changed", type: "string", dateFormat: "time" },
      { name: "ChangedId", type: "int" },
      { name: "DiaryId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "IdNo", type: "string" },
      { name: "Origin", type: "string", useNull: !0 },
      { name: "OriginId", type: "int" },
      { name: "CheckedIn", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      {
        name: "CheckedInTime",
        type: "string",
        convert: function (b, a) {
          return a.timeDisplay(b, a, "CheckedIn");
        },
      },
      { name: "CheckedOut", type: "date", dateFormat: "Y-m-d\\TH:i:s" },
      { name: "FullName", type: "string" },
    ],
  },
});*/

class StaffLogStore {
  static String name = 'StaffLogStore';

    final String Changed; //string
    final String ChangedId; //int
    final String CheckedIn; //date
    final String CheckedInTime; //string
    final String CheckedOut; //date
    final String Created; //string
    final String CreatedId; //int
    final String CreatedName; //string
    final String DiaryId; //int
    final String Disabled; //boolean
    final String FullName; //string
    final String Id; //int
    final String IdNo; //string
    final String? Origin; //string
    final String OriginId; //int
    final String ProjectId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  StaffLogStore(
    this.Changed,
    this.ChangedId,
    this.CheckedIn,
    this.CheckedInTime,
    this.CheckedOut,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.DiaryId,
    this.Disabled,
    this.FullName,
    this.Id,
    this.IdNo,
    this.Origin,
    this.OriginId,
    this.ProjectId,
    this.isField,
    this.isTmpRec,
  );

  StaffLogStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    CheckedIn = json['CheckedIn'] ?? '',
    CheckedInTime = json['CheckedInTime'] ?? '',
    CheckedOut = json['CheckedOut'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    DiaryId = json['DiaryId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    Id = json['Id'] ?? '',
    IdNo = json['IdNo'] ?? '',
    Origin = json['Origin'] ?? '',
    OriginId = json['OriginId'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'CheckedIn' : CheckedIn,
    'CheckedInTime' : CheckedInTime,
    'CheckedOut' : CheckedOut,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'DiaryId' : DiaryId,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'Id' : Id,
    'IdNo' : IdNo,
    'Origin' : Origin,
    'OriginId' : OriginId,
    'ProjectId' : ProjectId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.StaffPreviousDay", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "Created", type: "string", dateFormat: "time" },
      { name: "CreatedId", type: "int" },
      { name: "Changed", type: "string", dateFormat: "time" },
      { name: "ChangedId", type: "int" },
      { name: "IdNo", type: "string" },
      { name: "DiaryId", type: "int" },
      { name: "ProjectId", type: "int" },
    ],
  },
});*/

class StaffPreviousDayStore {
  static String name = 'StaffPreviousDayStore';

    final String Changed; //string
    final String ChangedId; //int
    final String Created; //string
    final String CreatedId; //int
    final String CreatedName; //string
    final String DiaryId; //int
    final String Disabled; //boolean
    final String Id; //int
    final String IdNo; //string
    final String ProjectId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  StaffPreviousDayStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.DiaryId,
    this.Disabled,
    this.Id,
    this.IdNo,
    this.ProjectId,
    this.isField,
    this.isTmpRec,
  );

  StaffPreviousDayStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    DiaryId = json['DiaryId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    IdNo = json['IdNo'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'DiaryId' : DiaryId,
    'Disabled' : Disabled,
    'Id' : Id,
    'IdNo' : IdNo,
    'ProjectId' : ProjectId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Supplier", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "CustomerNo", type: "string", max: 50, allowBlank: !1 },
      { name: "CustomerName", type: "string", max: 50, allowBlank: !1 },
      { name: "OrganizationNo", type: "string", max: 15 },
    ],
  },
});*/

class SupplierStore {
  static String name = 'SupplierStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerName; //string
    final String CustomerNo; //string
    final String Disabled; //boolean
    final String Id; //int
    final String OrganizationNo; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  SupplierStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerName,
    this.CustomerNo,
    this.Disabled,
    this.Id,
    this.OrganizationNo,
    this.isField,
    this.isTmpRec,
  );

  SupplierStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    CustomerNo = json['CustomerNo'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    OrganizationNo = json['OrganizationNo'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerName' : CustomerName,
    'CustomerNo' : CustomerNo,
    'Disabled' : Disabled,
    'Id' : Id,
    'OrganizationNo' : OrganizationNo,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Tag", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "TagName", type: "string", max: 50 },
      { name: "TagValue", type: "string", max: 50 },
    ],
  },
});*/

class TagStore {
  static String name = 'TagStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String TagName; //string
    final String TagValue; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  TagStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.TagName,
    this.TagValue,
    this.isField,
    this.isTmpRec,
  );

  TagStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    TagName = json['TagName'] ?? '',
    TagValue = json['TagValue'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'TagName' : TagName,
    'TagValue' : TagValue,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Time", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "FullName", type: "string", max: 100 },
      { name: "ProjectId", type: "int" },
      { name: "AbsenceProjectId", type: "int", useNull: !0 },
      {
        name: "Absence",
        type: "bool",
        convert: function (c, b) {
          var a = MEM.app.getController("Common");
          return b.get("ProjectId") != a.absenceProjectId() ? 0 : 1;
        },
      },
      {
        name: "ProjectName",
        type: "string",
        max: 255,
        sortable: !0,
        convert: function (b, c) {
          if (b) {
            return b;
          } else {
            var d = Ext.getStore("MyCloneProjectListAllStore"),
              a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
            if (a) {
              return a.get("ProjectName");
            } else {
              return "";
            }
          }
        },
      },
      {
        name: "ProjectNo",
        type: "string",
        max: 20,
        sortable: !0,
        sortType: "asInt",
        convert: function (b, c) {
          if (b) {
            return b;
          } else {
            var d = Ext.getStore("MyCloneProjectListAllStore"),
              a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
            if (a) {
              return a.get("ProjectNo");
            } else {
              return "";
            }
          }
        },
      },
      {
        name: "Project",
        type: "string",
        max: 255,
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneProjectListAllStore"),
            a;
          a = c.findRecord("Id", b.get("ProjectId"), 0, !1, !0, !0);
          if (a) {
            return a.get("ProjectNo") + ", " + a.get("ProjectName");
          }
        },
      },
      {
        name: "ProjectStatus",
        type: "string",
        max: 255,
        convert: function (e, c) {
          var d = Ext.getStore("MyCloneProjectListAllStore"),
            b = Ext.getStore("MyProjectStatusStore"),
            a;
          a = d.findRecord("Id", c.get("ProjectId"), 0, !1, !0, !0);
          if (a) {
            b = b.findRecord("Id", a.get("ProjectStatusId"), 0, !1, !0, !0);
            return b.get("StatusCode");
          } else {
            return null;
          }
        },
      },
      { name: "WorkOrderId", type: "int", useNull: !0 },
      {
        name: "WorkOrderNo",
        type: "int",
        useNull: !0,
        convert: function (b, c) {
          var a = Ext.getStore("MyWorkOrderListStore").findRecord(
            "Id",
            c.get("WorkOrderId"),
            0,
            !1,
            !0,
            !0
          );
          if (a && a.get("Addition")) {
            return AWOpad(b, 3);
          }
          return b;
        },
      },
      { name: "WOAWONo", type: "string", max: 10, sortable: !0 },
      { name: "WorkOrderName", type: "string", max: 255, sortable: !0 },
      { name: "RegDate", type: "string", max: 10, sortType: "asDate" },
      { name: "Debit", type: "boolean", defaultValue: !0 },
      { name: "ProfessionItemId", type: "int" },
      { name: "ProfessionCode", type: "string", max: 20 },
      { name: "ProfessionAccountNo", type: "string", max: 5 },
      { name: "Unit", type: "string", max: 5 },
      {
        name: "Hours",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "BreakTime",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "StartTime",
        useNull: !0,
        type: "date",
        dateFormat: "Y-m-d H:i:s",
        convert: function (b, h) {
          var f,
            d = new Date(h.get("RegDate")),
            c,
            e = getSetting("Time.Timestamp.Interval"),
            g = e ? parseInt(e) : 15;
          if (typeof b == "string") {
            var a = b.split(/[-:T]/);
            c = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);
          } else {
            if (
              getSetting("Time.Timestamp.Show.Project") == 1 ||
              getSetting("Time.Timestamp.Show.Absence") == 1
            ) {
              c = b ? b : new Date();
            } else {
              return b;
            }
          }
          f = new Date(
            d.getFullYear(),
            d.getMonth(),
            d.getDate(),
            c.getHours(),
            b ? c.getMinutes() : (Math.round(c.getMinutes() / g) * g) % 60
          );
          return f;
        },
      },
      {
        name: "StopTime",
        dateFormat: "Y-m-d H:i:s",
        type: "date",
        persist: !1,
        convert: function (b, c) {
          var h = c.get("StartTime"),
            e,
            g = getSetting("Time.Timestamp.Interval"),
            i = g ? parseInt(g) : 15;
          if (c.get("Hours") && !b) {
            Date.prototype.addHours = function (a) {
              this.setTime(this.getTime() + a * 60 * 60 * 1000);
              return this;
            };
            if (h) {
              e = new Date(h).addHours(c.get("Hours") + c.get("BreakTime"));
            }
          } else {
            if (b) {
              var d,
                f = new Date(c.get("RegDate"));
              if (typeof b == "string") {
                var a = b.split(/[-:T]/);
                d = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);
              } else {
                d = b;
              }
              e = new Date(
                f.getFullYear(),
                f.getMonth(),
                f.getDate(),
                d.getHours(),
                b ? d.getMinutes() : (Math.round(d.getMinutes() / i) * i) % 60
              );
            }
          }
          return e;
        },
      },
      { name: "Description", type: "string", defaultValue: "" },
      { name: "TotalCost", type: "float" },
      {
        name: "Travel1Km",
        type: "float",
        useNull: !0,
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      { name: "Travel1PriceKm", type: "float", useNull: !0 },
      {
        name: "Travel2Km",
        type: "float",
        useNull: !0,
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      {
        name: "Travel3Km",
        type: "float",
        useNull: !0,
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      { name: "Travel3Driver", type: "int", useNull: !0 },
      { name: "Travel3IsDriver", type: "boolean" },
      { name: "Travel4", type: "bool", useNull: !0, defaultValue: !1 },
      { name: "Invoiced", type: "bool", defaultValue: !1 },
      { name: "InvoiceId", type: "int", useNull: !0 },
      {
        name: "SalaryTransferDate",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d",
      },
      { name: "Locked", type: "bool", useNull: !0 },
      { name: "Approved", type: "bool", useNull: !0, defaultValue: !1 },
      {
        name: "Approved2",
        type: "bool",
        useNull: !0,
        defaultValue: !1,
        persist: !1,
      },
      {
        name: "Addition",
        type: "bool",
        useNull: !0,
        defaultValue: !1,
        persist: !1,
      },
      { name: "CarPooling", type: "bool", useNull: !0 },
      { name: "InfoNoteId", type: "int", useNull: !0, persist: !1 },
      {
        name: "AllowanceQty",
        type: "float",
        convert: function (a, b) {
          return a == null ? null : parseFloat(a);
        },
      },
      { name: "MoveAll", type: "boolean", meType: "meBool", defaultValue: !1 },
      { name: "PieceWork", type: "bool", useNull: !0, defaultValue: !1 },
      { name: "CustomerId", type: "int", useNull: !0, persist: !1 },
      {
        name: "DisplayTitle",
        convert: function (d, a) {
          var b = getSetting("MEM.TimeRowFormat");
          if (!b) {
            b = "{p} - {pn}";
          }
          var c = Ext.getStore("MyCloneProfessionItemStore").getById(
            a.get("ProfessionItemId")
          );
          b = Me.templateRender(b, {
            p: a.get("ProjectNo"),
            pn: a.get("ProjectName"),
            w: a.get("WOAWONo"),
            wn: a.get("WorkOrderName"),
            r: a.get("ProfessionCode"),
            a: a.get("Addition"),
            rn: c ? c.get("ProfessionDescription") : "",
          });
          return b;
        },
      },
      {
        name: "Hours_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Hours");
        },
      },
      {
        name: "StartTime_fmt",
        type: "string",
        persist: !1,
        convert: function (c, b) {
          var a = b.get("StartTime");
          if (a instanceof Date) {
            return Ext.util.Format.date(a, "H:i");
          }
        },
      },
      {
        name: "StopTime_fmt",
        type: "string",
        persist: !1,
        convert: function (c, b) {
          var a = b.get("StopTime");
          if (a instanceof Date) {
            return Ext.util.Format.date(a, "H:i");
          }
        },
      },
      {
        name: "BreakTime_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "BreakTime");
        },
      },
      {
        name: "Travel1Km_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Travel1Km");
        },
      },
      {
        name: "Travel2Km_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Travel2Km");
        },
      },
      {
        name: "Travel3Km_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Travel3Km");
        },
      },
      {
        name: "AllowanceQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "AllowanceQty");
        },
      },
    ],
  },
});*/

class TimeStore {
  static String name = 'TimeStore';

    final String Absence; //bool
    final String? AbsenceProjectId; //int
    final String? Addition; //bool
    final String AllowanceQty; //float
    final String AllowanceQty_fmt; //string
    final String? Approved; //bool
    final String? Approved2; //bool
    final String BreakTime; //float
    final String BreakTime_fmt; //string
    final String? CarPooling; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? CustomerId; //int
    final String Debit; //boolean
    final String Description; //string
    final String Disabled; //boolean
    final String FullName; //string
    final String Hours; //float
    final String Hours_fmt; //string
    final String Id; //int
    final String? InfoNoteId; //int
    final String? InvoiceId; //int
    final String Invoiced; //bool
    final String? Locked; //bool
    final String MoveAll; //boolean
    final String? PieceWork; //bool
    final String ProfessionAccountNo; //string
    final String ProfessionCode; //string
    final String ProfessionItemId; //int
    final String Project; //string
    final String ProjectId; //int
    final String ProjectName; //string
    final String ProjectNo; //string
    final String ProjectStatus; //string
    final String RegDate; //string
    final String? SalaryTransferDate; //date
    final String StartTime_fmt; //string
    final String StopTime_fmt; //string
    final String TotalCost; //float
    final String? Travel1Km; //float
    final String Travel1Km_fmt; //string
    final String? Travel1PriceKm; //float
    final String? Travel2Km; //float
    final String Travel2Km_fmt; //string
    final String? Travel3Driver; //int
    final String Travel3IsDriver; //boolean
    final String? Travel3Km; //float
    final String Travel3Km_fmt; //string
    final String? Travel4; //bool
    final String Unit; //string
    final String UserId; //int
    final String WOAWONo; //string
    final String? WorkOrderId; //int
    final String WorkOrderName; //string
    final String? WorkOrderNo; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  TimeStore(
    this.Absence,
    this.AbsenceProjectId,
    this.Addition,
    this.AllowanceQty,
    this.AllowanceQty_fmt,
    this.Approved,
    this.Approved2,
    this.BreakTime,
    this.BreakTime_fmt,
    this.CarPooling,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.Debit,
    this.Description,
    this.Disabled,
    this.FullName,
    this.Hours,
    this.Hours_fmt,
    this.Id,
    this.InfoNoteId,
    this.InvoiceId,
    this.Invoiced,
    this.Locked,
    this.MoveAll,
    this.PieceWork,
    this.ProfessionAccountNo,
    this.ProfessionCode,
    this.ProfessionItemId,
    this.Project,
    this.ProjectId,
    this.ProjectName,
    this.ProjectNo,
    this.ProjectStatus,
    this.RegDate,
    this.SalaryTransferDate,
    this.StartTime_fmt,
    this.StopTime_fmt,
    this.TotalCost,
    this.Travel1Km,
    this.Travel1Km_fmt,
    this.Travel1PriceKm,
    this.Travel2Km,
    this.Travel2Km_fmt,
    this.Travel3Driver,
    this.Travel3IsDriver,
    this.Travel3Km,
    this.Travel3Km_fmt,
    this.Travel4,
    this.Unit,
    this.UserId,
    this.WOAWONo,
    this.WorkOrderId,
    this.WorkOrderName,
    this.WorkOrderNo,
    this.isField,
    this.isTmpRec,
  );

  TimeStore.fromJson(Map<String, dynamic> json) : 
    Absence = json['Absence'] ?? '',
    AbsenceProjectId = json['AbsenceProjectId'] ?? '',
    Addition = json['Addition'] ?? '',
    AllowanceQty = json['AllowanceQty'] ?? '',
    AllowanceQty_fmt = json['AllowanceQty_fmt'] ?? '',
    Approved = json['Approved'] ?? '',
    Approved2 = json['Approved2'] ?? '',
    BreakTime = json['BreakTime'] ?? '',
    BreakTime_fmt = json['BreakTime_fmt'] ?? '',
    CarPooling = json['CarPooling'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Debit = json['Debit'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    Hours = json['Hours'] ?? '',
    Hours_fmt = json['Hours_fmt'] ?? '',
    Id = json['Id'] ?? '',
    InfoNoteId = json['InfoNoteId'] ?? '',
    InvoiceId = json['InvoiceId'] ?? '',
    Invoiced = json['Invoiced'] ?? '',
    Locked = json['Locked'] ?? '',
    MoveAll = json['MoveAll'] ?? '',
    PieceWork = json['PieceWork'] ?? '',
    ProfessionAccountNo = json['ProfessionAccountNo'] ?? '',
    ProfessionCode = json['ProfessionCode'] ?? '',
    ProfessionItemId = json['ProfessionItemId'] ?? '',
    Project = json['Project'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ProjectStatus = json['ProjectStatus'] ?? '',
    RegDate = json['RegDate'] ?? '',
    SalaryTransferDate = json['SalaryTransferDate'] ?? '',
    StartTime_fmt = json['StartTime_fmt'] ?? '',
    StopTime_fmt = json['StopTime_fmt'] ?? '',
    TotalCost = json['TotalCost'] ?? '',
    Travel1Km = json['Travel1Km'] ?? '',
    Travel1Km_fmt = json['Travel1Km_fmt'] ?? '',
    Travel1PriceKm = json['Travel1PriceKm'] ?? '',
    Travel2Km = json['Travel2Km'] ?? '',
    Travel2Km_fmt = json['Travel2Km_fmt'] ?? '',
    Travel3Driver = json['Travel3Driver'] ?? '',
    Travel3IsDriver = json['Travel3IsDriver'] ?? '',
    Travel3Km = json['Travel3Km'] ?? '',
    Travel3Km_fmt = json['Travel3Km_fmt'] ?? '',
    Travel4 = json['Travel4'] ?? '',
    Unit = json['Unit'] ?? '',
    UserId = json['UserId'] ?? '',
    WOAWONo = json['WOAWONo'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    WorkOrderName = json['WorkOrderName'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Absence' : Absence,
    'AbsenceProjectId' : AbsenceProjectId,
    'Addition' : Addition,
    'AllowanceQty' : AllowanceQty,
    'AllowanceQty_fmt' : AllowanceQty_fmt,
    'Approved' : Approved,
    'Approved2' : Approved2,
    'BreakTime' : BreakTime,
    'BreakTime_fmt' : BreakTime_fmt,
    'CarPooling' : CarPooling,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'Debit' : Debit,
    'Description' : Description,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'Hours' : Hours,
    'Hours_fmt' : Hours_fmt,
    'Id' : Id,
    'InfoNoteId' : InfoNoteId,
    'InvoiceId' : InvoiceId,
    'Invoiced' : Invoiced,
    'Locked' : Locked,
    'MoveAll' : MoveAll,
    'PieceWork' : PieceWork,
    'ProfessionAccountNo' : ProfessionAccountNo,
    'ProfessionCode' : ProfessionCode,
    'ProfessionItemId' : ProfessionItemId,
    'Project' : Project,
    'ProjectId' : ProjectId,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ProjectStatus' : ProjectStatus,
    'RegDate' : RegDate,
    'SalaryTransferDate' : SalaryTransferDate,
    'StartTime_fmt' : StartTime_fmt,
    'StopTime_fmt' : StopTime_fmt,
    'TotalCost' : TotalCost,
    'Travel1Km' : Travel1Km,
    'Travel1Km_fmt' : Travel1Km_fmt,
    'Travel1PriceKm' : Travel1PriceKm,
    'Travel2Km' : Travel2Km,
    'Travel2Km_fmt' : Travel2Km_fmt,
    'Travel3Driver' : Travel3Driver,
    'Travel3IsDriver' : Travel3IsDriver,
    'Travel3Km' : Travel3Km,
    'Travel3Km_fmt' : Travel3Km_fmt,
    'Travel4' : Travel4,
    'Unit' : Unit,
    'UserId' : UserId,
    'WOAWONo' : WOAWONo,
    'WorkOrderId' : WorkOrderId,
    'WorkOrderName' : WorkOrderName,
    'WorkOrderNo' : WorkOrderNo,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.User", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FullName", type: "string" },
      { name: "UserLogin", type: "string" },
      { name: "PersonalNo", type: "string" },
      { name: "Languagecode", type: "string" },
    ],
  },
});*/

class UserStore {
  static String name = 'UserStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String FullName; //string
    final String Id; //int
    final String Languagecode; //string
    final String PersonalNo; //string
    final String UserLogin; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.FullName,
    this.Id,
    this.Languagecode,
    this.PersonalNo,
    this.UserLogin,
    this.isField,
    this.isTmpRec,
  );

  UserStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    Id = json['Id'] ?? '',
    Languagecode = json['Languagecode'] ?? '',
    PersonalNo = json['PersonalNo'] ?? '',
    UserLogin = json['UserLogin'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'Id' : Id,
    'Languagecode' : Languagecode,
    'PersonalNo' : PersonalNo,
    'UserLogin' : UserLogin,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserAccess", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "ObjectRightId", type: "int" },
      { name: "ObjectRightName", type: "string", max: 50 },
      { name: "ObjectName", type: "string", max: 50 },
      { name: "IsProjectRight", type: "bool" },
      { name: "AccessRight", type: "int" },
      { name: "WriteRight", type: "int" },
      { name: "ReadRight", type: "int" },
      { name: "OwnRight", type: "int" },
    ],
  },
});*/

class UserAccessStore {
  static String name = 'UserAccessStore';

    final String AccessRight; //int
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String IsProjectRight; //bool
    final String ObjectName; //string
    final String ObjectRightId; //int
    final String ObjectRightName; //string
    final String OwnRight; //int
    final String ReadRight; //int
    final String UserId; //int
    final String WriteRight; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserAccessStore(
    this.AccessRight,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.IsProjectRight,
    this.ObjectName,
    this.ObjectRightId,
    this.ObjectRightName,
    this.OwnRight,
    this.ReadRight,
    this.UserId,
    this.WriteRight,
    this.isField,
    this.isTmpRec,
  );

  UserAccessStore.fromJson(Map<String, dynamic> json) : 
    AccessRight = json['AccessRight'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    IsProjectRight = json['IsProjectRight'] ?? '',
    ObjectName = json['ObjectName'] ?? '',
    ObjectRightId = json['ObjectRightId'] ?? '',
    ObjectRightName = json['ObjectRightName'] ?? '',
    OwnRight = json['OwnRight'] ?? '',
    ReadRight = json['ReadRight'] ?? '',
    UserId = json['UserId'] ?? '',
    WriteRight = json['WriteRight'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccessRight' : AccessRight,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'IsProjectRight' : IsProjectRight,
    'ObjectName' : ObjectName,
    'ObjectRightId' : ObjectRightId,
    'ObjectRightName' : ObjectRightName,
    'OwnRight' : OwnRight,
    'ReadRight' : ReadRight,
    'UserId' : UserId,
    'WriteRight' : WriteRight,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserFavoriteArticle", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ArticleId", type: "int" },
      { name: "ArticleNo", type: "string", max: 10 },
      { name: "Description", type: "string", max: 50 },
      {
        name: "FullDescription",
        type: "string",
        max: 50,
        convert: function (d, a) {
          var c = Ext.getStore("MyItemUnitStore"),
            b = c.findRecord("Id", a.get("ItemUnitId"));
          if (b) {
            return Ext.String.format(
              "{0} ({1})",
              a.get("Description"),
              b.get("Description")
            );
          } else {
            return a.get("Description");
          }
        },
      },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "UserId", type: "int" },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
    ],
  },
});*/

class UserFavoriteArticleStore {
  static String name = 'UserFavoriteArticleStore';

    final String AccountNo; //string
    final String ArticleId; //int
    final String ArticleNo; //string
    final String Changed; //date
    final String ChangedId; //string
    final String Chargeable; //bool
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Description; //string
    final String Disabled; //boolean
    final String FavoriteListId; //int
    final String FullDescription; //string
    final String Id; //int
    final String ItemUnitId; //int
    final String Payoff; //bool
    final String UserId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserFavoriteArticleStore(
    this.AccountNo,
    this.ArticleId,
    this.ArticleNo,
    this.Changed,
    this.ChangedId,
    this.Chargeable,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Description,
    this.Disabled,
    this.FavoriteListId,
    this.FullDescription,
    this.Id,
    this.ItemUnitId,
    this.Payoff,
    this.UserId,
    this.isField,
    this.isTmpRec,
  );

  UserFavoriteArticleStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    ArticleId = json['ArticleId'] ?? '',
    ArticleNo = json['ArticleNo'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Chargeable = json['Chargeable'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FavoriteListId = json['FavoriteListId'] ?? '',
    FullDescription = json['FullDescription'] ?? '',
    Id = json['Id'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    Payoff = json['Payoff'] ?? '',
    UserId = json['UserId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'ArticleId' : ArticleId,
    'ArticleNo' : ArticleNo,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Chargeable' : Chargeable,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Description' : Description,
    'Disabled' : Disabled,
    'FavoriteListId' : FavoriteListId,
    'FullDescription' : FullDescription,
    'Id' : Id,
    'ItemUnitId' : ItemUnitId,
    'Payoff' : Payoff,
    'UserId' : UserId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserFavoriteList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "FavoriteListId", type: "int" },
      { name: "Name", type: "string" },
    ],
  },
});*/

class UserFavoriteListStore {
  static String name = 'UserFavoriteListStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String FavoriteListId; //int
    final String Id; //int
    final String Name; //string
    final String UserId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserFavoriteListStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.FavoriteListId,
    this.Id,
    this.Name,
    this.UserId,
    this.isField,
    this.isTmpRec,
  );

  UserFavoriteListStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FavoriteListId = json['FavoriteListId'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    UserId = json['UserId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'FavoriteListId' : FavoriteListId,
    'Id' : Id,
    'Name' : Name,
    'UserId' : UserId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "FullName", type: "string" },
      { name: "Signature", type: "string" },
      { name: "EmployeeNo", type: "string" },
      { name: "PersonalNo", type: "string" },
      { name: "ProfessionCode", type: "string" },
      { name: "ProfessionItemId", type: "int" },
      { name: "OrganizationalProjectId", type: "int" },
      { name: "PartnerSupplier", type: "bool" },
    ],
  },
});*/

class UserListStore {
  static String name = 'UserListStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String EmployeeNo; //string
    final String FullName; //string
    final String Id; //int
    final String OrganizationalProjectId; //int
    final String PartnerSupplier; //bool
    final String PersonalNo; //string
    final String ProfessionCode; //string
    final String ProfessionItemId; //int
    final String Signature; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserListStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.EmployeeNo,
    this.FullName,
    this.Id,
    this.OrganizationalProjectId,
    this.PartnerSupplier,
    this.PersonalNo,
    this.ProfessionCode,
    this.ProfessionItemId,
    this.Signature,
    this.isField,
    this.isTmpRec,
  );

  UserListStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    EmployeeNo = json['EmployeeNo'] ?? '',
    FullName = json['FullName'] ?? '',
    Id = json['Id'] ?? '',
    OrganizationalProjectId = json['OrganizationalProjectId'] ?? '',
    PartnerSupplier = json['PartnerSupplier'] ?? '',
    PersonalNo = json['PersonalNo'] ?? '',
    ProfessionCode = json['ProfessionCode'] ?? '',
    ProfessionItemId = json['ProfessionItemId'] ?? '',
    Signature = json['Signature'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'EmployeeNo' : EmployeeNo,
    'FullName' : FullName,
    'Id' : Id,
    'OrganizationalProjectId' : OrganizationalProjectId,
    'PartnerSupplier' : PartnerSupplier,
    'PersonalNo' : PersonalNo,
    'ProfessionCode' : ProfessionCode,
    'ProfessionItemId' : ProfessionItemId,
    'Signature' : Signature,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserPoolWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "ProjectNo", type: "string", max: 50 },
      {
        name: "Project",
        type: "string",
        max: 100,
        convert: function (b, a) {
          return a.get("ProjectNo") + ", " + a.get("ProjectName");
        },
      },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "ProductionStart",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "ProductionEnd",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      { name: "HaveDocument", type: "bool", defaultValue: !1 },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "ProductionStartDateDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartDateDisplay(b, a);
        },
      },
      {
        name: "ProductionStartWeekDay",
        type: "string",
        convert: function (b, a) {
          return Ext.String.capitalize(a.convertProductionStartWeekDay(b, a));
        },
      },
      {
        name: "ProductionStartTimeDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartTimeDisplay(b, a);
        },
      },
      { name: "CustomerName", type: "string", max: 50 },
      { name: "CustomerFavoritePriceList", type: "boolean", persist: !1 },
      { name: "CustomerFavoriteArticlePrice", type: "boolean", persist: !1 },
      { name: "ProjectFavorite", type: "boolean", persist: !1 },
    ],
  },
});*/

class UserPoolWorkOrderListStore {
  static String name = 'UserPoolWorkOrderListStore';

    final String Addition; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerFavoriteArticlePrice; //boolean
    final String CustomerFavoritePriceList; //boolean
    final String CustomerName; //string
    final String Disabled; //boolean
    final String HaveDocument; //bool
    final String Id; //int
    final String Name; //string
    final String? ProductionEnd; //date
    final String? ProductionStart; //date
    final String ProductionStartDateDisplay; //string
    final String ProductionStartTimeDisplay; //string
    final String ProductionStartWeekDay; //string
    final String Project; //string
    final String ProjectFavorite; //boolean
    final String ProjectId; //int
    final String ProjectName; //string
    final String ProjectNo; //string
    final String ProjectStatusCode; //int
    final String ResponsibleForemanId; //int
    final String ResponsibleServiceId; //int
    final String WorkOrderId; //int
    final String WorkOrderNo; //int
    final String WorkOrderStatusCode; //int
    final String WorkOrderStatusId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserPoolWorkOrderListStore(
    this.Addition,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerFavoriteArticlePrice,
    this.CustomerFavoritePriceList,
    this.CustomerName,
    this.Disabled,
    this.HaveDocument,
    this.Id,
    this.Name,
    this.ProductionEnd,
    this.ProductionStart,
    this.ProductionStartDateDisplay,
    this.ProductionStartTimeDisplay,
    this.ProductionStartWeekDay,
    this.Project,
    this.ProjectFavorite,
    this.ProjectId,
    this.ProjectName,
    this.ProjectNo,
    this.ProjectStatusCode,
    this.ResponsibleForemanId,
    this.ResponsibleServiceId,
    this.WorkOrderId,
    this.WorkOrderNo,
    this.WorkOrderStatusCode,
    this.WorkOrderStatusId,
    this.isField,
    this.isTmpRec,
  );

  UserPoolWorkOrderListStore.fromJson(Map<String, dynamic> json) : 
    Addition = json['Addition'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerFavoriteArticlePrice = json['CustomerFavoriteArticlePrice'] ?? '',
    CustomerFavoritePriceList = json['CustomerFavoritePriceList'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    HaveDocument = json['HaveDocument'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    ProductionEnd = json['ProductionEnd'] ?? '',
    ProductionStart = json['ProductionStart'] ?? '',
    ProductionStartDateDisplay = json['ProductionStartDateDisplay'] ?? '',
    ProductionStartTimeDisplay = json['ProductionStartTimeDisplay'] ?? '',
    ProductionStartWeekDay = json['ProductionStartWeekDay'] ?? '',
    Project = json['Project'] ?? '',
    ProjectFavorite = json['ProjectFavorite'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ProjectStatusCode = json['ProjectStatusCode'] ?? '',
    ResponsibleForemanId = json['ResponsibleForemanId'] ?? '',
    ResponsibleServiceId = json['ResponsibleServiceId'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    WorkOrderStatusCode = json['WorkOrderStatusCode'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Addition' : Addition,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerFavoriteArticlePrice' : CustomerFavoriteArticlePrice,
    'CustomerFavoritePriceList' : CustomerFavoritePriceList,
    'CustomerName' : CustomerName,
    'Disabled' : Disabled,
    'HaveDocument' : HaveDocument,
    'Id' : Id,
    'Name' : Name,
    'ProductionEnd' : ProductionEnd,
    'ProductionStart' : ProductionStart,
    'ProductionStartDateDisplay' : ProductionStartDateDisplay,
    'ProductionStartTimeDisplay' : ProductionStartTimeDisplay,
    'ProductionStartWeekDay' : ProductionStartWeekDay,
    'Project' : Project,
    'ProjectFavorite' : ProjectFavorite,
    'ProjectId' : ProjectId,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ProjectStatusCode' : ProjectStatusCode,
    'ResponsibleForemanId' : ResponsibleForemanId,
    'ResponsibleServiceId' : ResponsibleServiceId,
    'WorkOrderId' : WorkOrderId,
    'WorkOrderNo' : WorkOrderNo,
    'WorkOrderStatusCode' : WorkOrderStatusCode,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserProjectWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "WorkPoolId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      {
        name: "BasicScope",
        type: "bool",
        readOnly: !0,
        convert: function (b, a) {
          if (a.get("WorkOrderNo") == 1) {
            return !0;
          }
          return !1;
        },
      },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
      { name: "CustomerId", type: "int", persist: !1 },
      { name: "CustomerFavoritePriceList", type: "boolean", persist: !1 },
      { name: "CustomerFavoriteArticlePrice", type: "boolean", persist: !1 },
      { name: "ProjectFavorite", type: "boolean", persist: !1 },
    ],
  },
});*/

class UserProjectWorkOrderListStore {
  static String name = 'UserProjectWorkOrderListStore';

    final String Addition; //bool
    final String BasicScope; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerFavoriteArticlePrice; //boolean
    final String CustomerFavoritePriceList; //boolean
    final String CustomerId; //int
    final String Disabled; //boolean
    final String FullName; //string
    final String Id; //int
    final String Name; //string
    final String ProjectFavorite; //boolean
    final String ProjectId; //int
    final String ProjectName; //string
    final String ResponsibleServiceId; //int
    final String WorkOrderNo; //int
    final String WorkOrderStatusId; //int
    final String WorkPoolId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserProjectWorkOrderListStore(
    this.Addition,
    this.BasicScope,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerFavoriteArticlePrice,
    this.CustomerFavoritePriceList,
    this.CustomerId,
    this.Disabled,
    this.FullName,
    this.Id,
    this.Name,
    this.ProjectFavorite,
    this.ProjectId,
    this.ProjectName,
    this.ResponsibleServiceId,
    this.WorkOrderNo,
    this.WorkOrderStatusId,
    this.WorkPoolId,
    this.isField,
    this.isTmpRec,
  );

  UserProjectWorkOrderListStore.fromJson(Map<String, dynamic> json) : 
    Addition = json['Addition'] ?? '',
    BasicScope = json['BasicScope'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerFavoriteArticlePrice = json['CustomerFavoriteArticlePrice'] ?? '',
    CustomerFavoritePriceList = json['CustomerFavoritePriceList'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    ProjectFavorite = json['ProjectFavorite'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ResponsibleServiceId = json['ResponsibleServiceId'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    WorkPoolId = json['WorkPoolId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Addition' : Addition,
    'BasicScope' : BasicScope,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerFavoriteArticlePrice' : CustomerFavoriteArticlePrice,
    'CustomerFavoritePriceList' : CustomerFavoritePriceList,
    'CustomerId' : CustomerId,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'Id' : Id,
    'Name' : Name,
    'ProjectFavorite' : ProjectFavorite,
    'ProjectId' : ProjectId,
    'ProjectName' : ProjectName,
    'ResponsibleServiceId' : ResponsibleServiceId,
    'WorkOrderNo' : WorkOrderNo,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'WorkPoolId' : WorkPoolId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserRight", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "ObjectRightId", type: "int" },
      { name: "ObjectRightName", type: "string", max: 50 },
      { name: "ObjectName", type: "string", max: 50 },
      { name: "WebClient", type: "bool" },
      { name: "MobileClient", type: "bool" },
      { name: "ApiClient", type: "bool" },
      { name: "AdminClient", type: "bool" },
    ],
  },
});*/

class UserRightStore {
  static String name = 'UserRightStore';

    final String AdminClient; //bool
    final String ApiClient; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String MobileClient; //bool
    final String ObjectName; //string
    final String ObjectRightId; //int
    final String ObjectRightName; //string
    final String UserId; //int
    final String WebClient; //bool
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserRightStore(
    this.AdminClient,
    this.ApiClient,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.MobileClient,
    this.ObjectName,
    this.ObjectRightId,
    this.ObjectRightName,
    this.UserId,
    this.WebClient,
    this.isField,
    this.isTmpRec,
  );

  UserRightStore.fromJson(Map<String, dynamic> json) : 
    AdminClient = json['AdminClient'] ?? '',
    ApiClient = json['ApiClient'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    MobileClient = json['MobileClient'] ?? '',
    ObjectName = json['ObjectName'] ?? '',
    ObjectRightId = json['ObjectRightId'] ?? '',
    ObjectRightName = json['ObjectRightName'] ?? '',
    UserId = json['UserId'] ?? '',
    WebClient = json['WebClient'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AdminClient' : AdminClient,
    'ApiClient' : ApiClient,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'MobileClient' : MobileClient,
    'ObjectName' : ObjectName,
    'ObjectRightId' : ObjectRightId,
    'ObjectRightName' : ObjectRightName,
    'UserId' : UserId,
    'WebClient' : WebClient,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserSession", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "SessionId", type: "string", max: 128 },
      { name: "SessionUserId", type: "int" },
      { name: "ImpersonatedUserId", type: "int" },
      { name: "Languagecode", type: "string" },
      {
        name: "FullName",
        type: "string",
        max: 50,
        convert: function (d, b) {
          var c = Ext.getStore("MyUserListStore"),
            a;
          a = c.findRecord("Id", b.get("ImpersonatedUserId"), 0, !1, !0, !0);
          if (a) {
            return a.get("FullName");
          }
          return "";
        },
      },
    ],
  },
});*/

class UserSessionStore {
  static String name = 'UserSessionStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String FullName; //string
    final String Id; //int
    final String ImpersonatedUserId; //int
    final String Languagecode; //string
    final String SessionId; //string
    final String SessionUserId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserSessionStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.FullName,
    this.Id,
    this.ImpersonatedUserId,
    this.Languagecode,
    this.SessionId,
    this.SessionUserId,
    this.isField,
    this.isTmpRec,
  );

  UserSessionStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    Id = json['Id'] ?? '',
    ImpersonatedUserId = json['ImpersonatedUserId'] ?? '',
    Languagecode = json['Languagecode'] ?? '',
    SessionId = json['SessionId'] ?? '',
    SessionUserId = json['SessionUserId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'Id' : Id,
    'ImpersonatedUserId' : ImpersonatedUserId,
    'Languagecode' : Languagecode,
    'SessionId' : SessionId,
    'SessionUserId' : SessionUserId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserSetting", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "UserId", type: "int" },
      { name: "SettingKey", type: "string", max: 50 },
      { name: "SettingValue", type: "string" },
    ],
  },
});*/

class UserSettingStore {
  static String name = 'UserSettingStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String SettingKey; //string
    final String SettingValue; //string
    final String UserId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserSettingStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.SettingKey,
    this.SettingValue,
    this.UserId,
    this.isField,
    this.isTmpRec,
  );

  UserSettingStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    SettingKey = json['SettingKey'] ?? '',
    SettingValue = json['SettingValue'] ?? '',
    UserId = json['UserId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'SettingKey' : SettingKey,
    'SettingValue' : SettingValue,
    'UserId' : UserId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.UserWorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "ProjectId", type: "int" },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "ProjectNo", type: "string", max: 50 },
      {
        name: "Project",
        type: "string",
        max: 100,
        convert: function (b, a) {
          return a.get("ProjectNo") + ", " + a.get("ProjectName");
        },
      },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "ProductionStart",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "ProductionStartDateDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartDateDisplay(b, a);
        },
      },
      {
        name: "ProductionStartWeekDay",
        type: "string",
        convert: function (b, a) {
          return Ext.String.capitalize(a.convertProductionStartWeekDay(b, a));
        },
      },
      {
        name: "ProductionStartTimeDisplay",
        type: "string",
        meType: "meTimeStamp",
        convert: function (b, a) {
          return a.convertProductionStartTimeDisplay(b, a);
        },
      },
      {
        name: "ProductionEnd",
        type: "date",
        useNull: !0,
        dateFormat: "Y-m-d\\TH:i:s",
      },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
      { name: "HaveDocument", type: "bool", defaultValue: !1 },
      { name: "CustomerName", type: "string", max: 50 },
    ],
  },
});*/

class UserWorkOrderListStore {
  static String name = 'UserWorkOrderListStore';

    final String Addition; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerName; //string
    final String Disabled; //boolean
    final String FullName; //string
    final String HaveDocument; //bool
    final String Id; //int
    final String Name; //string
    final String? ProductionEnd; //date
    final String? ProductionStart; //date
    final String ProductionStartDateDisplay; //string
    final String ProductionStartTimeDisplay; //string
    final String ProductionStartWeekDay; //string
    final String Project; //string
    final String ProjectId; //int
    final String ProjectName; //string
    final String ProjectNo; //string
    final String ProjectStatusCode; //int
    final String ResponsibleForemanId; //int
    final String ResponsibleServiceId; //int
    final String WorkOrderId; //int
    final String WorkOrderNo; //int
    final String WorkOrderStatusCode; //int
    final String WorkOrderStatusId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  UserWorkOrderListStore(
    this.Addition,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerName,
    this.Disabled,
    this.FullName,
    this.HaveDocument,
    this.Id,
    this.Name,
    this.ProductionEnd,
    this.ProductionStart,
    this.ProductionStartDateDisplay,
    this.ProductionStartTimeDisplay,
    this.ProductionStartWeekDay,
    this.Project,
    this.ProjectId,
    this.ProjectName,
    this.ProjectNo,
    this.ProjectStatusCode,
    this.ResponsibleForemanId,
    this.ResponsibleServiceId,
    this.WorkOrderId,
    this.WorkOrderNo,
    this.WorkOrderStatusCode,
    this.WorkOrderStatusId,
    this.isField,
    this.isTmpRec,
  );

  UserWorkOrderListStore.fromJson(Map<String, dynamic> json) : 
    Addition = json['Addition'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    HaveDocument = json['HaveDocument'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    ProductionEnd = json['ProductionEnd'] ?? '',
    ProductionStart = json['ProductionStart'] ?? '',
    ProductionStartDateDisplay = json['ProductionStartDateDisplay'] ?? '',
    ProductionStartTimeDisplay = json['ProductionStartTimeDisplay'] ?? '',
    ProductionStartWeekDay = json['ProductionStartWeekDay'] ?? '',
    Project = json['Project'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ProjectStatusCode = json['ProjectStatusCode'] ?? '',
    ResponsibleForemanId = json['ResponsibleForemanId'] ?? '',
    ResponsibleServiceId = json['ResponsibleServiceId'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    WorkOrderStatusCode = json['WorkOrderStatusCode'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Addition' : Addition,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerName' : CustomerName,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'HaveDocument' : HaveDocument,
    'Id' : Id,
    'Name' : Name,
    'ProductionEnd' : ProductionEnd,
    'ProductionStart' : ProductionStart,
    'ProductionStartDateDisplay' : ProductionStartDateDisplay,
    'ProductionStartTimeDisplay' : ProductionStartTimeDisplay,
    'ProductionStartWeekDay' : ProductionStartWeekDay,
    'Project' : Project,
    'ProjectId' : ProjectId,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ProjectStatusCode' : ProjectStatusCode,
    'ResponsibleForemanId' : ResponsibleForemanId,
    'ResponsibleServiceId' : ResponsibleServiceId,
    'WorkOrderId' : WorkOrderId,
    'WorkOrderNo' : WorkOrderNo,
    'WorkOrderStatusCode' : WorkOrderStatusCode,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.Vat", {
  extend: MEM.model.Base,
  config: {
    fields: [
      {
        name: "VatPercent",
        type: "float",
        meType: "mePercent",
        useNull: !0,
        display: T("VAT factor"),
      },
      {
        name: "Description",
        type: "string",
        meType: "meMediumText",
        max: 50,
        display: T("Description"),
      },
    ],
  },
});*/

class VatStore {
  static String name = 'VatStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Description; //string
    final String Disabled; //boolean
    final String Id; //int
    final String? VatPercent; //float
    final String isField; //boolean
    final String isTmpRec; //boolean

  VatStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Description,
    this.Disabled,
    this.Id,
    this.VatPercent,
    this.isField,
    this.isTmpRec,
  );

  VatStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Description = json['Description'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    VatPercent = json['VatPercent'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Description' : Description,
    'Disabled' : Disabled,
    'Id' : Id,
    'VatPercent' : VatPercent,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrder", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int" },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      { name: "Addition", type: "bool" },
      { name: "Name", type: "string", max: 100, defaultValue: "" },
      { name: "WorkDescription", type: "string", defaultValue: "" },
      { name: "WorkFeedback", type: "string", defaultValue: "" },
      { name: "WorkplaceAddress", type: "string", defaultValue: "" },
      { name: "GpsX", type: "int", persist: !1, useNull: !0 },
      { name: "GpsY", type: "int", persist: !1, useNull: !0 },
      { name: "District", type: "string", persist: !1, max: 50 },
      { name: "ResponsibleServiceId", type: "int", useNull: !0 },
      { name: "WorkPoolId", type: "int", useNull: !0 },
      { name: "ResponsibleForemanId", type: "int", useNull: !0 },
      { name: "CreditRisk", type: "boolean" },
      { name: "CustomerId", type: "int" },
      { name: "CustomerName", type: "string" },
      { name: "CustomerAgentId", type: "int", useNull: !0 },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerRefNo", type: "string", max: 1024, defaultValue: "" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ExternalWorkOrderStatusId", type: "int", useNull: !0 },
      {
        name: "WorkOrderStatusCode",
        type: "int",
        sortable: !0,
        persist: !1,
        sortType: "asInt",
        convert: function (d, b) {
          var c = Ext.getStore("MyCloneWorkOrderStatusStore"),
            a;
          a = c.findRecord("Id", b.get("WorkOrderStatusId"), 0, !1, !0, !0);
          if (a) {
            return a.get("StatusCode");
          }
          return "";
        },
      },
      {
        name: "ProductionStart",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        useNull: !0,
      },
      {
        name: "ProductionEnd",
        type: "date",
        dateFormat: "Y-m-d\\TH:i:s",
        useNull: !0,
      },
      {
        name: "ProductionStartClockXX",
        type: "string",
        dateFormat: "time",
        useNull: !0,
      },
      {
        name: "ProductionEndClockXX",
        type: "string",
        dateFormat: "time",
        useNull: !0,
      },
      { name: "OrderDate", type: "date", dateFormat: "Y-m-d" },
      { name: "ReportSign", type: "string", persist: !1, max: 50 },
      { name: "ReportTimestamp", type: "string", persist: !1 },
      { name: "Invoiced", type: "bool", persist: !1, defaultValue: !1 },
      { name: "InvoiceDate", type: "date", persist: !1, useNull: !0 },
      { name: "InvoiceId", type: "int", persist: !1, useNull: !0 },
      { name: "CachedWorkCost", type: "float", persist: !1, useNull: !0 },
      { name: "CachedWorkRevenue", type: "float", persist: !1, useNull: !0 },
      { name: "AdditionStatusId", type: "int" },
      { name: "ConstructionTypeId", type: "int" },
      { name: "BudgetLevelId", type: "int", persist: !1 },
      { name: "MarkupModelId", type: "int", persist: !1 },
      { name: "OrderAmount", type: "float", persist: !1, useNull: !0 },
      { name: "FixedPrice", type: "bool", defaultValue: !0 },
      { name: "CostProjectId", type: "int" },
      { name: "FrameworkContractId", type: "int", useNull: !0 },
      { name: "ServiceCategoryId", type: "int", useNull: !0 },
      { name: "GpsX", type: "int", useNull: !0 },
      { name: "GpsY", type: "int", useNull: !0 },
      { name: "SignOnSite", type: "bool", defaultValue: !1 },
      { name: "WorkOrderDocumentId", type: "int" },
      {
        name: "ExternalStatusName",
        type: "string",
        persist: !1,
        defaultValue: "",
      },
      { name: "ExternalStatusComment", type: "string", persist: !1 },
      { name: "UpdatePrices", type: "bool", defaultValue: !1 },
      { name: "KPIRuleId", type: "int", useNull: !0 },
      { name: "KPIName", type: "string", persist: !1 },
    ],
  },
});*/

class WorkOrderStore {
  static String name = 'WorkOrderStore';

    final String Addition; //bool
    final String AdditionStatusId; //int
    final String BudgetLevelId; //int
    final String? CachedWorkCost; //float
    final String? CachedWorkRevenue; //float
    final String Changed; //date
    final String ChangedId; //string
    final String ConstructionTypeId; //int
    final String ContactName; //string
    final String CostProjectId; //int
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CreditRisk; //boolean
    final String? CustomerAgentId; //int
    final String CustomerId; //int
    final String CustomerName; //string
    final String CustomerRefNo; //string
    final String Disabled; //boolean
    final String District; //string
    final String ExternalStatusComment; //string
    final String ExternalStatusName; //string
    final String? ExternalWorkOrderStatusId; //int
    final String FixedPrice; //bool
    final String? FrameworkContractId; //int
    final String? GpsX; //int
    final String? GpsY; //int
    final String Id; //int
    final String? InvoiceDate; //date
    final String? InvoiceId; //int
    final String Invoiced; //bool
    final String KPIName; //string
    final String? KPIRuleId; //int
    final String MarkupModelId; //int
    final String Name; //string
    final String? OrderAmount; //float
    final String OrderDate; //date
    final String? ProductionEnd; //date
    final String? ProductionEndClockXX; //string
    final String? ProductionStart; //date
    final String? ProductionStartClockXX; //string
    final String ProjectId; //int
    final String ReportSign; //string
    final String ReportTimestamp; //string
    final String? ResponsibleForemanId; //int
    final String? ResponsibleServiceId; //int
    final String? ServiceCategoryId; //int
    final String SignOnSite; //bool
    final String UpdatePrices; //bool
    final String WorkDescription; //string
    final String WorkFeedback; //string
    final String WorkOrderDocumentId; //int
    final String WorkOrderNo; //int
    final String WorkOrderStatusCode; //int
    final String WorkOrderStatusId; //int
    final String? WorkPoolId; //int
    final String WorkplaceAddress; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderStore(
    this.Addition,
    this.AdditionStatusId,
    this.BudgetLevelId,
    this.CachedWorkCost,
    this.CachedWorkRevenue,
    this.Changed,
    this.ChangedId,
    this.ConstructionTypeId,
    this.ContactName,
    this.CostProjectId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditRisk,
    this.CustomerAgentId,
    this.CustomerId,
    this.CustomerName,
    this.CustomerRefNo,
    this.Disabled,
    this.District,
    this.ExternalStatusComment,
    this.ExternalStatusName,
    this.ExternalWorkOrderStatusId,
    this.FixedPrice,
    this.FrameworkContractId,
    this.GpsX,
    this.GpsY,
    this.Id,
    this.InvoiceDate,
    this.InvoiceId,
    this.Invoiced,
    this.KPIName,
    this.KPIRuleId,
    this.MarkupModelId,
    this.Name,
    this.OrderAmount,
    this.OrderDate,
    this.ProductionEnd,
    this.ProductionEndClockXX,
    this.ProductionStart,
    this.ProductionStartClockXX,
    this.ProjectId,
    this.ReportSign,
    this.ReportTimestamp,
    this.ResponsibleForemanId,
    this.ResponsibleServiceId,
    this.ServiceCategoryId,
    this.SignOnSite,
    this.UpdatePrices,
    this.WorkDescription,
    this.WorkFeedback,
    this.WorkOrderDocumentId,
    this.WorkOrderNo,
    this.WorkOrderStatusCode,
    this.WorkOrderStatusId,
    this.WorkPoolId,
    this.WorkplaceAddress,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderStore.fromJson(Map<String, dynamic> json) : 
    Addition = json['Addition'] ?? '',
    AdditionStatusId = json['AdditionStatusId'] ?? '',
    BudgetLevelId = json['BudgetLevelId'] ?? '',
    CachedWorkCost = json['CachedWorkCost'] ?? '',
    CachedWorkRevenue = json['CachedWorkRevenue'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ConstructionTypeId = json['ConstructionTypeId'] ?? '',
    ContactName = json['ContactName'] ?? '',
    CostProjectId = json['CostProjectId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditRisk = json['CreditRisk'] ?? '',
    CustomerAgentId = json['CustomerAgentId'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    CustomerRefNo = json['CustomerRefNo'] ?? '',
    Disabled = json['Disabled'] ?? '',
    District = json['District'] ?? '',
    ExternalStatusComment = json['ExternalStatusComment'] ?? '',
    ExternalStatusName = json['ExternalStatusName'] ?? '',
    ExternalWorkOrderStatusId = json['ExternalWorkOrderStatusId'] ?? '',
    FixedPrice = json['FixedPrice'] ?? '',
    FrameworkContractId = json['FrameworkContractId'] ?? '',
    GpsX = json['GpsX'] ?? '',
    GpsY = json['GpsY'] ?? '',
    Id = json['Id'] ?? '',
    InvoiceDate = json['InvoiceDate'] ?? '',
    InvoiceId = json['InvoiceId'] ?? '',
    Invoiced = json['Invoiced'] ?? '',
    KPIName = json['KPIName'] ?? '',
    KPIRuleId = json['KPIRuleId'] ?? '',
    MarkupModelId = json['MarkupModelId'] ?? '',
    Name = json['Name'] ?? '',
    OrderAmount = json['OrderAmount'] ?? '',
    OrderDate = json['OrderDate'] ?? '',
    ProductionEnd = json['ProductionEnd'] ?? '',
    ProductionEndClockXX = json['ProductionEndClockXX'] ?? '',
    ProductionStart = json['ProductionStart'] ?? '',
    ProductionStartClockXX = json['ProductionStartClockXX'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ReportSign = json['ReportSign'] ?? '',
    ReportTimestamp = json['ReportTimestamp'] ?? '',
    ResponsibleForemanId = json['ResponsibleForemanId'] ?? '',
    ResponsibleServiceId = json['ResponsibleServiceId'] ?? '',
    ServiceCategoryId = json['ServiceCategoryId'] ?? '',
    SignOnSite = json['SignOnSite'] ?? '',
    UpdatePrices = json['UpdatePrices'] ?? '',
    WorkDescription = json['WorkDescription'] ?? '',
    WorkFeedback = json['WorkFeedback'] ?? '',
    WorkOrderDocumentId = json['WorkOrderDocumentId'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    WorkOrderStatusCode = json['WorkOrderStatusCode'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    WorkPoolId = json['WorkPoolId'] ?? '',
    WorkplaceAddress = json['WorkplaceAddress'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Addition' : Addition,
    'AdditionStatusId' : AdditionStatusId,
    'BudgetLevelId' : BudgetLevelId,
    'CachedWorkCost' : CachedWorkCost,
    'CachedWorkRevenue' : CachedWorkRevenue,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ConstructionTypeId' : ConstructionTypeId,
    'ContactName' : ContactName,
    'CostProjectId' : CostProjectId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditRisk' : CreditRisk,
    'CustomerAgentId' : CustomerAgentId,
    'CustomerId' : CustomerId,
    'CustomerName' : CustomerName,
    'CustomerRefNo' : CustomerRefNo,
    'Disabled' : Disabled,
    'District' : District,
    'ExternalStatusComment' : ExternalStatusComment,
    'ExternalStatusName' : ExternalStatusName,
    'ExternalWorkOrderStatusId' : ExternalWorkOrderStatusId,
    'FixedPrice' : FixedPrice,
    'FrameworkContractId' : FrameworkContractId,
    'GpsX' : GpsX,
    'GpsY' : GpsY,
    'Id' : Id,
    'InvoiceDate' : InvoiceDate,
    'InvoiceId' : InvoiceId,
    'Invoiced' : Invoiced,
    'KPIName' : KPIName,
    'KPIRuleId' : KPIRuleId,
    'MarkupModelId' : MarkupModelId,
    'Name' : Name,
    'OrderAmount' : OrderAmount,
    'OrderDate' : OrderDate,
    'ProductionEnd' : ProductionEnd,
    'ProductionEndClockXX' : ProductionEndClockXX,
    'ProductionStart' : ProductionStart,
    'ProductionStartClockXX' : ProductionStartClockXX,
    'ProjectId' : ProjectId,
    'ReportSign' : ReportSign,
    'ReportTimestamp' : ReportTimestamp,
    'ResponsibleForemanId' : ResponsibleForemanId,
    'ResponsibleServiceId' : ResponsibleServiceId,
    'ServiceCategoryId' : ServiceCategoryId,
    'SignOnSite' : SignOnSite,
    'UpdatePrices' : UpdatePrices,
    'WorkDescription' : WorkDescription,
    'WorkFeedback' : WorkFeedback,
    'WorkOrderDocumentId' : WorkOrderDocumentId,
    'WorkOrderNo' : WorkOrderNo,
    'WorkOrderStatusCode' : WorkOrderStatusCode,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'WorkPoolId' : WorkPoolId,
    'WorkplaceAddress' : WorkplaceAddress,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrderAssignedLocation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", useNull: !0 },
      { name: "WorkOrderNo", type: "int", max: 10 },
      {
        name: "WOAWONo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
        convert: function (b, a) {
          if (a.get("Addition") == 1) {
            return (
              getSetting("System.Prefix.VariationNo") +
              Ext.String.leftPad(a.get("WorkOrderNo"), 3, "0")
            );
          } else {
            return a.get("WorkOrderNo");
          }
        },
      },
      { name: "Name", type: "string", meType: "meLongText", max: 100 },
      { name: "CustomerName", type: "string", meType: "meLongText", max: 100 },
      { name: "WorkplaceAddress", type: "string", meType: "meMediumText" },
      { name: "WorkOrderStatusId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderStatusCode", type: "int", meType: "meMediumText" },
      { name: "GpsX", type: "int", meType: "meShortText", useNull: !0 },
      { name: "GpsY", type: "int", meType: "meShortText", useNull: !0 },
      { name: "ProjectStatusCode", type: "int" },
      { name: "ProjectStatusId", type: "int" },
      { name: "ResponsibleServiceId", type: "int" },
    ],
  },
});*/

class WorkOrderAssignedLocationStore {
  static String name = 'WorkOrderAssignedLocationStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerName; //string
    final String Disabled; //boolean
    final String? GpsX; //int
    final String? GpsY; //int
    final String Id; //int
    final String Name; //string
    final String? ProjectId; //int
    final String ProjectStatusCode; //int
    final String ProjectStatusId; //int
    final String ResponsibleServiceId; //int
    final String? WOAWONo; //int
    final String WorkOrderNo; //int
    final String WorkOrderStatusCode; //int
    final String WorkOrderStatusId; //int
    final String WorkplaceAddress; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderAssignedLocationStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerName,
    this.Disabled,
    this.GpsX,
    this.GpsY,
    this.Id,
    this.Name,
    this.ProjectId,
    this.ProjectStatusCode,
    this.ProjectStatusId,
    this.ResponsibleServiceId,
    this.WOAWONo,
    this.WorkOrderNo,
    this.WorkOrderStatusCode,
    this.WorkOrderStatusId,
    this.WorkplaceAddress,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderAssignedLocationStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    GpsX = json['GpsX'] ?? '',
    GpsY = json['GpsY'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectStatusCode = json['ProjectStatusCode'] ?? '',
    ProjectStatusId = json['ProjectStatusId'] ?? '',
    ResponsibleServiceId = json['ResponsibleServiceId'] ?? '',
    WOAWONo = json['WOAWONo'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    WorkOrderStatusCode = json['WorkOrderStatusCode'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    WorkplaceAddress = json['WorkplaceAddress'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerName' : CustomerName,
    'Disabled' : Disabled,
    'GpsX' : GpsX,
    'GpsY' : GpsY,
    'Id' : Id,
    'Name' : Name,
    'ProjectId' : ProjectId,
    'ProjectStatusCode' : ProjectStatusCode,
    'ProjectStatusId' : ProjectStatusId,
    'ResponsibleServiceId' : ResponsibleServiceId,
    'WOAWONo' : WOAWONo,
    'WorkOrderNo' : WorkOrderNo,
    'WorkOrderStatusCode' : WorkOrderStatusCode,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'WorkplaceAddress' : WorkplaceAddress,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrderContact", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "CustomerAgentId", type: "int" },
      { name: "Mobile", type: "string", max: 30 },
      { name: "Phone", type: "string", max: 30 },
      { name: "Email", type: "string", max: 50 },
      { name: "CustomerId", type: "int" },
      { name: "ContactName", type: "string", max: 50 },
      { name: "CustomerName", type: "string", max: 50 },
    ],
  },
});*/

class WorkOrderContactStore {
  static String name = 'WorkOrderContactStore';

    final String Changed; //date
    final String ChangedId; //string
    final String ContactName; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerAgentId; //int
    final String CustomerId; //int
    final String CustomerName; //string
    final String Disabled; //boolean
    final String Email; //string
    final String Id; //int
    final String Mobile; //string
    final String Phone; //string
    final String WorkOrderId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderContactStore(
    this.Changed,
    this.ChangedId,
    this.ContactName,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerAgentId,
    this.CustomerId,
    this.CustomerName,
    this.Disabled,
    this.Email,
    this.Id,
    this.Mobile,
    this.Phone,
    this.WorkOrderId,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderContactStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    ContactName = json['ContactName'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerAgentId = json['CustomerAgentId'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Email = json['Email'] ?? '',
    Id = json['Id'] ?? '',
    Mobile = json['Mobile'] ?? '',
    Phone = json['Phone'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'ContactName' : ContactName,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerAgentId' : CustomerAgentId,
    'CustomerId' : CustomerId,
    'CustomerName' : CustomerName,
    'Disabled' : Disabled,
    'Email' : Email,
    'Id' : Id,
    'Mobile' : Mobile,
    'Phone' : Phone,
    'WorkOrderId' : WorkOrderId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrderDocument", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderId", type: "int", meType: "meMediumText" },
      { name: "DiaryId", type: "int", meType: "meMediumText" },
      { name: "DocumentDescription", type: "string", meType: "meLongText" },
      { name: "Url", type: "string", meType: "meMediumText", max: 255 },
      { name: "Title", type: "string", meType: "meMediumText", max: 255 },
      { name: "Filename", type: "string", meType: "meMediumText", max: 255 },
      {
        name: "DocumentMimeType",
        type: "string",
        meType: "meMediumText",
        max: 255,
      },
      { name: "DocumentSize", type: "int", meType: "meMediumText" },
      { name: "DocumentData", type: "string" },
      {
        name: "ThumbnailMimeType",
        type: "string",
        meType: "meMediumText",
        max: 255,
      },
      { name: "ThumbnailData", type: "string", meType: "meLongText" },
      { name: "ImageWidth", type: "int", meType: "meInt" },
      { name: "ImageHeight", type: "int", meType: "meInt" },
      { name: "HideInPDA", type: "bool", persist: !1 },
      { name: "EnlargeInReports", type: "bool" },
      { name: "IncludeInReport", type: "bool" },
      { name: "ShowInPortal", type: "bool" },
      { name: "RegDate", type: "string" },
    ],
  },
});*/

class WorkOrderDocumentStore {
  static String name = 'WorkOrderDocumentStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String DiaryId; //int
    final String Disabled; //boolean
    final String DocumentData; //string
    final String DocumentDescription; //string
    final String DocumentMimeType; //string
    final String DocumentSize; //int
    final String EnlargeInReports; //bool
    final String Filename; //string
    final String HideInPDA; //bool
    final String Id; //int
    final String ImageHeight; //int
    final String ImageWidth; //int
    final String IncludeInReport; //bool
    final String ProjectId; //int
    final String RegDate; //string
    final String ShowInPortal; //bool
    final String ThumbnailData; //string
    final String ThumbnailMimeType; //string
    final String Title; //string
    final String Url; //string
    final String WorkOrderId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderDocumentStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.DiaryId,
    this.Disabled,
    this.DocumentData,
    this.DocumentDescription,
    this.DocumentMimeType,
    this.DocumentSize,
    this.EnlargeInReports,
    this.Filename,
    this.HideInPDA,
    this.Id,
    this.ImageHeight,
    this.ImageWidth,
    this.IncludeInReport,
    this.ProjectId,
    this.RegDate,
    this.ShowInPortal,
    this.ThumbnailData,
    this.ThumbnailMimeType,
    this.Title,
    this.Url,
    this.WorkOrderId,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderDocumentStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    DiaryId = json['DiaryId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    DocumentData = json['DocumentData'] ?? '',
    DocumentDescription = json['DocumentDescription'] ?? '',
    DocumentMimeType = json['DocumentMimeType'] ?? '',
    DocumentSize = json['DocumentSize'] ?? '',
    EnlargeInReports = json['EnlargeInReports'] ?? '',
    Filename = json['Filename'] ?? '',
    HideInPDA = json['HideInPDA'] ?? '',
    Id = json['Id'] ?? '',
    ImageHeight = json['ImageHeight'] ?? '',
    ImageWidth = json['ImageWidth'] ?? '',
    IncludeInReport = json['IncludeInReport'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    RegDate = json['RegDate'] ?? '',
    ShowInPortal = json['ShowInPortal'] ?? '',
    ThumbnailData = json['ThumbnailData'] ?? '',
    ThumbnailMimeType = json['ThumbnailMimeType'] ?? '',
    Title = json['Title'] ?? '',
    Url = json['Url'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'DiaryId' : DiaryId,
    'Disabled' : Disabled,
    'DocumentData' : DocumentData,
    'DocumentDescription' : DocumentDescription,
    'DocumentMimeType' : DocumentMimeType,
    'DocumentSize' : DocumentSize,
    'EnlargeInReports' : EnlargeInReports,
    'Filename' : Filename,
    'HideInPDA' : HideInPDA,
    'Id' : Id,
    'ImageHeight' : ImageHeight,
    'ImageWidth' : ImageWidth,
    'IncludeInReport' : IncludeInReport,
    'ProjectId' : ProjectId,
    'RegDate' : RegDate,
    'ShowInPortal' : ShowInPortal,
    'ThumbnailData' : ThumbnailData,
    'ThumbnailMimeType' : ThumbnailMimeType,
    'Title' : Title,
    'Url' : Url,
    'WorkOrderId' : WorkOrderId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrderList", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "Id", type: "int" },
      { name: "ProjectId", type: "int" },
      {
        name: "WorkOrderId",
        type: "int",
        convert: function (a, b) {
          if (a) {
            return a;
          }
          return b.get("Id");
        },
      },
      { name: "ResponsibleServiceId", type: "int" },
      { name: "ResponsibleForemanId", type: "int" },
      { name: "CustomerId", type: "int" },
      { name: "WorkPoolId", type: "int" },
      { name: "WorkOrderStatusId", type: "int" },
      { name: "ProjectNo", type: "string", max: 50 },
      { name: "ProjectName", type: "string", max: 50 },
      { name: "WorkOrderNo", type: "int", readOnly: !0 },
      {
        name: "BasicScope",
        type: "bool",
        readOnly: !0,
        convert: function (b, a) {
          if (a.get("WorkOrderNo") == 1) {
            return !0;
          }
          return !1;
        },
      },
      { name: "Addition", type: "bool", defaultValue: !1 },
      { name: "Name", type: "string", max: 100 },
      {
        name: "FullName",
        type: "string",
        max: 100,
        convert: function (b, a) {
          if (a.get("Addition")) {
            return AWOpad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          } else {
            return pad(a.get("WorkOrderNo"), 3) + ", " + a.get("Name");
          }
        },
      },
    ],
  },
});*/

class WorkOrderListStore {
  static String name = 'WorkOrderListStore';

    final String Addition; //bool
    final String BasicScope; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerId; //int
    final String Disabled; //boolean
    final String FullName; //string
    final String Id; //int
    final String Name; //string
    final String ProjectId; //int
    final String ProjectName; //string
    final String ProjectNo; //string
    final String ResponsibleForemanId; //int
    final String ResponsibleServiceId; //int
    final String WorkOrderId; //int
    final String WorkOrderNo; //int
    final String WorkOrderStatusId; //int
    final String WorkPoolId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderListStore(
    this.Addition,
    this.BasicScope,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerId,
    this.Disabled,
    this.FullName,
    this.Id,
    this.Name,
    this.ProjectId,
    this.ProjectName,
    this.ProjectNo,
    this.ResponsibleForemanId,
    this.ResponsibleServiceId,
    this.WorkOrderId,
    this.WorkOrderNo,
    this.WorkOrderStatusId,
    this.WorkPoolId,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderListStore.fromJson(Map<String, dynamic> json) : 
    Addition = json['Addition'] ?? '',
    BasicScope = json['BasicScope'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerId = json['CustomerId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    FullName = json['FullName'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    ProjectName = json['ProjectName'] ?? '',
    ProjectNo = json['ProjectNo'] ?? '',
    ResponsibleForemanId = json['ResponsibleForemanId'] ?? '',
    ResponsibleServiceId = json['ResponsibleServiceId'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    WorkPoolId = json['WorkPoolId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Addition' : Addition,
    'BasicScope' : BasicScope,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerId' : CustomerId,
    'Disabled' : Disabled,
    'FullName' : FullName,
    'Id' : Id,
    'Name' : Name,
    'ProjectId' : ProjectId,
    'ProjectName' : ProjectName,
    'ProjectNo' : ProjectNo,
    'ResponsibleForemanId' : ResponsibleForemanId,
    'ResponsibleServiceId' : ResponsibleServiceId,
    'WorkOrderId' : WorkOrderId,
    'WorkOrderNo' : WorkOrderNo,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'WorkPoolId' : WorkPoolId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrderLocation", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "ProjectId", type: "int", useNull: !0 },
      { name: "WorkOrderNo", type: "int", max: 10 },
      {
        name: "WOAWONo",
        type: "int",
        meType: "meShortText",
        persist: !1,
        useNull: !0,
        convert: function (b, a) {
          if (a.get("Addition") == 1) {
            return (
              getSetting("System.Prefix.VariationNo") +
              Ext.String.leftPad(a.get("WorkOrderNo"), 3, "0")
            );
          } else {
            return a.get("WorkOrderNo");
          }
        },
      },
      { name: "Name", type: "string", meType: "meLongText", max: 100 },
      { name: "CustomerName", type: "string", meType: "meLongText", max: 100 },
      { name: "WorkplaceAddress", type: "string", meType: "meMediumText" },
      { name: "WorkOrderStatusId", type: "int", meType: "meMediumText" },
      { name: "WorkOrderStatusCode", type: "int", meType: "meMediumText" },
      { name: "GpsX", type: "int", meType: "meShortText", useNull: !0 },
      { name: "GpsY", type: "int", meType: "meShortText", useNull: !0 },
    ],
  },
});*/

class WorkOrderLocationStore {
  static String name = 'WorkOrderLocationStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String CustomerName; //string
    final String Disabled; //boolean
    final String? GpsX; //int
    final String? GpsY; //int
    final String Id; //int
    final String Name; //string
    final String? ProjectId; //int
    final String? WOAWONo; //int
    final String WorkOrderNo; //int
    final String WorkOrderStatusCode; //int
    final String WorkOrderStatusId; //int
    final String WorkplaceAddress; //string
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderLocationStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CustomerName,
    this.Disabled,
    this.GpsX,
    this.GpsY,
    this.Id,
    this.Name,
    this.ProjectId,
    this.WOAWONo,
    this.WorkOrderNo,
    this.WorkOrderStatusCode,
    this.WorkOrderStatusId,
    this.WorkplaceAddress,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderLocationStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CustomerName = json['CustomerName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    GpsX = json['GpsX'] ?? '',
    GpsY = json['GpsY'] ?? '',
    Id = json['Id'] ?? '',
    Name = json['Name'] ?? '',
    ProjectId = json['ProjectId'] ?? '',
    WOAWONo = json['WOAWONo'] ?? '',
    WorkOrderNo = json['WorkOrderNo'] ?? '',
    WorkOrderStatusCode = json['WorkOrderStatusCode'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    WorkplaceAddress = json['WorkplaceAddress'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CustomerName' : CustomerName,
    'Disabled' : Disabled,
    'GpsX' : GpsX,
    'GpsY' : GpsY,
    'Id' : Id,
    'Name' : Name,
    'ProjectId' : ProjectId,
    'WOAWONo' : WOAWONo,
    'WorkOrderNo' : WorkOrderNo,
    'WorkOrderStatusCode' : WorkOrderStatusCode,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'WorkplaceAddress' : WorkplaceAddress,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrderRow", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderId", type: "int" },
      { name: "RowType", type: "string", max: 1, defaultValue: "" },
      { name: "ArticleId", type: "int" },
      { name: "BasePriceUsed", type: "bool" },
      { name: "CostUnitPricelist", type: "string", max: 50, defaultValue: "" },
      { name: "PriceUnitPricelist", type: "string", max: 50, defaultValue: "" },
      {
        name: "PayoffUnitPricelist",
        type: "string",
        max: 50,
        defaultValue: "",
      },
      { name: "CodeNo", type: "string", max: 10, defaultValue: "" },
      { name: "Title", type: "string", max: 128000, defaultValue: "" },
      { name: "AccountNo", type: "string", max: 5 },
      { name: "ItemUnitId", type: "int" },
      { name: "PlannedQty", type: "float" },
      { name: "Days", type: "float" },
      { name: "StartQty", type: "float" },
      { name: "EndQty", type: "float" },
      { name: "UsedQty", type: "float" },
      { name: "CostUnit", type: "float" },
      { name: "PriceUnit", type: "float" },
      { name: "Amount", type: "float", defaultValue: 1 },
      { name: "DeliveryDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "ReturnDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "PerformedDate", type: "date", useNull: !0, dateFormat: "Y-m-d" },
      { name: "PerformedUserId", type: "int", useNull: !0 },
      { name: "Comment", type: "string", defaultValue: "" },
      { name: "RowFormat", type: "string", max: 3 },
      { name: "RowStatus", type: "string", max: 1 },
      { name: "DiaryId", type: "int" },
      { name: "TimeId", type: "int", useNull: !0 },
      { name: "Chargeable", type: "bool", defaultValue: !0 },
      { name: "Invoiced", type: "bool", defaultValue: !1, persist: !1 },
      { name: "IsPaidOff", type: "bool", defaultValue: !1, persist: !1 },
      { name: "ParentIsReadOnly", type: "bool", defaultValue: !1, persist: !1 },
      {
        name: "Locked",
        type: "bool",
        convert: function (b, a) {
          return (
            a.get("Invoiced") || a.get("IsPaidOff") || a.get("ParentIsReadOnly")
          );
        },
      },
      { name: "CreditProjectId", type: "int", useNull: !0 },
      { name: "ResourceId", type: "int", useNull: !0 },
      { name: "FactoryPricelistId", type: "int", useNull: !0 },
      { name: "ArticleCategoryId", type: "int", useNull: !0 },
      { name: "Payoff", type: "bool", defaultValue: !1 },
      {
        name: "PlannedQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "PlannedQty");
        },
      },
      {
        name: "Days_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "Days");
        },
      },
      {
        name: "UsedQty_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "UsedQty");
        },
      },
      { name: "KPIValue", type: "float", allowNull: !0, persist: !1 },
      {
        name: "KPIValue_fmt",
        type: "string",
        persist: !1,
        convert: function (b, a) {
          return getFormattedNumeric(a, "KPIValue", 1, this);
        },
      },
      { name: "RelatedWorkOrderRowId", type: "int" },
    ],
  },
});*/

class WorkOrderRowStore {
  static String name = 'WorkOrderRowStore';

    final String AccountNo; //string
    final String Amount; //float
    final String? ArticleCategoryId; //int
    final String ArticleId; //int
    final String BasePriceUsed; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Chargeable; //bool
    final String CodeNo; //string
    final String Comment; //string
    final String CostUnit; //float
    final String CostUnitPricelist; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String? CreditProjectId; //int
    final String Days; //float
    final String Days_fmt; //string
    final String? DeliveryDate; //date
    final String DiaryId; //int
    final String Disabled; //boolean
    final String EndQty; //float
    final String? FactoryPricelistId; //int
    final String Id; //int
    final String Invoiced; //bool
    final String IsPaidOff; //bool
    final String ItemUnitId; //int
    final String KPIValue; //float
    final String KPIValue_fmt; //string
    final String Locked; //bool
    final String ParentIsReadOnly; //bool
    final String Payoff; //bool
    final String PayoffUnitPricelist; //string
    final String? PerformedDate; //date
    final String? PerformedUserId; //int
    final String PlannedQty; //float
    final String PlannedQty_fmt; //string
    final String PriceUnit; //float
    final String PriceUnitPricelist; //string
    final String RelatedWorkOrderRowId; //int
    final String? ResourceId; //int
    final String? ReturnDate; //date
    final String RowFormat; //string
    final String RowStatus; //string
    final String RowType; //string
    final String StartQty; //float
    final String? TimeId; //int
    final String Title; //string
    final String UsedQty; //float
    final String UsedQty_fmt; //string
    final String WorkOrderId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderRowStore(
    this.AccountNo,
    this.Amount,
    this.ArticleCategoryId,
    this.ArticleId,
    this.BasePriceUsed,
    this.Changed,
    this.ChangedId,
    this.Chargeable,
    this.CodeNo,
    this.Comment,
    this.CostUnit,
    this.CostUnitPricelist,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.CreditProjectId,
    this.Days,
    this.Days_fmt,
    this.DeliveryDate,
    this.DiaryId,
    this.Disabled,
    this.EndQty,
    this.FactoryPricelistId,
    this.Id,
    this.Invoiced,
    this.IsPaidOff,
    this.ItemUnitId,
    this.KPIValue,
    this.KPIValue_fmt,
    this.Locked,
    this.ParentIsReadOnly,
    this.Payoff,
    this.PayoffUnitPricelist,
    this.PerformedDate,
    this.PerformedUserId,
    this.PlannedQty,
    this.PlannedQty_fmt,
    this.PriceUnit,
    this.PriceUnitPricelist,
    this.RelatedWorkOrderRowId,
    this.ResourceId,
    this.ReturnDate,
    this.RowFormat,
    this.RowStatus,
    this.RowType,
    this.StartQty,
    this.TimeId,
    this.Title,
    this.UsedQty,
    this.UsedQty_fmt,
    this.WorkOrderId,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderRowStore.fromJson(Map<String, dynamic> json) : 
    AccountNo = json['AccountNo'] ?? '',
    Amount = json['Amount'] ?? '',
    ArticleCategoryId = json['ArticleCategoryId'] ?? '',
    ArticleId = json['ArticleId'] ?? '',
    BasePriceUsed = json['BasePriceUsed'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Chargeable = json['Chargeable'] ?? '',
    CodeNo = json['CodeNo'] ?? '',
    Comment = json['Comment'] ?? '',
    CostUnit = json['CostUnit'] ?? '',
    CostUnitPricelist = json['CostUnitPricelist'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    CreditProjectId = json['CreditProjectId'] ?? '',
    Days = json['Days'] ?? '',
    Days_fmt = json['Days_fmt'] ?? '',
    DeliveryDate = json['DeliveryDate'] ?? '',
    DiaryId = json['DiaryId'] ?? '',
    Disabled = json['Disabled'] ?? '',
    EndQty = json['EndQty'] ?? '',
    FactoryPricelistId = json['FactoryPricelistId'] ?? '',
    Id = json['Id'] ?? '',
    Invoiced = json['Invoiced'] ?? '',
    IsPaidOff = json['IsPaidOff'] ?? '',
    ItemUnitId = json['ItemUnitId'] ?? '',
    KPIValue = json['KPIValue'] ?? '',
    KPIValue_fmt = json['KPIValue_fmt'] ?? '',
    Locked = json['Locked'] ?? '',
    ParentIsReadOnly = json['ParentIsReadOnly'] ?? '',
    Payoff = json['Payoff'] ?? '',
    PayoffUnitPricelist = json['PayoffUnitPricelist'] ?? '',
    PerformedDate = json['PerformedDate'] ?? '',
    PerformedUserId = json['PerformedUserId'] ?? '',
    PlannedQty = json['PlannedQty'] ?? '',
    PlannedQty_fmt = json['PlannedQty_fmt'] ?? '',
    PriceUnit = json['PriceUnit'] ?? '',
    PriceUnitPricelist = json['PriceUnitPricelist'] ?? '',
    RelatedWorkOrderRowId = json['RelatedWorkOrderRowId'] ?? '',
    ResourceId = json['ResourceId'] ?? '',
    ReturnDate = json['ReturnDate'] ?? '',
    RowFormat = json['RowFormat'] ?? '',
    RowStatus = json['RowStatus'] ?? '',
    RowType = json['RowType'] ?? '',
    StartQty = json['StartQty'] ?? '',
    TimeId = json['TimeId'] ?? '',
    Title = json['Title'] ?? '',
    UsedQty = json['UsedQty'] ?? '',
    UsedQty_fmt = json['UsedQty_fmt'] ?? '',
    WorkOrderId = json['WorkOrderId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AccountNo' : AccountNo,
    'Amount' : Amount,
    'ArticleCategoryId' : ArticleCategoryId,
    'ArticleId' : ArticleId,
    'BasePriceUsed' : BasePriceUsed,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Chargeable' : Chargeable,
    'CodeNo' : CodeNo,
    'Comment' : Comment,
    'CostUnit' : CostUnit,
    'CostUnitPricelist' : CostUnitPricelist,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'CreditProjectId' : CreditProjectId,
    'Days' : Days,
    'Days_fmt' : Days_fmt,
    'DeliveryDate' : DeliveryDate,
    'DiaryId' : DiaryId,
    'Disabled' : Disabled,
    'EndQty' : EndQty,
    'FactoryPricelistId' : FactoryPricelistId,
    'Id' : Id,
    'Invoiced' : Invoiced,
    'IsPaidOff' : IsPaidOff,
    'ItemUnitId' : ItemUnitId,
    'KPIValue' : KPIValue,
    'KPIValue_fmt' : KPIValue_fmt,
    'Locked' : Locked,
    'ParentIsReadOnly' : ParentIsReadOnly,
    'Payoff' : Payoff,
    'PayoffUnitPricelist' : PayoffUnitPricelist,
    'PerformedDate' : PerformedDate,
    'PerformedUserId' : PerformedUserId,
    'PlannedQty' : PlannedQty,
    'PlannedQty_fmt' : PlannedQty_fmt,
    'PriceUnit' : PriceUnit,
    'PriceUnitPricelist' : PriceUnitPricelist,
    'RelatedWorkOrderRowId' : RelatedWorkOrderRowId,
    'ResourceId' : ResourceId,
    'ReturnDate' : ReturnDate,
    'RowFormat' : RowFormat,
    'RowStatus' : RowStatus,
    'RowType' : RowType,
    'StartQty' : StartQty,
    'TimeId' : TimeId,
    'Title' : Title,
    'UsedQty' : UsedQty,
    'UsedQty_fmt' : UsedQty_fmt,
    'WorkOrderId' : WorkOrderId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrderStatus", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "StatusName", type: "string", max: 50 },
      { name: "StatusCode", type: "int", sortable: !0, sortType: "asInt" },
      { name: "StatusColor", type: "string", max: 20 },
      { name: "TempRec", type: "bool", persist: !1, defaultValue: !1 },
    ],
  },
});*/

class WorkOrderStatusStore {
  static String name = 'WorkOrderStatusStore';

    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String Id; //int
    final String StatusCode; //int
    final String StatusColor; //string
    final String StatusName; //string
    final String TempRec; //bool
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderStatusStore(
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.Id,
    this.StatusCode,
    this.StatusColor,
    this.StatusName,
    this.TempRec,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderStatusStore.fromJson(Map<String, dynamic> json) : 
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    Id = json['Id'] ?? '',
    StatusCode = json['StatusCode'] ?? '',
    StatusColor = json['StatusColor'] ?? '',
    StatusName = json['StatusName'] ?? '',
    TempRec = json['TempRec'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'Id' : Id,
    'StatusCode' : StatusCode,
    'StatusColor' : StatusColor,
    'StatusName' : StatusName,
    'TempRec' : TempRec,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


/*
Ext.define("MEM.model.WorkOrderStatusRelations", {
  extend: MEM.model.Base,
  config: {
    fields: [
      { name: "WorkOrderStatusId", type: "int", useNull: !0 },
      { name: "ExternalWorkOrderStatusId", type: "int", useNull: !0 },
      { name: "AllowExternal", type: "bool", defaultValue: !1 },
      { name: "RequireExternal", type: "bool", defaultValue: !1 },
    ],
  },
});*/

class WorkOrderStatusRelationsStore {
  static String name = 'WorkOrderStatusRelationsStore';

    final String AllowExternal; //bool
    final String Changed; //date
    final String ChangedId; //string
    final String Created; //date
    final String CreatedId; //string
    final String CreatedName; //string
    final String Disabled; //boolean
    final String? ExternalWorkOrderStatusId; //int
    final String Id; //int
    final String RequireExternal; //bool
    final String? WorkOrderStatusId; //int
    final String isField; //boolean
    final String isTmpRec; //boolean

  WorkOrderStatusRelationsStore(
    this.AllowExternal,
    this.Changed,
    this.ChangedId,
    this.Created,
    this.CreatedId,
    this.CreatedName,
    this.Disabled,
    this.ExternalWorkOrderStatusId,
    this.Id,
    this.RequireExternal,
    this.WorkOrderStatusId,
    this.isField,
    this.isTmpRec,
  );

  WorkOrderStatusRelationsStore.fromJson(Map<String, dynamic> json) : 
    AllowExternal = json['AllowExternal'] ?? '',
    Changed = json['Changed'] ?? '',
    ChangedId = json['ChangedId'] ?? '',
    Created = json['Created'] ?? '',
    CreatedId = json['CreatedId'] ?? '',
    CreatedName = json['CreatedName'] ?? '',
    Disabled = json['Disabled'] ?? '',
    ExternalWorkOrderStatusId = json['ExternalWorkOrderStatusId'] ?? '',
    Id = json['Id'] ?? '',
    RequireExternal = json['RequireExternal'] ?? '',
    WorkOrderStatusId = json['WorkOrderStatusId'] ?? '',
    isField = json['isField'] ?? '',
    isTmpRec = json['isTmpRec'] ?? '';

  Map<String, dynamic> toJson() => { 
    'AllowExternal' : AllowExternal,
    'Changed' : Changed,
    'ChangedId' : ChangedId,
    'Created' : Created,
    'CreatedId' : CreatedId,
    'CreatedName' : CreatedName,
    'Disabled' : Disabled,
    'ExternalWorkOrderStatusId' : ExternalWorkOrderStatusId,
    'Id' : Id,
    'RequireExternal' : RequireExternal,
    'WorkOrderStatusId' : WorkOrderStatusId,
    'isField' : isField,
    'isTmpRec' : isTmpRec,
  };
}


